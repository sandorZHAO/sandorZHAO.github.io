<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ioui-介绍</title>
    <link href="/2021/04/19/project/io-ui/00_%E4%BB%8B%E7%BB%8D/"/>
    <url>/2021/04/19/project/io-ui/00_%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p><strong>项目地址</strong> <a href="https://github.com/io-ui/io-ui">https://github.com/io-ui/io-ui</a><br><strong>项目文档</strong> <a href="https://io-ui.pyjava.com/">https://io-ui.pyjava.com/</a></p>          </div><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>Io-Ui<br>基于vue的ui样式组件</p><h2 id="名称来源"><a href="#名称来源" class="headerlink" title="名称来源"></a>名称来源</h2><p>io 来源于dota2中小精灵</p><h2 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h2><ol><li>Color 颜色</li><li>Font 字体</li><li>Shadow 投影</li></ol><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><ol><li><input type="checkbox" disabled checked="checked"> Button 按钮</li><li><input type="checkbox" disabled checked="checked"> Icon 图标 </li><li><input type="checkbox" disabled > Toast 消息框</li></ol>]]></content>
    
    
    <categories>
      
      <category>ioui</category>
      
    </categories>
    
    
    <tags>
      
      <tag>project</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电商平台-swagger</title>
    <link href="/2021/04/18/project/%E7%94%B5%E5%95%86%E5%B9%B3%E5%8F%B0/03_swagger/"/>
    <url>/2021/04/18/project/%E7%94%B5%E5%95%86%E5%B9%B3%E5%8F%B0/03_swagger/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p><strong>项目地址</strong> <a href="https://github.com/sandorZHAO/shop">https://github.com/sandorZHAO/shop</a></p>          </div><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>以下摘自oschina<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="oschina-swagger介绍">[1]</span></a></sup></p><blockquote><p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。</p><p>总体目标是使客户端和文件系统作为服务器以同样的速度来更新。文件的方法、参数和模型紧密集成到服务器端的代码，允许 API 来始终保持同步。Swagger 让部署管理和使用功能强大的 API 从未如此简单。</p></blockquote><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@EnableOpenApi</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SwaggerConfiguration</span> </span>&#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">webApiDoc</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.OAS_30)<br>                .groupName(<span class="hljs-string">&quot;用户端接口文档&quot;</span>)<br>                .pathMapping(<span class="hljs-string">&quot;/&quot;</span>)<br>                <span class="hljs-comment">// 定义是否开启swagger, 可以通过变量配置它</span><br>                .enable(<span class="hljs-keyword">true</span>)<br>                <span class="hljs-comment">// 配置文档的元信息</span><br>                .apiInfo(apiInfo())<br>                .select()<br>                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.pyjava.shop&quot;</span>))<br>                <span class="hljs-comment">// 正则匹配请求路径,并分配当前分组</span><br>                .paths(PathSelectors.ant(<span class="hljs-string">&quot;api/**&quot;</span>))<br>                .build()<br>                .globalRequestParameters(globalRequestParameters())<br>                .globalResponses(HttpMethod.GET, getGlobalResponseMessage());<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">adminApiDoc</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.OAS_30)<br>                .groupName(<span class="hljs-string">&quot;管理端接口文档&quot;</span>)<br>                .pathMapping(<span class="hljs-string">&quot;/&quot;</span>)<br>                <span class="hljs-comment">// 定义是否开启swagger, 可以通过变量配置它</span><br>                .enable(<span class="hljs-keyword">true</span>)<br>                <span class="hljs-comment">// 配置文档的元信息</span><br>                .apiInfo(apiInfo())<br>                .select()<br>                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.pyjava.shop&quot;</span>))<br>                <span class="hljs-comment">// 正则匹配请求路径,并分配当前分组</span><br>                .paths(PathSelectors.ant(<span class="hljs-string">&quot;admin/**&quot;</span>))<br>                .build();<br><br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title">apiInfo</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ApiInfoBuilder()<br>                .title(<span class="hljs-string">&quot;电商平台&quot;</span>)<br>                .description(<span class="hljs-string">&quot;微服务接口文档&quot;</span>)<br>                .version(<span class="hljs-string">&quot;v1.0&quot;</span>)<br>                .contact(<span class="hljs-keyword">new</span> Contact(<span class="hljs-string">&quot;zhaojj&quot;</span>, <span class="hljs-string">&quot;http://pyjava.com&quot;</span>, <span class="hljs-string">&quot;757355084@qq.com&quot;</span>))<br>                .build();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> List&lt;RequestParameter&gt; <span class="hljs-title">globalRequestParameters</span><span class="hljs-params">()</span> </span>&#123;<br>        List&lt;RequestParameter&gt; parameters = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        parameters.add(<span class="hljs-keyword">new</span> RequestParameterBuilder()<br>                .name(<span class="hljs-string">&quot;token&quot;</span>)<br>                .description(<span class="hljs-string">&quot;登录令牌&quot;</span>)<br>                .in(ParameterType.HEADER)<br>                .query(q -&gt; q.model(m -&gt; m.scalarModel(ScalarType.STRING)))<br>                .required(<span class="hljs-keyword">false</span>)<br>                .build());<br><br>        <span class="hljs-keyword">return</span> parameters;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> List&lt;Response&gt; <span class="hljs-title">getGlobalResponseMessage</span><span class="hljs-params">()</span> </span>&#123;<br>        List&lt;Response&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>        list.add(<span class="hljs-keyword">new</span> ResponseBuilder()<br>                .code(<span class="hljs-string">&quot;4xx&quot;</span>)<br>                .description(<span class="hljs-string">&quot;请求错误,根据code和msg检查&quot;</span>)<br>                .build());<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><section class="footnotes"><h2>参考</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.oschina.net/p/swagger?hmsr=aladdin1e1">oschina-swagger介绍</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>基于Spring Alibaba Cloud的电商平台</category>
      
    </categories>
    
    
    <tags>
      
      <tag>project</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电商平台-用户模块</title>
    <link href="/2021/04/18/project/%E7%94%B5%E5%95%86%E5%B9%B3%E5%8F%B0/04_%E7%94%A8%E6%88%B7%E6%A8%A1%E5%9D%97/"/>
    <url>/2021/04/18/project/%E7%94%B5%E5%95%86%E5%B9%B3%E5%8F%B0/04_%E7%94%A8%E6%88%B7%E6%A8%A1%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p><strong>项目地址</strong> <a href="https://github.com/sandorZHAO/shop">https://github.com/sandorZHAO/shop</a></p>          </div><h2 id="注册功能"><a href="#注册功能" class="headerlink" title="注册功能"></a>注册功能</h2><h3 id="功能需求"><a href="#功能需求" class="headerlink" title="功能需求"></a>功能需求</h3><ul><li>使用邮箱注册，已经注册的邮箱不能重复注册</li><li>密码不能使用简单的MD5加密</li><li>用户上传头像需要用文件存储</li></ul><h3 id="安全需求"><a href="#安全需求" class="headerlink" title="安全需求"></a>安全需求</h3><ul><li>高并发下邮箱唯一性</li><li>注册邮箱或者手机验证码不能被恶意调用</li><li>头像文件存储访问方便扩容和管理</li></ul><h3 id="短信轰炸"><a href="#短信轰炸" class="headerlink" title="短信轰炸"></a>短信轰炸</h3><ul><li><p>什么是短信-邮箱轰炸机：</p><p>  手机短信轰炸机是批量、循环给手机无限发送各种网站的注册验证码短信的方法。</p></li></ul><h3 id="图形验证码"><a href="#图形验证码" class="headerlink" title="图形验证码"></a>图形验证码</h3><ul><li><p>依赖</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>kaptcha-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>开发配置</p><p>  在user工程下</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CaptchaConfig</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 验证码配置</span><br><span class="hljs-comment">    * Kaptcha配置类名</span><br><span class="hljs-comment">    * </span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@Qualifier(&quot;captchaProducer&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DefaultKaptcha <span class="hljs-title">kaptcha</span><span class="hljs-params">()</span> </span>&#123;<br>        DefaultKaptcha kaptcha = <span class="hljs-keyword">new</span> DefaultKaptcha();<br>        Properties properties = <span class="hljs-keyword">new</span> Properties();<br><span class="hljs-comment">//properties.setProperty(Constants.KAPTCHA_BORDER, &quot;yes&quot;);</span><br><span class="hljs-comment">//properties.setProperty(Constants.KAPTCHA_BORDER_COLOR, &quot;220,220,220&quot;);</span><br><span class="hljs-comment">////properties.setProperty(Constants.KAPTCHA_TEXTPRODUCER_FONT_COLOR, &quot;38,29,12&quot;);</span><br><span class="hljs-comment">//properties.setProperty(Constants.KAPTCHA_IMAGE_WIDTH, &quot;147&quot;);</span><br><span class="hljs-comment">//properties.setProperty(Constants.KAPTCHA_IMAGE_HEIGHT, &quot;34&quot;);</span><br><span class="hljs-comment">//properties.setProperty(Constants.KAPTCHA_TEXTPRODUCER_FONT_SIZE, &quot;25&quot;);</span><br><span class="hljs-comment">////properties.setProperty(Constants.KAPTCHA_SESSION_KEY, &quot;code&quot;);</span><br>        <span class="hljs-comment">//验证码个数</span><br>        properties.setProperty(Constants.KAPTCHA_TEXTPRODUCER_CHAR_LENGTH, <span class="hljs-string">&quot;4&quot;</span>);<br><span class="hljs-comment">//properties.setProperty(Constants.KAPTCHA_TEXTPRODUCER_FONT_NAMES, &quot;Courier&quot;);</span><br>        <span class="hljs-comment">//字体间隔</span><br>        properties.setProperty(Constants.KAPTCHA_TEXTPRODUCER_CHAR_SPACE,<span class="hljs-string">&quot;8&quot;</span>);<br>        <span class="hljs-comment">//干扰线颜色</span><br><span class="hljs-comment">//properties.setProperty(Constants.KAPTCHA_NOISE_COLOR, &quot;white&quot;);</span><br>        <span class="hljs-comment">//干扰实现类</span><br>        properties.setProperty(Constants.KAPTCHA_NOISE_IMPL, <span class="hljs-string">&quot;com.google.code.kaptcha.impl.NoNoise&quot;</span>);<br>        <span class="hljs-comment">//图片样式</span><br>        properties.setProperty(Constants.KAPTCHA_OBSCURIFICATOR_IMPL, <span class="hljs-string">&quot;com.google.code.kaptcha.impl.WaterRipple&quot;</span>);<br>        <span class="hljs-comment">//文字来源</span><br>        properties.setProperty(Constants.KAPTCHA_TEXTPRODUCER_CHAR_STRING, <span class="hljs-string">&quot;0123456789&quot;</span>);<br>        Config config = <span class="hljs-keyword">new</span> Config(properties);<br>        kaptcha.setConfig(config);<br>        <span class="hljs-keyword">return</span> kaptcha;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>对应接口实现</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Api(tags = &quot;通知模块&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/api/notify/v1/&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NotifyController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Qualifier(&quot;captchaProducer&quot;)</span><br>    <span class="hljs-keyword">private</span> Producer captchaProducer;<br><br>    <span class="hljs-meta">@GetMapping(&quot;captcha&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getCaptcha</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span></span>&#123;<br>        String captcha = captchaProducer.createText();<br>        log.info(<span class="hljs-string">&quot;图形验证码&quot;</span> + captcha);<br>        BufferedImage image = captchaProducer.createImage(captcha);<br>        ServletOutputStream outputStream;<br>        <span class="hljs-keyword">try</span> &#123;<br>            outputStream = response.getOutputStream();<br>            ImageIO.write(image, <span class="hljs-string">&quot;jpg&quot;</span>, outputStream);<br>            outputStream.flush();<br>            outputStream.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>            log.error(<span class="hljs-string">&quot;获取验证码异常:&#123;0&#125;&quot;</span>, e);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>请求结果</p><p>  <img src="/img/project/shop/shop-captcha.png" alt="获取图形验证码"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>基于Spring Alibaba Cloud的电商平台</category>
      
    </categories>
    
    
    <tags>
      
      <tag>project</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电商平台-common模块</title>
    <link href="/2021/04/16/project/%E7%94%B5%E5%95%86%E5%B9%B3%E5%8F%B0/02_common%E7%BB%84%E4%BB%B6/"/>
    <url>/2021/04/16/project/%E7%94%B5%E5%95%86%E5%B9%B3%E5%8F%B0/02_common%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p><strong>项目地址</strong> <a href="https://github.com/sandorZHAO/shop">https://github.com/sandorZHAO/shop</a></p>          </div><h2 id="统一返回结果"><a href="#统一返回结果" class="headerlink" title="统一返回结果"></a>统一返回结果</h2><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>在编写代码时,给前端返回一个格式统一的json结构,通常使用一个<code>Result</code>类来包装。</p><p>再给前台返回时可以使用这样的操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/find/&#123;addressId&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Result&lt;AddressDO&gt; <span class="hljs-title">findAddressById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;addressId&quot;)</span> <span class="hljs-keyword">long</span> addressId)</span> </span>&#123;<br>    AddressDO address = addressService.findAddress(addressId);<br>    <span class="hljs-keyword">return</span> Result.ofSuccess(address);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Result类"><a href="#Result类" class="headerlink" title="Result类"></a>Result类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Result</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 状态码</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Integer code;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 描述</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String message;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> T data;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Long timestamp;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Result</span><span class="hljs-params">(Integer code, String message, T data)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.code = code;<br>        <span class="hljs-keyword">this</span>.message = message;<br>        <span class="hljs-keyword">this</span>.data = data;<br>        <span class="hljs-keyword">this</span>.timestamp = System.currentTimeMillis();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@link</span> Result&#125; 构建器</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> code    状态码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message 描述</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data    数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> Result&#125; 统一返回结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">Result&lt;T&gt; <span class="hljs-title">of</span><span class="hljs-params">(Integer code, String message, T data)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result&lt;&gt;(code, message, data);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@link</span> Result&#125; 构建器</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> resultCode &#123;<span class="hljs-doctag">@link</span> ResultCode&#125; 状态码枚举类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> Result&#125; 统一返回结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">Result&lt;T&gt; <span class="hljs-title">of</span><span class="hljs-params">(ResultCode resultCode)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Result.of(resultCode.getCode(), resultCode.getMessage(), <span class="hljs-keyword">null</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@link</span> Result&#125; 构建器</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> resultCode &#123;<span class="hljs-doctag">@link</span> ResultCode&#125; 状态码枚举类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data       数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> Result&#125; 统一返回结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">Result&lt;T&gt; <span class="hljs-title">of</span><span class="hljs-params">(ResultCode resultCode, T data)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Result.of(resultCode.getCode(), resultCode.getMessage(), data);<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 成功</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> Result&#125; 统一返回结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title">ofSuccess</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Result.of(ResultCode.SUCCESS, <span class="hljs-keyword">null</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 成功 并且携带数据</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> object 数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> Result&#125; 统一返回结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">Result&lt;T&gt; <span class="hljs-title">ofSuccess</span><span class="hljs-params">(T object)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Result.of(ResultCode.SUCCESS, object);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 失败</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> resultCode &#123;<span class="hljs-doctag">@link</span> ResultCode&#125; 状态码枚举类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> Result&#125; 统一返回结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title">ofFailure</span><span class="hljs-params">(ResultCode resultCode)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Result.of(resultCode);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>以上<code>Result</code>类需要配和<code>ResultCode</code>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">ResultCode</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 成功</span><br><span class="hljs-comment">     */</span><br>    SUCCESS(<span class="hljs-number">100000</span>, <span class="hljs-string">&quot;成功&quot;</span>),<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 内部异常</span><br><span class="hljs-comment">     */</span><br>    INNER_EXCEPTION(<span class="hljs-number">500000</span>, <span class="hljs-string">&quot;内部异常&quot;</span>),<br><br>    <span class="hljs-meta">@Getter</span><br>    <span class="hljs-keyword">private</span> String message;<br><br>    <span class="hljs-meta">@Getter</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> code;<br><br>    ResultCode(<span class="hljs-keyword">int</span> code, String message) &#123;<br>        <span class="hljs-keyword">this</span>.code = code;<br>        <span class="hljs-keyword">this</span>.message = message;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="业务异常类"><a href="#业务异常类" class="headerlink" title="业务异常类"></a>业务异常类</h3><p>我们通过自定义<code>BizException</code>类，将业务代码中出现的异常通过该类统一的抛出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EqualsAndHashCode(callSuper = true)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BizException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RuntimeException</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer code;<br>    <span class="hljs-keyword">private</span> String message;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">BizException</span><span class="hljs-params">(Integer code, String message)</span></span>&#123;<br>        <span class="hljs-keyword">super</span>(message);<br>        <span class="hljs-keyword">this</span>.code = code;<br>        <span class="hljs-keyword">this</span>.message = message;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">BizException</span><span class="hljs-params">(ResultCode resultCode)</span></span>&#123;<br>        <span class="hljs-keyword">super</span>(resultCode.getMessage());<br>        <span class="hljs-keyword">this</span>.code = resultCode.getCode();<br>        <span class="hljs-keyword">this</span>.message = resultCode.getMessage();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="全局异常处理"><a href="#全局异常处理" class="headerlink" title="全局异常处理"></a>全局异常处理</h3><p>SpringBoot中有一个<code>ControllerAdvice</code>的注解，使用该注解表示开启了全局异常的捕获，我们只需在自定义一个方法使用<code>ExceptionHandler</code>注解然后定义捕获异常的类型即可对这些捕获的异常进行统一的处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GlobalExceptionHandler</span> </span>&#123;<br><br>    <span class="hljs-meta">@ExceptionHandler(value = Exception.class)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">exceptionHandler</span><span class="hljs-params">(Exception e)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> BizException) &#123;<br>            BizException bizException = (BizException) e;<br>            log.error(<span class="hljs-string">&quot;[业务异常 &#123;0&#125;]&quot;</span>, e);<br>            <span class="hljs-keyword">return</span> Result.of(bizException.getCode(), bizException.getMessage(), <span class="hljs-keyword">null</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            log.error(<span class="hljs-string">&quot;[非业务异常 &#123;0&#125;]&quot;</span>, e);<br>            <span class="hljs-keyword">return</span> Result.of(ResultCode.INNER_EXCEPTION);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>exceptionHandler</code>该方法通过获取当前异常类，如果是我们定义的<code>BizException</code>，那么就是业务异常，否则就是非业务异常了。</p><h3 id="业务场景改进-demo"><a href="#业务场景改进-demo" class="headerlink" title="业务场景改进(demo)"></a>业务场景改进(demo)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/find/&#123;addressId&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Result&lt;AddressDO&gt; <span class="hljs-title">findAddressById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;addressId&quot;)</span> <span class="hljs-keyword">long</span> addressId)</span> </span>&#123;<br>    AddressDO address = addressService.findAddress(addressId);<br>    <span class="hljs-keyword">if</span>(addressId == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BizException(ResultCode.INNER_EXCEPTION);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> Result.ofSuccess(address);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里改进了之前的业务场景，假定查询id为1的地址时会抛出异常<code>BizException</code>，这时代码就进入了全局异常处理类中了(统一的去处理异常)。</p>]]></content>
    
    
    <categories>
      
      <category>基于Spring Alibaba Cloud的电商平台</category>
      
    </categories>
    
    
    <tags>
      
      <tag>project</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电商平台-表结构</title>
    <link href="/2021/04/12/project/%E7%94%B5%E5%95%86%E5%B9%B3%E5%8F%B0/01_%E8%A1%A8%E7%BB%93%E6%9E%84/"/>
    <url>/2021/04/12/project/%E7%94%B5%E5%95%86%E5%B9%B3%E5%8F%B0/01_%E8%A1%A8%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p><strong>项目地址</strong> <a href="https://github.com/sandorZHAO/shop">https://github.com/sandorZHAO/shop</a></p>          </div><h2 id="数据库划分"><a href="#数据库划分" class="headerlink" title="数据库划分"></a>数据库划分</h2><p>按照介绍中的分类(用户,优惠券,商品,订单)做数据库区分,每一个模块分类对应一个独立数据库</p><h2 id="用户服务数据库shop-user"><a href="#用户服务数据库shop-user" class="headerlink" title="用户服务数据库shop_user"></a>用户服务数据库shop_user</h2><ol><li>用户表</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `<span class="hljs-keyword">user</span>` (<br>    `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">11</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>    `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;昵称&#x27;</span>,<br>    `password` <span class="hljs-type">varchar</span>(<span class="hljs-number">124</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;密码&#x27;</span>,<br>    `avatar` <span class="hljs-type">varchar</span>(<span class="hljs-number">524</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;头像&#x27;</span>,<br>    `slogan` <span class="hljs-type">varchar</span>(<span class="hljs-number">524</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;用户签名&#x27;</span>,<br>    `sex` tinyint(<span class="hljs-number">2</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;1&#x27;</span> COMMENT <span class="hljs-string">&#x27;0表示女，1表示男&#x27;</span>,<br>    `points` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;积分&#x27;</span>,<br>    `create_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    `email` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;邮箱&#x27;</span>,<br>    `salt` <span class="hljs-type">varchar</span>(<span class="hljs-number">12</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;盐，用于个人敏感信息处理&#x27;</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>    <span class="hljs-keyword">UNIQUE</span> KEY `email_idx` (`email`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br></code></pre></td></tr></table></figure><ol start="2"><li>收货地址表</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `address` (<br>    `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>    `user_id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;用户id&#x27;</span>,<br>    `default_status` <span class="hljs-type">int</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;是否默认收货地址：0-&gt;否；1-&gt;是&#x27;</span>,<br>    `receive_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;收发货人姓名&#x27;</span>,<br>    `phone` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;收货人电话&#x27;</span>,<br>    `province` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;省/直辖市&#x27;</span>,<br>    `city` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;市&#x27;</span>,<br>    `region` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;区&#x27;</span>,<br>    `detail_address` <span class="hljs-type">varchar</span>(<span class="hljs-number">200</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;详细地址&#x27;</span>,<br>    `create_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">39</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4 COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;电商-公司收发货地址表&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="优惠券服务数据库shop-product"><a href="#优惠券服务数据库shop-product" class="headerlink" title="优惠券服务数据库shop_product"></a>优惠券服务数据库shop_product</h2><h2 id="商品服务数据库shop-coupon"><a href="#商品服务数据库shop-coupon" class="headerlink" title="商品服务数据库shop_coupon"></a>商品服务数据库shop_coupon</h2><h2 id="订单服务数据库shop-order"><a href="#订单服务数据库shop-order" class="headerlink" title="订单服务数据库shop_order"></a>订单服务数据库shop_order</h2><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/sandorZHAO/shop">https://github.com/sandorZHAO/shop</a></p>]]></content>
    
    
    <categories>
      
      <category>基于Spring Alibaba Cloud的电商平台</category>
      
    </categories>
    
    
    <tags>
      
      <tag>project</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电商平台-介绍</title>
    <link href="/2021/04/12/project/%E7%94%B5%E5%95%86%E5%B9%B3%E5%8F%B0/00_%E4%BB%8B%E7%BB%8D/"/>
    <url>/2021/04/12/project/%E7%94%B5%E5%95%86%E5%B9%B3%E5%8F%B0/00_%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p><strong>项目地址</strong> <a href="https://github.com/sandorZHAO/shop">https://github.com/sandorZHAO/shop</a></p>          </div><h2 id="项目名称"><a href="#项目名称" class="headerlink" title="项目名称"></a>项目名称</h2><p>基于Spring Alibaba Cloud的电商平台的设计与实现</p><h2 id="需求分析和规划"><a href="#需求分析和规划" class="headerlink" title="需求分析和规划"></a>需求分析和规划</h2><h3 id="用户服务模块"><a href="#用户服务模块" class="headerlink" title="用户服务模块"></a>用户服务模块</h3><ol><li>用户注册/登录</li><li>头像和信息维护</li><li>收获地址模块</li></ol><h3 id="优惠券服务模块"><a href="#优惠券服务模块" class="headerlink" title="优惠券服务模块"></a>优惠券服务模块</h3><ol><li>展示和领券</li><li>使用和释放</li></ol><h3 id="商品服务模块"><a href="#商品服务模块" class="headerlink" title="商品服务模块"></a>商品服务模块</h3><ol><li>商品基本展示</li><li>库存扣减回收</li><li>购物车模块</li></ol><h3 id="订单服务模块"><a href="#订单服务模块" class="headerlink" title="订单服务模块"></a>订单服务模块</h3><ol><li>下单支付</li><li>订单基本操作</li></ol><h2 id="功能架构图"><a href="#功能架构图" class="headerlink" title="功能架构图"></a>功能架构图</h2><h2 id="技术栈介绍"><a href="#技术栈介绍" class="headerlink" title="技术栈介绍"></a>技术栈介绍</h2><ol><li>Spring Cloud Alibaba</li><li>RabbitMQ</li><li>Redis</li><li>Linux</li><li>Docker</li><li>Mybatis</li><li>Swagger</li><li>Rancher</li></ol><h3 id="为什么选择SpringCloudAlibaba"><a href="#为什么选择SpringCloudAlibaba" class="headerlink" title="为什么选择SpringCloudAlibaba"></a>为什么选择SpringCloudAlibaba</h3><ul><li><p>Spring Cloud</p><p>  官网: <a href="http://spring.io/projects/spring-cloud">http://spring.io/projects/spring-cloud</a><br>  通信方式: http restful<br>  注册中心: eureka<br>  配置中心: config<br>  断路器: hystrix<br>  网关: zuul/gateway<br>  分布式追踪系统: sleuth+zipkin</p></li><li><p>Spring Alibaba Cloud</p><p>  官网: <a href="http://spring.io/projects/spring-cloud-alibaba">http://spring.io/projects/spring-cloud-alibaba</a><br>  通信方式: http restful<br>  注册中心: Nacos<br>  服务限流降级: Sentinel<br>  分布配置中心: Nacos<br>  服务网关:  SpringCloud Gateway<br>  服务之间调用: Feign,Ribbon<br>  分布式追踪系统: sleuth+zipkin</p></li></ul><p>SpringCloud很多组件基于第三方整合,目前有组件不更新了(zuul,eureka,hystrix)<br>AlibabaCloud提供了一站式服务解决办法,可以与SpringCloud整合</p><ul><li><p>版本说明</p><p>  Spring Boot 2.3.3.RELEASE<br>  Spring Cloud Hoxton.SR8 版本<br>  AlibabaCloud2.2.1.RELEASE版本</p></li></ul><h2 id="模块拆分"><a href="#模块拆分" class="headerlink" title="模块拆分"></a>模块拆分</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>shop-common<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>shop-product-service<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>shop-user-service<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>shop-order-service<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>shop-coupon-service<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>shop-gateway<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>基于Spring Alibaba Cloud的电商平台</category>
      
    </categories>
    
    
    <tags>
      
      <tag>project</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java String</title>
    <link href="/2021/04/12/java/04_String/"/>
    <url>/2021/04/12/java/04_String/</url>
    
    <content type="html"><![CDATA[<h2 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h2><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>在Unicode出现之前,已经有许多不同的标准：美国的ASCII，西欧的ISO 8859-1、俄国的KOI-8、中国的GB118030和BIG-5等。这样就产生了两个问题：</p><ol><li>对于任何给定的代码值，在不同的编码方案下有可能对应不同的字母</li><li>采用大写符集的语言其编码长度有可能不同</li></ol><p>不可避免地，Unicode超过了16位的可容纳大小（65536）。</p><h2 id="Java的解决办法"><a href="#Java的解决办法" class="headerlink" title="Java的解决办法"></a>Java的解决办法</h2><p>从JDK 5.0开始。代码点是指与一个编码集的某个字符对应的代码值。在Unicode标准中，代码点采用十六进制书写，并且加上前缀U+，例如U+0041就是字母A的代码点。Unicode的代码点可以分为17个代码级别，第一个代码级别称为<em>基本的多语言级别</em>，代码点从U+0000到U+FFFF，其中包括了经典的Unicode代码，其余的16个附加级别，从代码点从U+10000到U+10FFFF，其中包括了一些辅助字符。</p><p>UTF-16编码采用不同长度的编码表示所有Unicode代码点。在基本的多语言级别中，每个字符使用16位表示，通常被称为代码单元；而辅助字符采用一对连续的代码单元进行编码。这样够成的编码值一定落入基本的多语言级别中空闲的2048字节内，通常被称为替代区域。</p><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p>Java 字符串是Unicode字符序列。Java没有内置的字符串类型，而是在标准Java类中提供了一个预定义的类String。每个用双括号括起来的字符串都是String类的一个实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">String a = <span class="hljs-string">&quot;hello&quot;</span>;<br>String b = <span class="hljs-string">&quot;world&quot;</span>;<br></code></pre></td></tr></table></figure><div class="note note-light">            <p>Java 允许使用+链接两个字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">String greeting = a + <span class="hljs-string">&quot; &quot;</span> + b;<br></code></pre></td></tr></table></figure>          </div><h2 id="不可变性"><a href="#不可变性" class="headerlink" title="不可变性"></a>不可变性</h2><p>String类具有不可变的性质。<br>String并没有提供修改字符串的方法。如果希望将a字符串中的内容修改为“Help！”，不能直接修改原字符串。</p><div class="note note-light">            <p>Java 允许使用+链接两个字符串</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">char</span> t[] = <span class="hljs-string">&quot;hello&quot;</span>;<br>t[<span class="hljs-number">3</span>]=<span class="hljs-string">&#x27;p&#x27;</span>;<br>t[<span class="hljs-number">4</span>]=<span class="hljs-string">&#x27;!&#x27;</span>;<br></code></pre></td></tr></table></figure>          </div>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java面向对象</title>
    <link href="/2021/04/07/java/02_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/2021/04/07/java/02_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><ol><li><strong>类</strong> 构造对象的模板或蓝图</li><li><strong>对象</strong></li><li><strong>构造</strong></li><li><strong>实例</strong></li><li><strong>封装</strong></li><li><strong>实例域</strong></li><li><strong>方法</strong></li><li><strong>状态</strong></li><li><strong>继承</strong></li><li><strong>重载</strong></li><li><strong>重写</strong></li></ol><h2 id="面向对象思想"><a href="#面向对象思想" class="headerlink" title="面向对象思想"></a>面向对象思想</h2><p>我们将问题空间中的元素及其在解空间中的表示称为对象。对象具有状态、行为和标识。</p><p>程序可以通过添加新类型的对象使自身适用于某个特定问题，当你在阅读描述解决方案的代码时，也是在阅读问题的表述。</p><ol><li>万物皆对象；</li><li>程序是对象的结合，它们通过发送消息来告知彼此所要做的；</li><li>每个对象都有自己的由其他对象所构成的存储；</li><li>每个对象都拥有其类型；</li><li>某一特定类型的所有对象都可以接受同样的消息。</li></ol><h2 id="面向过程与面向对象的优缺点"><a href="#面向过程与面向对象的优缺点" class="headerlink" title="面向过程与面向对象的优缺点"></a>面向过程与面向对象的优缺点</h2><ul><li>  性能</li><li>  维护、复用、扩展</li></ul><h2 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h2><h2 id="Java-继承"><a href="#Java-继承" class="headerlink" title="Java 继承"></a>Java 继承</h2><p>在创建一个类之后，即使另一个新类与其具有相似的功能，你还是得重新创建一个新类。通过添加和修改这个副本来创建新类就好多了。即继承便可以达到这样的效果。</p><ol><li>单根继承（多继承，过于复杂，难于维护）</li><li>类没有多继承， 接口有多继承</li><li>子类继承父类，可以得到父类的全部属性和方法，但不见得可以直接访问</li><li>所有类的父类是 Object </li></ol><h3 id="继承的优点"><a href="#继承的优点" class="headerlink" title="继承的优点"></a>继承的优点</h3><ol><li>代码共享</li><li>提高代码的重用性</li><li>提高代码的可扩展性</li><li>提高产品或者项目的开放性</li></ol><h3 id="继承的缺点"><a href="#继承的缺点" class="headerlink" title="继承的缺点"></a>继承的缺点</h3><ol><li>继承是侵入性的。</li><li>继承代码的灵活性</li><li>增强耦合性</li></ol><h3 id="单继承"><a href="#单继承" class="headerlink" title="单继承"></a>单继承</h3><p>为了降低复杂性和避免冲突，C类同时继承A类，B类，可能会出现冲突。</p><h2 id="Java-多态"><a href="#Java-多态" class="headerlink" title="Java 多态"></a>Java 多态</h2><p>父类引用指向子类的对象。通过分离做什么和怎么做，将接口和实现分离。目的是消除类型之间的耦合关系，将改变的事物与未变的事务分离开来。</p><p>面向对象的多态性，即“一个接口，多个方法”。多态性体现在父类中定义的属性和方法被子类继承后，可以具有不同的属性或表现方式。多态性允许一个接口被多个同类使用，弥补了单继承的不足。</p><h2 id="Java-封装"><a href="#Java-封装" class="headerlink" title="Java 封装"></a>Java 封装</h2><p>封装是将代码及其处理的数据绑定在一起的一种编程机制，该机制保证了程序和数据都不受外部干扰且不被误用。封装的目的在于保护信息，隐藏对象的属性和实现细节，仅对外公开接口，控制在程序中属性的读和修改的访问级别。</p><h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><p>为了让方法名相同而形参不同的方法或者构造器同时存在</p><p>参数类型、个数、顺序至少有一个不相同。 </p><p>不能重载只有返回值不同的方法名。 </p><p>存在于父类和子类、同类中。</p><p>而重载的规则 </p><ol><li>必须具有不同的参数列表。 </li><li>可以有不同的返回类型，只要参数列表不同就可以了。 </li><li>可以有不同的访问修饰符。 </li><li>可以抛出不同的异常。  </li></ol><p>如果传入的数据类型（实参）小于方法中声明的形式参数类型（形参），实际数据类型就会提升。</p><p>如果传入的数据类型（实参）大于方法中声明的形式参数类型（形参），需要通过强制类型转化才能传递。</p><p><strong>重载+变长参数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-keyword">float</span> i, Character... args)</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">(Character... args)</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        f(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>);<br>        f(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>);<br>        System.out.println(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><em>为什么java不通过返回值区分重载方法，而是方法名？</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 参考如下代码</span><br><span class="hljs-comment">// 而f函数可能有很多种实现方式，编译器并不能知道你究竟要调哪一个</span><br>f();<br></code></pre></td></tr></table></figure><h2 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h2><p>方法名、参数、返回值相同。</p><p>子类方法不能缩小父类方法的访问权限。</p><p>子类方法不能抛出比父类方法更多的异常(但子类方法可以不抛出异常)。</p><p>存在于父类和子类之间。 方法被定义为 final 不能被重写。  </p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java变量类型</title>
    <link href="/2021/04/07/java/03_%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B/"/>
    <url>/2021/04/07/java/03_%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="声明方式"><a href="#声明方式" class="headerlink" title="声明方式"></a>声明方式</h2><p>以下摘自菜鸟驿站<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="菜鸟驿站-Java 变量类型">[1]</span></a></sup></p><blockquote><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">type identifier <span class="hljs-comment">[ = value]</span><span class="hljs-comment">[, identifier <span class="hljs-comment">[= value]</span> ...]</span> ;<br></code></pre></td></tr></table></figure><p>以下列出了一些变量的声明实例,注意某些包含了初始化过程</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">int</span> a, b, c;         <span class="hljs-comment">// 声明三个int型整数：a、 b、c</span><br><span class="hljs-keyword">int</span> d = <span class="hljs-number">3</span>, e = <span class="hljs-number">4</span>, f = <span class="hljs-number">5</span>; <span class="hljs-comment">// 声明三个整数并赋予初值</span><br><span class="hljs-keyword">byte</span> z = <span class="hljs-number">22</span>;         <span class="hljs-comment">// 声明并初始化 z</span><br><span class="hljs-keyword">String</span> s = <span class="hljs-string">&quot;runoob&quot;</span>;  <span class="hljs-comment">// 声明并初始化字符串 s</span><br><span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159</span>; <span class="hljs-comment">// 声明了双精度浮点型变量 pi</span><br><span class="hljs-keyword">char</span> x = <span class="hljs-string">&#x27;x&#x27;</span>;        <span class="hljs-comment">// 声明变量 x 的值是字符 &#x27;x&#x27;。</span><br></code></pre></td></tr></table></figure></blockquote><h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><ul><li>类变量（静态变量）</li><li>实例变量</li><li>局部变量</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Variable</span>&#123;</span><br>    <span class="hljs-comment">// 类变量</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> a=<span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 实例变量</span><br>    <span class="hljs-keyword">String</span> b=<span class="hljs-string">&quot;hello world&quot;</span>;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// 局部变量</span><br>        <span class="hljs-keyword">int</span> c =<span class="hljs-number">0</span>;  <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="类变量"><a href="#类变量" class="headerlink" title="类变量"></a>类变量</h3><p>类变量也成为静态变量，在类中以static关键字声明，但必须在方法外。</p><p>无论一个类创建了多少个对象，类只拥有类变量的一份拷贝。具体请参看类的初始化。</p><p>类变量可通过：ClassName.VariableName的方式访问</p><h3 id="实例变量"><a href="#实例变量" class="headerlink" title="实例变量"></a>实例变量</h3><p>实例变量声明在一个类中，但在方法、构造方法和语句块之外；</p><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>局部变量声明在方法、构造方法或者语句块中；</p><p>访问修饰符不能用于局部变量；</p><p>局部变量没有默认值，所以局部变量被声明后，必须经过初始化，才可以使用。</p><section class="footnotes"><h2>参考</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.runoob.com/java/java-variable-types.html">菜鸟驿站-Java 变量类型</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 数组</title>
    <link href="/2021/04/01/java/base/04_%E6%95%B0%E7%BB%84/"/>
    <url>/2021/04/01/java/base/04_%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 数组</span><br><span class="hljs-keyword">int</span>[] a = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">5</span>];<br><span class="hljs-keyword">int</span>[] b = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span> &#125;;<br><br><span class="hljs-comment">// 多维数组</span><br><span class="hljs-keyword">int</span> [][]] arr=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">5</span>][<span class="hljs-number">3</span>];<br><span class="hljs-keyword">int</span>[][] c = &#123;<br>    &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span> &#125;,<br>    &#123; <span class="hljs-number">5</span>, <span class="hljs-number">6</span> &#125;,<br>    &#123; <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span> &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] ns = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span> &#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;ns.length; i++) &#123;<br>            <span class="hljs-keyword">int</span> n = ns[i];<br>            System.out.println(n);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 流程控制</title>
    <link href="/2021/04/01/java/base/03_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    <url>/2021/04/01/java/base/03_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="块作用域"><a href="#块作用域" class="headerlink" title="块作用域"></a>块作用域</h2><p>块是指一堆花括号括起来的若干条的Java语句。<br>块确定了变量的作用域。<br>一个块可以嵌套在另一个块中。<br>不能再嵌套着的两个块中声明同名的变量。</p><h2 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h2><ol><li>if-else</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (xxx) &#123;<br>    <span class="hljs-comment">// dosomething</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(yyy) &#123;<br>    <span class="hljs-comment">// dosomething</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// dosomething</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span>(expression)&#123; <br>    <span class="hljs-keyword">case</span> value : <br>        <span class="hljs-comment">// dosomething </span><br>        <span class="hljs-keyword">break</span>; <br>    <span class="hljs-comment">//可选 </span><br>    <span class="hljs-keyword">case</span> value : <br>        <span class="hljs-comment">// dosomething </span><br>        <span class="hljs-keyword">break</span>; <br>    <span class="hljs-comment">//可选 </span><br>    <span class="hljs-comment">//你可以有任意数量的case语句 </span><br>    <span class="hljs-keyword">default</span> : <br>        <span class="hljs-comment">//可选 </span><br>        <span class="hljs-comment">// dosomething </span><br>&#125;<br></code></pre></td></tr></table></figure><div class="note note-warning">            <p>需要注意的是，case1 中语句如果没有break,那么满足case1条件的情况下会依次往后执行,直到执行到break;</p>          </div><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span> (expression) &#123;<br>    <span class="hljs-comment">// dosomething </span><br>    <span class="hljs-keyword">if</span>(xxx)&#123;<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(yyy)&#123;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do while循环"></a>do while循环</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">do</span> &#123;<br>    <span class="hljs-comment">// dosomething </span><br>    <span class="hljs-keyword">if</span>(xxx)&#123;<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(yyy)&#123;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125; <span class="hljs-keyword">while</span> (expression)<br></code></pre></td></tr></table></figure><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i&lt; <span class="hljs-number">10</span>; i++) &#123;<br>    <span class="hljs-comment">// dosomething </span><br>    <span class="hljs-keyword">if</span>(xxx)&#123;<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(yyy)&#123;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="break"><a href="#break" class="headerlink" title="break"></a>break</h2><p>break语句可以跳出当前循环；<br>break语句通常配合if，在满足条件时提前结束整个循环；<br>break语句总是跳出最近的一层循环；<br>break可以中断switch多重选择依次向下执行；</p><h2 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h2><p>continue语句可以提前结束本次循环；<br>continue语句通常配合if，在满足条件时提前结束本次循环。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java数据类型</title>
    <link href="/2021/04/01/java/base/02_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2021/04/01/java/base/02_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><p>分为两种<strong>基本数据类型</strong>，<strong>引用数据类型</strong></p><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><ol><li>基本数据类型：<ol><li>数值型<ol><li>整数类型<ol><li><a href="#byte">byte</a></li><li><a href="#short">short</a></li><li><a href="#int">int</a></li><li><a href="#long">long</a></li></ol></li><li>浮点类型<ol><li><a href="#float">float</a></li><li><a href="#double">double</a></li></ol></li></ol></li><li>字符型 <a href="#char">char</a></li><li>布尔型 <a href="#boolean">boolean</a></li></ol></li></ol><h3 id="byte"><a href="#byte" class="headerlink" title="byte"></a>byte</h3><ol><li>byte数据类型是8位有符号,以二进制补码表示的整数</li><li>最小值是 -128（-2^7）,最大值是 127（2^7-1）,默认值是 0；</li></ol><h3 id="short"><a href="#short" class="headerlink" title="short"></a>short</h3><ol><li>short 数据类型是 16 位、有符号的以二进制补码表示的整数</li><li>最小值是 -32768（-2^15）,最大值是 32767（2^15 - 1）,默认值是 0；</li></ol><h3 id="int"><a href="#int" class="headerlink" title="int"></a>int</h3><ol><li>int 数据类型是32位、有符号的以二进制补码表示的整数；</li><li>最小值是 -2,147,483,648（-2^31）,最大值是 2,147,483,647（2^31 - 1）,默认值是 0</li></ol><h3 id="long"><a href="#long" class="headerlink" title="long"></a>long</h3><ol><li>long 数据类型是 64 位、有符号的以二进制补码表示的整数；</li><li>最小值是 -9,223,372,036,854,775,808（-2^63）,最大值是 9,223,372,036,854,775,807（2^63 -1）,默认值是 0L；</li><li>“L”理论上不分大小写，但是若写成”l”容易与数字”1”混淆，不容易分辩。所以最好大写。</li></ol><h3 id="float"><a href="#float" class="headerlink" title="float"></a>float</h3><ol><li>float 数据类型是单精度、32位、符合IEEE 754标准的浮点数；</li><li>默认值是 0.0f；</li></ol><div class="note note-info">            <p>float类型的数值有一个后缀F，没有后缀F的浮点数值默认为double类型。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">float</span> a = <span class="hljs-number">3</span>.<span class="hljs-number">14</span>f;<br><span class="hljs-attribute">double</span> b= <span class="hljs-number">3</span>.<span class="hljs-number">14</span>;<br></code></pre></td></tr></table></figure>          </div><h3 id="double"><a href="#double" class="headerlink" title="double"></a>double</h3><ul><li>double 数据类型是双精度、64 位、符合IEEE 754标准的浮点数；</li><li>浮点数的默认类型为double类型；</li><li>默认值是 0.0d；</li></ul><h3 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h3><ul><li>boolean数据类型表示一位的信息；</li><li>只有两个取值：true 和 false；</li><li>这种类型只作为一种标志来记录 true/false 情况；</li><li>默认值是 false；</li></ul><h3 id="char"><a href="#char" class="headerlink" title="char"></a>char</h3><ul><li>char类型是一个单一的 16 位 Unicode 字符；</li><li>最小值是 \u0000（即为0）,最大值是 \uffff（即为65,535）；</li><li>char 数据类型可以储存任何字符；</li></ul><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><ol><li>类</li><li>接口</li><li>数组</li><li>枚举类型</li><li>注解类型</li></ol><h2 id="基础数据类型与引用数据类型的区别"><a href="#基础数据类型与引用数据类型的区别" class="headerlink" title="基础数据类型与引用数据类型的区别"></a>基础数据类型与引用数据类型的区别</h2><p>基本数据类型在被创建时，在栈上给其划分一块内存，将数值直接存储在栈上。<br>引用数据类型在被创建时，首先要在栈上给其引用（句柄）分配一块内存，而对象的具体信息都存储在堆内存上，然后由栈上面的引用指向堆中对象的地址。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java程序基本结构</title>
    <link href="/2021/04/01/java/base/01_Java%E7%A8%8B%E5%BA%8F%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84/"/>
    <url>/2021/04/01/java/base/01_Java%E7%A8%8B%E5%BA%8F%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h2 id="Java文件示例"><a href="#Java文件示例" class="headerlink" title="Java文件示例"></a>Java文件示例</h2><p>以下是一段Java代码的示例，将上一节中所提到的一些关键字及注释使用了进来，具体关键字的用法后面会详细展开，现在请先关注Java程序结构。</p><p>以下代码被命名为<code>HelloWorld.java</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> mypack;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * HelloWorld类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorld</span></span>&#123;<br>    <span class="hljs-keyword">static</span> Greating g = <span class="hljs-keyword">new</span> Greating();<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-comment">// 打招呼</span><br>        System.out.println(g.say()); <br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Greating</span></span>&#123;<br>    <span class="hljs-keyword">public</span> String words = <span class="hljs-string">&quot;hello&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">say</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.words;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>类名必须以英文字母开头，后接字母，数字和下划线的组合</p><ol><li>包名：xxx.yyy.zzz</li><li>类名、接口名：Xxx</li><li>变量名、方法名：xxxYyyZzz</li><li>常量名：XXX_YYY_ZZZ</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础</title>
    <link href="/2021/04/01/java/base/00_Java%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/04/01/java/base/00_Java%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Java 介于编译型和解释型语言之间。编译型语言（如C、C++），代码直接编译为机器码执行，所以就会带来平台不一致的问题。而解释型语言（如Python），由解释器直接加载源码运行，代价是运行效率略低。</p><p>而Java则是将代码编译成字节码，在通过不同平台的JVM（Java虚拟机）加载字节码并执行。</p><p><strong>Java 版本</strong></p><ul><li><p>JavaSE（J2SE）<br>  Java2 Platform Standard Edition，java平台标准版</p></li><li><p>JavaEE(J2EE)<br>  Java 2 Platform,Enterprise Edition，java平台企业版</p></li><li><p>JavaME(J2ME)<br>  Java 2 Platform Micro Edition，java平台微型版</p></li></ul><h2 id="名词接释"><a href="#名词接释" class="headerlink" title="名词接释"></a>名词接释</h2><h3 id="JDK-与-JRE"><a href="#JDK-与-JRE" class="headerlink" title="JDK 与 JRE"></a>JDK 与 JRE</h3><p>JDK：Java Development Kit<br>JRE：Java Runtime Environment</p><blockquote><p> ┌─    ┌──────────────────────────────────┐<br> │     │     Compiler, debugger, etc.     │<br> │     └──────────────────────────────────┘<br>JDK ┌─ ┌──────────────────────────────────┐<br> │  │  │                                  │<br> │     │     Compiler, debugger, etc.     │<br> │ JRE │      JVM + Runtime Library       │<br> │  │  │                                  │<br> └─ └─ └──────────────────────────────────┘<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="廖雪峰的Java简介">[1]</span></a></sup></p></blockquote><h3 id="JSR，JCP，RI与TCK"><a href="#JSR，JCP，RI与TCK" class="headerlink" title="JSR，JCP，RI与TCK"></a>JSR，JCP，RI与TCK</h3><p>JSR:Java Specification Request (Java 规范提案)<br>JCP:Java Community Process<br>RI:Reference Implementation<br>TCK:Technology Compatibility Kit</p><p>Sun公司为了发展和更新这门语言组成了一个开放性国际组织JCP（Java Community Process），任何想要提议加入Java功能或特性都必须以JSR正式文件（Java Specification Request）进行提交然后经过JCP执行委员会投票，通过即成为最终标准文件，然后必须根据这个JSR做出免费且开发原始码的参考实现RI（Reference Implementation），并提供技术兼容性测试工具包TCK（Technology Compatibility Kit），厂商可以根据JSR实现产品。</p><h2 id="Java-特点"><a href="#Java-特点" class="headerlink" title="Java 特点"></a>Java 特点</h2><ul><li>  简单性</li><li>  面向对象</li><li>  健壮性</li><li>  安全性</li><li>  网络技能(Network-Savvy)</li><li>  体系结构中立</li><li>  可移植性</li><li>  解释型</li><li>  高性能</li><li>  多线程</li><li>  动态性</li></ul><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><h3 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h3><p>public、protected、private</p><h3 id="类方法和变量修饰符"><a href="#类方法和变量修饰符" class="headerlink" title="类方法和变量修饰符"></a>类方法和变量修饰符</h3><p>class、interface、abstract、implements、extends、new</p><p>static、final、super、this、native、strictfp、synchronized、transient、volatile</p><h3 id="程序控制语句"><a href="#程序控制语句" class="headerlink" title="程序控制语句"></a>程序控制语句</h3><p>if、else、while、for、switch、case、default、do、break、continue、return、instanceof</p><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>catch、try、finally、throw、throws</p><h3 id="包相关"><a href="#包相关" class="headerlink" title="包相关"></a>包相关</h3><p>import、package</p><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><p>byte、char、boolean、short、int、float、long、double、void、enum</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>assert、null、true、false</p><h3 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h3><p>goto、const</p><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><ol><li>大小写字母，数字，_或者$组成</li><li>数字不可以开头</li><li>不能使用关键字和保留字</li><li>区分大小写，长度无限制</li><li>标识符不能包含空格</li></ol><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 单行注释</span><br></code></pre></td></tr></table></figure><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 多行注释</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h3 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@see</span> classname(fully-qualified-classname/fully-qualified-classname#method-name) 引用其他类</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@link</span> package.class#member label 使用label作为超链接的行内引用其他类</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@docRoot</span> 该标签产生到文档根目录的相对路径</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@inheritDoc</span> 从当前这个类的组直接的基类中继承相关文档到当前的文档注释中</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@author</span> 作者</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@version</span> 指定源文件的版本</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@since</span> 运行你指定程序代码最早使用的版本</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> 参数</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@return</span> 返回值</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@throws</span> 异常</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@deprecated</span> 过时方法</span><br><span class="hljs-comment">  */</span><br></code></pre></td></tr></table></figure><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>+，-，*，/，%，++，–</p><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>=，+=，-=，*=，/=，%=</p><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>==，!=，&gt;，&lt;，&gt;=，&lt;=，instanceof</p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>!，&amp;&amp;，||</p><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p>&lt;&lt;，&gt;&gt;，&gt;&gt;&gt;，&amp;，|，^，~</p><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><p>?:</p><section class="footnotes"><h2>参考</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1255876875896416">廖雪峰的Java简介</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>知识目录</title>
    <link href="/2021/04/01/KnowledgeList/"/>
    <url>/2021/04/01/KnowledgeList/</url>
    
    <content type="html"><![CDATA[<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><ul><li><strong><a href="/2021/04/01/java/base/00_Java%E5%9F%BA%E7%A1%80/">java基础</a></strong></li><li><strong><a href="/2021/04/01/java/base/01_Java%E7%A8%8B%E5%BA%8F%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84/">Java程序基本结构</a></strong></li><li><strong><a href="/2021/04/01/java/base/02_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/">数据类型</a></strong></li><li><strong><a href="/2021/04/01/java/base/03_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/">流程控制</a></strong></li><li><strong><a href="/2021/04/01/java/base/04_%E6%95%B0%E7%BB%84/">数组</a></strong></li></ul><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><ul><li><strong><a href="/2021/04/07/java/02_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/">面向对象</a></strong></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
