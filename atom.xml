<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zhaojj&#39;s blog</title>
  
  
  <link href="https://blog.pyjava.com/atom.xml" rel="self"/>
  
  <link href="https://blog.pyjava.com/"/>
  <updated>2021-04-29T17:07:28.924Z</updated>
  <id>https://blog.pyjava.com/</id>
  
  <author>
    <name>zhaojj</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Contest 1519</title>
    <link href="https://blog.pyjava.com/2021/04/30/algorithm/codeforce/Contest%201519/"/>
    <id>https://blog.pyjava.com/2021/04/30/algorithm/codeforce/Contest%201519/</id>
    <published>2021-04-29T16:32:48.000Z</published>
    <updated>2021-04-29T17:07:28.924Z</updated>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p><strong>比赛地址</strong> <a href="https://codeforces.com/contest/1519">Contest 1519</a></p>          </div><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><div class="table-container"><table><thead><tr><th>题目编号</th><th>题目名称</th><th>是否 AC</th><th>思路概述</th></tr></thead><tbody><tr><td>A.</td><td>Red and Blue Beans</td><td>Y</td><td>简单的算术</td></tr><tr><td>B.</td><td>The Cake Is a Lie</td><td>Y</td><td>简单的算术</td></tr><tr><td>C.</td><td>Berland Regional</td><td>N</td><td>-</td></tr><tr><td>D.</td><td>Maximum Sum of Products</td><td>N</td><td>-</td></tr><tr><td>E.</td><td>Off by One</td><td>N</td><td>-</td></tr><tr><td>F.</td><td>Chests and Keys</td><td>N</td><td>-</td></tr></tbody></table></div><h2 id="Red-and-Blue-Beans"><a href="#Red-and-Blue-Beans" class="headerlink" title="Red and Blue Beans"></a>Red and Blue Beans</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>蓝豆 r 个和红豆 b 个放入任意个包中,每个包中的两种豆子差值不为 d(<script type="math/tex">|r_i-b_i|<=d</script>),问是否可以完成这样的操作,能输出”YES”</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路 1"></a>思路 1</h3><ol><li>当 d=0 时,必须 r==b,才会输出”YES”,否则输出”NO”</li><li>当 d!=0 时,当 min(r,b)* (d+1) &gt;= max(r,b), 输出 YES,否则输出”NO”</li></ol><p>由于很久没有写算法题了,导致只能用<code>BigInteger</code>硬暴力</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">int</span> c = scanner.nextInt();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; c; ++i) &#123;<br>            <span class="hljs-keyword">int</span> r = scanner.nextInt();<br>            <span class="hljs-keyword">int</span> b = scanner.nextInt();<br>            <span class="hljs-keyword">int</span> d = scanner.nextInt();<br><br>            <span class="hljs-keyword">if</span> (d == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (r == b) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;YES&quot;</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    System.out.println(<span class="hljs-string">&quot;NO&quot;</span>);<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (r &lt; b) &#123;<br>                    BigInteger b1 = <span class="hljs-keyword">new</span> BigInteger(Integer.toString(b));<br>                    BigInteger d1 = <span class="hljs-keyword">new</span> BigInteger(Integer.toString(d + <span class="hljs-number">1</span>));<br>                    BigInteger r1 = <span class="hljs-keyword">new</span> BigInteger(Integer.toString(r));<br>                    BigInteger t1 = d1.multiply(r1);<br>                    <span class="hljs-keyword">int</span> i1 = t1.compareTo(b1);<br>                    <span class="hljs-keyword">if</span> ( i1 == <span class="hljs-number">0</span> || i1 == <span class="hljs-number">1</span>) &#123;<br>                        System.out.println(<span class="hljs-string">&quot;YES&quot;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        System.out.println(<span class="hljs-string">&quot;NO&quot;</span>);<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (r &gt; b) &#123;<br>                    BigInteger b1 = <span class="hljs-keyword">new</span> BigInteger(Integer.toString(b));<br>                    BigInteger d1 = <span class="hljs-keyword">new</span> BigInteger(Integer.toString(d + <span class="hljs-number">1</span>));<br>                    BigInteger r1 = <span class="hljs-keyword">new</span> BigInteger(Integer.toString(r));<br>                    BigInteger t1 = d1.multiply(b1);<br>                    <span class="hljs-keyword">long</span> t = b * (d + <span class="hljs-number">1</span>);<br>                    <span class="hljs-keyword">int</span> i1 = t1.compareTo(r1);<br>                    <span class="hljs-keyword">if</span> ( i1 == <span class="hljs-number">0</span> || i1 == <span class="hljs-number">1</span>) &#123;<br>                        System.out.println(<span class="hljs-string">&quot;YES&quot;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        System.out.println(<span class="hljs-string">&quot;NO&quot;</span>);<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    System.out.println(<span class="hljs-string">&quot;YES&quot;</span>);<br>                &#125;<br>            &#125;<br><br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="The-Cake-Is-a-Lie"><a href="#The-Cake-Is-a-Lie" class="headerlink" title="The Cake Is a Lie"></a>The Cake Is a Lie</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h3><p>从(1,1)出发到(n,m),每次只能使得 x 坐标+1/y 坐标+1,分别耗费 y/x 值,问是否满足 k 值能使得从(1,1)到(n,m)</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>从(1,1)到(n,1)每步消费 1,共计 n-1 步</li><li>从(n,1)到(n,m)每步消费 n,共计 m-1 步</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">int</span> c = scanner.nextInt();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; c; ++i) &#123;<br>            <span class="hljs-keyword">int</span> n = scanner.nextInt();<br>            <span class="hljs-keyword">int</span> m = scanner.nextInt();<br>            <span class="hljs-keyword">int</span> k = scanner.nextInt();<br><br>            <span class="hljs-keyword">int</span> h = <span class="hljs-number">1</span>*(n-<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">int</span> z = n*(m-<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">int</span> sum = h+z;<br><br>            <span class="hljs-keyword">if</span>(sum == k)&#123;<br>                System.out.println(<span class="hljs-string">&quot;YES&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;NO&quot;</span>);<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Educational Codeforces Round 108 (Rated for Div. 2)</summary>
    
    
    
    <category term="algorithm" scheme="https://blog.pyjava.com/categories/algorithm/"/>
    
    
    <category term="Codeforces" scheme="https://blog.pyjava.com/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>反射</title>
    <link href="https://blog.pyjava.com/2021/04/29/java/00_base/06_%E5%8F%8D%E5%B0%84/"/>
    <id>https://blog.pyjava.com/2021/04/29/java/00_base/06_%E5%8F%8D%E5%B0%84/</id>
    <published>2021-04-28T17:10:00.000Z</published>
    <updated>2021-04-28T17:08:11.048Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是反射"><a href="#什么是反射" class="headerlink" title="什么是反射"></a>什么是反射</h2><p>java的反射机制是指在运行状态中，对于任意一个类，都能知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个属性和方法；这种动态获取的类的信息，和动态调用对象的方法的功能就是反射机制。</p><p>反射机制允许程序在执行期借助反射获取类的内部信息，并能直接操作<strong>任意</strong>对象的内部属性及方法。</p><p>动态性</p><p>加载完类之后，在对内存的方法区（元空间）中产生了Class类型的对象，这个对象包含完整的类的结构信息。</p><p><strong>反射机制与面向对象的封装性是不是有矛盾？</strong></p><p>不矛盾。反射调用私有也可以，但不建议。封装性建议你调用哪些方法和属性</p><p><strong>通过直接new和或者反射都可以调用公共的结构，开发中用哪个？</strong></p><p>编译时已确定需要用那个类使用new；如果不知道可以采用反射。</p><h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><p>运行时类，就作为Class的一个示例，1.8在元空间。</p><p>包括 class、interface、数组、enum、annotation(Override.class)、primitive type(int.class)、void(void.class)、</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 方式1：调用运行时类的属性</span><br>Class clazz = Person.class;<br><span class="hljs-comment">// 方式2：调用getClass</span><br>Person p = <span class="hljs-keyword">new</span> Person();<br>Class clazz = p.getClass();<br><span class="hljs-comment">// 方式3：调用Class的静态方法</span><br>Class clazz = Class.forName(<span class="hljs-string">&quot;com.xxx.person&quot;</span>);<br><span class="hljs-comment">// 方式4：通过本类的类加载器加载</span><br>ClassLoader classLoader = Test.class.getClassLoader();<br>Class clazz = classLoader.loadClass(<span class="hljs-string">&quot;com.xxx.Person&quot;</span>);<br></code></pre></td></tr></table></figure><p><a href="./5.Back-end/1.Language/java/JVM.md#类加载过程">类加载过程</a></p><h2 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h2><p><a href="./5.Back-end/1.Language/java/JVM.md#类加载器">类加载过程</a></p><h2 id="创建运行时类的对象"><a href="#创建运行时类的对象" class="headerlink" title="创建运行时类的对象"></a>创建运行时类的对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 运行时类必须提供空参构造器</span><br><span class="hljs-comment">// 访问权限满足</span><br>Class&lt;Person&gt; clazz = Person.class;<br>Person obj = clazz.newInstance();<br></code></pre></td></tr></table></figure><h2 id="获取运行时类的结构"><a href="#获取运行时类的结构" class="headerlink" title="获取运行时类的结构"></a>获取运行时类的结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java">Class clazz = Persion.class;<br><span class="hljs-comment">// 属性</span><br><span class="hljs-comment">// 属性(本类和父类public修饰的属性)</span><br>Field[] fields = clazz.getFields();<br><br><span class="hljs-comment">// 当前运行时类的所有属性（不包括父类）</span><br>Field[] declaredFields = clazz.getDeclaredFields();<br><br><span class="hljs-comment">// 获取属性权限修饰符 getModifiers() 0124...;</span><br><span class="hljs-comment">// 获取数据类型 getType()</span><br><span class="hljs-comment">// 获取变量名 getName()</span><br><br><span class="hljs-comment">// 方法</span><br><span class="hljs-comment">// 方法(本类和父类public修饰的方法)</span><br>Method[] methods = clazz.getMethods();<br><br><span class="hljs-comment">//当前运行时类的所有方法（不包括父类）</span><br>Method[] declaredMethods = clazz.getDeclareMethods();<br><span class="hljs-comment">// 获取方法权限修饰符 getModifiers();</span><br><span class="hljs-comment">// 获取方法返回类型 getRetureType();</span><br><span class="hljs-comment">// 获取方法形参类型 getParameterTypes();</span><br><span class="hljs-comment">// 获取方法名 getName();</span><br><span class="hljs-comment">// 获取方法注解 getAnnotations();</span><br><span class="hljs-comment">// 获取方法异常 getExceptionTypes();</span><br><br><span class="hljs-comment">// 构造器 </span><br><span class="hljs-comment">// 运行时类中public的构造器</span><br>Constructor constructors = clazz.getConstrctores();<br><span class="hljs-comment">// 获取 运行时类中的所有构造器</span><br>Constructor DeclaredConstructors = clazz.getDeclaredConstrctores();<br><br><span class="hljs-comment">// 父类</span><br>Class[] classs = clazz.getSuperclass();<br><span class="hljs-comment">// 带泛型的父类</span><br>Type genericSuperclass = clazz.getGenericSuperclass();<br>ParameterizedType paramType = (ParameterizedType) genericSuperclass;<br>Type[] actualTypeArguments = paramType.getActualTypeArguments();<br><br><span class="hljs-comment">// 接口</span><br>Class[] classs = clazz.getInterfaces();<br><span class="hljs-comment">// 包 </span><br>Package = clazz.getPackage();<br><span class="hljs-comment">// 注解</span><br>Annotations[] annotations = clazz.getAnnotations();<br></code></pre></td></tr></table></figure><h2 id="调用运行时类的结构"><a href="#调用运行时类的结构" class="headerlink" title="调用运行时类的结构"></a>调用运行时类的结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">Class clazz =Person.class;<br>Person p = (Person) clazz.newInstance();<br><span class="hljs-comment">// 属性setAccessible(true)</span><br>Field id = clazz.getField(<span class="hljs-string">&quot;id&quot;</span>);<br>id.set(p, <span class="hljs-number">1001</span>);<br>id.get(p);<br><br><span class="hljs-comment">// 方法setAccessible(true)</span><br>Method show = clazz.getDeclaredMethod(<span class="hljs-string">&quot;show&quot;</span>, String.class);<br>show.invoke(<span class="hljs-string">&quot;hello&quot;</span>);<br><br><span class="hljs-comment">// 构造器setAccessible(true)</span><br>Constructor constructor = clazz.getDeclaredConstructor(String.class);<br>constructor.newInstance(<span class="hljs-string">&quot;hello&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="应用：动态代理"><a href="#应用：动态代理" class="headerlink" title="应用：动态代理"></a>应用：动态代理</h2><p>使用一个代理将对象包装起来，然后用代理对象取代原始对象。</p><p>静态代理：代理类和被代理类在编译期间就确定下来了。</p>]]></content>
    
    
    <summary type="html">反射</summary>
    
    
    
    
    <category term="Java" scheme="https://blog.pyjava.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java JDK版本变化</title>
    <link href="https://blog.pyjava.com/2021/04/29/java/00_base/05_JDK%E7%89%88%E6%9C%AC%E5%8F%98%E5%8C%96/"/>
    <id>https://blog.pyjava.com/2021/04/29/java/00_base/05_JDK%E7%89%88%E6%9C%AC%E5%8F%98%E5%8C%96/</id>
    <published>2021-04-28T16:55:02.000Z</published>
    <updated>2021-04-28T17:05:28.960Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JDK-Version-1-0"><a href="#JDK-Version-1-0" class="headerlink" title="JDK Version 1.0"></a>JDK Version 1.0</h2><p>1996-01-23 Oak 橡树</p><p>使用外挂 JIT，性能差</p><h2 id="JDK-Version-1-1"><a href="#JDK-Version-1-1" class="headerlink" title="JDK Version 1.1"></a>JDK Version 1.1</h2><p>1997-02-19</p><ul><li>JDBC</li><li>支持内部类</li><li>RMI 远程方法调用</li><li>反射</li><li>JavaBean</li></ul><h2 id="JDK-Version-1-2"><a href="#JDK-Version-1-2" class="headerlink" title="JDK Version 1.2"></a>JDK Version 1.2</h2><p>1998-12-08</p><ul><li>集合框架</li><li>JIT 编译器</li><li>对打包的 Java 文件进行数字签名</li><li>JFC，包括 Swing 1.9，拖放和 Java2D 类库</li><li>Java 插件</li><li>JDBC 引入可滚动结果集，BLOB，CLOB，批量更新和用户自定义类型</li><li>Applet 添加声音支持</li><li>同时发布了 JSP/Servlet、EJB 规范，将 java 分成 J2EE，J2SE 和 J2ME</li></ul><h2 id="JDK-Version-1-3"><a href="#JDK-Version-1-3" class="headerlink" title="JDK Version 1.3"></a>JDK Version 1.3</h2><p>2000-05-08 红隼</p><ul><li>Java Sound API</li><li>jar 文件索引</li><li>对 Java 的各个方面都做了大量优化和增强</li><li>Hotspot 成为 Java 默认虚拟机</li></ul><h2 id="JDK-Version-1-4"><a href="#JDK-Version-1-4" class="headerlink" title="JDK Version 1.4"></a>JDK Version 1.4</h2><p>2002-02-13 隼</p><ul><li>断言</li><li>XML 处理</li><li>Java 打印服务</li><li>Logging API</li><li>Java Web Start</li><li>JDBC 3.0 API</li><li>链式异常处理</li><li>支持 IPV6</li><li>支持正则</li><li>引入 Image I/O API</li><li>Classic 虚拟机退出</li></ul><h2 id="JDK-5"><a href="#JDK-5" class="headerlink" title="JDK 5"></a>JDK 5</h2><p>2004-09-30 老虎 改名为 J2SE5.0</p><ul><li><p>类型安全的枚举</p><ol><li>枚举类在经过编译之后确实生成了一个扩展<code>java.lang.Enum</code>的类</li><li>枚举类是 final 的</li><li>每一个枚举值都是该类中一个成员</li><li>枚举类中被默认增加了许多静态方法，如<code>values()</code>，<code>valueOf()</code></li></ol></li><li><p>泛型</p><p><code>ArrayList list=new ArrayList()</code></p><p><code>ArrayList&lt;Integer&gt;list=new ArrayList&lt;Integer&gt;();</code></p><p>避免了程序员自行保证集合容器中存取数据的强制转换</p></li><li><p>自动装箱与拆箱</p><p>int&gt;&gt;Integer<br>Integer&gt;&gt;int</p></li><li><p>元数据（注解）</p></li><li><p>增强循环 foreach</p></li><li><p>可变参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">(Object... obj)</span></span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>静态引入</p><p><code>import start **.**</code></p></li><li><p>Instrumentation</p></li></ul><h2 id="JDK-6"><a href="#JDK-6" class="headerlink" title="JDK 6"></a>JDK 6</h2><p>2006-12-11 野马</p><ul><li>支持脚本语言</li><li>JDBC 4.0 API</li><li>Java Compiler API</li><li>可插拔注解</li><li>增加对 Native PKI、Java GSS、Kerberos 和 LDAP 支持</li><li>集成 WebServices</li></ul><h2 id="JDK-7"><a href="#JDK-7" class="headerlink" title="JDK 7"></a>JDK 7</h2><p>2011-07-28 海豚</p><ul><li>钻石型语法（在创建泛型对象时应用类型推断）</li><li>支持 try-with-resources（在一个语句块中捕获多种异常）</li><li>switch 语句块中允许以字符串作为分支条件</li><li>引入 Java NIO.2 开发包</li><li>在创建泛型对象时应用类型推断</li><li>支持动态语言</li><li>数值类型可以用二进制字符串标识，并且可以在字符串表示中添加下划线</li><li>null 值的自动处理</li><li>采用 G1 垃圾回收器，支持 64 为系统的压缩指针</li></ul><h2 id="JDK8"><a href="#JDK8" class="headerlink" title="JDK8"></a>JDK8</h2><p>2014-03-18</p><ul><li><p>lambda</p><p>作为接口的实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 无参数，无返回值</span><br>Runnable r = () -&gt; System.out.println(<span class="hljs-string">&quot;hello&quot;</span>);<br><span class="hljs-comment">// 需要一个参数，无返回值</span><br>Consumer&lt;String&gt; con = (String str) -&gt; &#123;<br>    System.out.println(str);<br>&#125;<br><span class="hljs-comment">// 数据类型可省略,类型推断</span><br>Consumer&lt;String&gt; con = (str) -&gt; &#123;<br>    System.out.println(str);<br>&#125;<br><span class="hljs-comment">// 如果只需要一个参数，参数的小括号可以省略</span><br>Consumer&lt;String&gt; con = str -&gt; &#123;<br>    System.out.println(str);<br>&#125;<br><span class="hljs-comment">// lambda需要两个或者两个以上的参数，多条执行语句，并且可以有返回值</span><br>Comparator&lt;Integer&gt; com = (o1, o2)-&gt; &#123;<br>    <span class="hljs-keyword">return</span> Integer.compare(o1, o2);<br>&#125;<br><span class="hljs-comment">//如果lambda只有一条语句，return和大括号可以省略</span><br>Comparator&lt;Integer&gt; com = (o1, o2)-&gt; Integer.compare(o1, o2);<br></code></pre></td></tr></table></figure></li><li><p>函数式接口</p><p>如果一个接口中，只声明了一个抽象方法，则此接口就称为函数式接口</p><p>可以加<code>@FunctionalInterface</code>，但不加也可以</p><p>OOF 编程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">Consumer&lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title">accept</span><span class="hljs-params">(T t)</span></span>;<br><span class="hljs-function">Supplier&lt;T&gt; T <span class="hljs-title">get</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function">Function&lt;T,R&gt; R <span class="hljs-title">apply</span><span class="hljs-params">(T r)</span></span>;<br><span class="hljs-function">Predicate&lt;T&gt; <span class="hljs-keyword">boolean</span> <span class="hljs-title">test</span><span class="hljs-params">(T t)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>Stream API</p><p>操作数据源所生成的元素序列，不会存储元素，不会改变源对象，操作是延迟执行的。</p><ol><li>创建 stream</li><li>中间操作</li><li>终止操作 一旦执行，就执行中间操作，并且产生结果</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建Stream</span><br><span class="hljs-comment">// 创建方式1：通过集合</span><br>List&lt;Person&gt; persons = PersonService.getPersons();<br><span class="hljs-comment">// 返回顺序流</span><br>Stream&lt;Person&gt; stream = employees.stream();<br><span class="hljs-comment">// 返回一个并行流</span><br>Stream&lt;Person&gt; parallelStream = employees.parallelStream();<br><br><span class="hljs-comment">// 创建方式2：通过数组</span><br><span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;<br>IntStream stream = Arrays.stream(arr);<br><br><span class="hljs-comment">// 创建方式3：通过Stream的of()</span><br>Stream&lt;Integer&gt; stream = Stream.of(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>);<br><br><span class="hljs-comment">// 创建方式4：创建无限流</span><br>Stream.iterate(<span class="hljs-number">0</span>, t -&gt; t+<span class="hljs-number">2</span>).limit(<span class="hljs-number">10</span>).forEach(System.out::println);<br>Stream.generate(Math::random).limit(<span class="hljs-number">10</span>).forEach(System.out::println);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 中间操作</span><br><span class="hljs-comment">// 筛选与切片</span><br>List&lt;Person&gt; persons = PersonService.getPersons();<br>list.stream().filter(e -&gt; e.getSalary() &gt; <span class="hljs-number">7000</span>).forEach(System.out::println);<br><span class="hljs-comment">// 截断流，数目不超过给定数量</span><br>limit(n);<br><span class="hljs-comment">// 跳过元素，返回一个扔掉前n个元素的流</span><br>skip(n);<br><span class="hljs-comment">// 筛选，通过流所生成元素的hashCode 和equals 去重</span><br>distinct();<br><span class="hljs-comment">// 映射</span><br><span class="hljs-comment">// 接受一个函数作为参数，将元素转换成其他形式或者提取信息</span><br>map(Function f);<br><span class="hljs-comment">// 接受一个函数作为参数，将流中的每个值都换成另一个流，然后将所有流连成一个流</span><br>flatMap(Function f);<br><span class="hljs-comment">// 排序</span><br>sorted();<br>sorted(Comparator com);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 终止操作</span><br><span class="hljs-comment">// 匹配与查找</span><br><span class="hljs-comment">// 检查是否匹配所有元素</span><br>allMatch(Predicate p);<br><span class="hljs-comment">// 检查是否至少匹配一个元素</span><br>anyMatch(Predicate p);<br><span class="hljs-comment">// 检查是否没有匹配的元素</span><br>noneMatch(Predicate p);<br><span class="hljs-comment">// 返回第一个元素</span><br>findFirst();<br><span class="hljs-comment">// 返回当前流中任意元素</span><br>findAny();<br><span class="hljs-comment">// 返回流中元素的总个数</span><br>count();<br><span class="hljs-comment">// 返回流中最大值</span><br>max(Comparator c);<br><span class="hljs-comment">// 返回流中最小值</span><br>min(Comparator c);<br><span class="hljs-comment">// 迭代</span><br>forEach(Comsumer c);<br><br><span class="hljs-comment">// 归约</span><br><span class="hljs-comment">// 可以将流中元素反复结合起来，得到一个值</span><br>reduce(T identity, BinaryOperator);<br><span class="hljs-comment">// 可以将流中元素反复结合起来，得到一个值，返回Optional&lt;T&gt;</span><br>reduce(BinaryOperator);<br><br><span class="hljs-comment">// 收集</span><br><span class="hljs-comment">// 将流转换为其他形式，接受一个Colletor接口的实现，汇总</span><br>collec(Collector c);<br></code></pre></td></tr></table></figure></li><li><p>方法引用和构造器引用</p><p>当要传递给 Lambda 体的操作，已经有实现的方法了，可以使用方法引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 类(或者对象)::方法名</span><br>PrintStream ps = System.out;<br>Consumer&lt;String&gt; con2 = ps::println;<br>con2.accept(<span class="hljs-string">&quot;hello&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>默认方法 在接口里有一个实现的方法</p></li><li><p>新工具 nashorn 引擎、类依赖分析器 jdeps</p></li><li><p>Date Time API</p></li><li><p>Optional 类，解决空指针异常</p><p>Optional\<T\>是一个容器类，他可以保存类型 T 的值，代表这个值存在，或者保存 null，标识这个值不存在。</p></li></ul><h2 id="JDK-9"><a href="#JDK-9" class="headerlink" title="JDK 9"></a>JDK 9</h2><p>2017-09-22</p><ul><li><p>模块化系统 jigsaw（module requires）</p></li><li><p>REPL：交互式编程环境</p></li><li><p>多版本兼容 JAR</p></li><li><p>私有接口方法，连方法的访问权限修饰符都可以声明为 private</p></li><li><p>钻石操作符的使用升级 （泛型+匿名内部类）</p></li><li><p>语法改进 try，自动关闭连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 8</span><br><br><span class="hljs-keyword">try</span>(InputStreamReader reader = <span class="hljs-keyword">new</span> InputStreamReader(System.in))&#123;<br>....<br>&#125;<br><span class="hljs-comment">// 9</span><br>InputStreamReader reader = <span class="hljs-keyword">new</span> InputStreamReader(System.in);<br><span class="hljs-keyword">try</span>(reader)&#123;<br>....<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>String 存储结构变更(AbstractStringBuilder 都修改了)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Stable</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">byte</span>[] value;<br></code></pre></td></tr></table></figure></li><li><p>便利的集合特性 of()</p><p>创建只读集合</p></li><li><p>增强的 InputStreamAPI</p><p>transferTo，将数据直接传输给 OutputStream</p></li><li><p>增强的 StreamAPI</p><p>takeWhile 返回从开头开始的尽可能多的数据</p><p>dropWhile 与 takeWhile 相反，返回剩余元素</p><p>ofNullable，形参变量是可以为 null 的单个元素</p><p>iterate 的新重载，</p></li><li><p>Optional 中 stream 的方法</p></li><li><p>全新的 HTTP 客户端 API</p></li><li><p>Deprecated 的相关 API</p></li><li><p>javadoc 的 h5 支持</p></li><li><p>js 引擎升级 Nashorn</p></li><li><p>java 的动态编译器</p></li></ul><h2 id="JDK-10"><a href="#JDK-10" class="headerlink" title="JDK 10"></a>JDK 10</h2><p>2018-03-21</p><ul><li>var 局部变量类型推断</li><li>将原来 mercurial 管理的众多 JDK 仓库代码合并</li><li>统一的垃圾回收接口</li><li>G1 垃圾回收器的并行完整垃圾回收</li><li>集合新增 copyOf()，用于创建一个只读的集合</li></ul><h2 id="JDK-11"><a href="#JDK-11" class="headerlink" title="JDK 11"></a>JDK 11</h2><ul><li><p>基于嵌套的访问控制</p></li><li><p>动态的类文件常量</p></li><li><p>Epsilon 垃圾回收器</p></li><li><p>ZGC 垃圾回收器 可伸缩的低延时垃圾回收器</p><p>并发，基于 region，压缩型的垃圾收集器，只有 root 扫描会 stw，因此 GC 停顿时间不会随着堆的增长和存货对象的增长而增长。</p><ul><li>优势<ul><li>GC 暂停时间不超过 10ms</li><li>可处理几百兆的小堆，也能处理几 T 的大堆</li><li>和 G1 相比，应用吞吐能力不会下降超过 15%</li><li>为未来的 GC 功能和利用 colord 指针以及 Load barriers 优化奠定基础</li><li>初始只支持 64 位系统</li></ul></li></ul></li><li><p>字符串新方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 判断字符串是否为空白</span><br><span class="hljs-string">&quot; &quot;</span>.isBlank();<br><span class="hljs-comment">// 去除首尾空白</span><br><span class="hljs-string">&quot; Javastack &quot;</span>.strip();<br><span class="hljs-comment">// 去除尾部空格</span><br><span class="hljs-string">&quot; Javastack &quot;</span>.stripTrailing();<br><span class="hljs-comment">// 去除首部空格</span><br><span class="hljs-string">&quot; Javastack &quot;</span>.stripLeading();<br><span class="hljs-comment">// 复制字符串</span><br><span class="hljs-string">&quot;Java&quot;</span>.repeat(<span class="hljs-number">3</span>);<br><span class="hljs-comment">// 行数统计</span><br><span class="hljs-string">&quot;A\nB\nC&quot;</span>.lines().count();<br></code></pre></td></tr></table></figure></li><li><p>Optional 加强</p></li><li><p>局部变量类型推断升级</p><p>在使用 lambda 表达式时给参数加上注解</p></li><li><p>简化的编译运行程序</p><p>java test.java 即可</p></li><li><p>废弃 Nashorn 引擎</p></li></ul><h2 id="JDK-12"><a href="#JDK-12" class="headerlink" title="JDK 12"></a>JDK 12</h2><ul><li><p>JEP189：低暂停时间的 GC（Shenandoah）</p><p>  垃圾回收器的暂停时间与堆的大小无关，这意味着不论堆多大，都将拥有一致的系统暂停时间</p><p>  <strong>工作原理</strong></p><p>  类似于 G1，区别在于实现了并发的疏散环节，引入了<strong>Brooks Forwarding Pointer</strong>计数使得 GC 在移动对象时，对象引用仍然可以访问。</p><ol><li>Init Mark 启动并发标记阶段</li><li>并发标记遍历堆阶段</li><li>并发标记完成阶段</li><li>并发整理回收无活动区域阶段</li><li>并发 Evacuation 整理内存区域阶段</li><li>InitUpdateRefs 更新引用初始化阶段</li><li>并发更新引用阶段</li><li>Final Update Refs 完成引用更新阶段</li><li>并发回收无引用区域阶段</li></ol></li><li><p>JEP230：微基准测试套件</p><ol><li>JMH java microbenchmark harness，用于代码微基准测试的工具套件。</li><li>场景：准确的知道某个方法需要执行多长时间，以及执行事件和输入之间的相关性；对比不同实现的吞吐量；查看多少百分比的请求在多长事件内完成。</li></ol></li><li><p>JEP325：switch 表达式（预览版）</p><p>  传统 switch 的弊端：</p><ol><li>匹配自上而下，忘记 break，会执行其他 case 中的语句</li><li>所有 case 共有一个块范围</li><li>不能在一个 case 中写多个执行结果一致的条件</li><li><p>整个 switch 不能作为返回值</p><p>预览版解决了以上所有问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">numberOfLetters = <span class="hljs-keyword">switch</span>(fruit)&#123;<br>    <span class="hljs-keyword">case</span> PEAR -&gt; <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">case</span> APPLE, GRAPE, MANGO -&gt; <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">case</span> ORANGE, PAPAYA -&gt; <span class="hljs-number">6</span>;<br>    <span class="hljs-keyword">default</span> -&gt; <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(<span class="hljs-string">&quot;No Such Fruit&quot;</span> + fruit);<br>&#125;<br>System.out.println(numberOfLetters)<br></code></pre></td></tr></table></figure><p>需要注意的是 Java11 以前的版本中，Switch 支持：byte、char、short、int、Byte、Character、Short、Integer、enum、String，而不支持 float、double 和 long</p></li></ol></li><li><p>JEP334：JVM 常量 API</p><p>  更容易地对关键类文件和运行时构建的名义描述进行建模，特别是对那些从常量池加载的常量。</p><p>  具体来说，java.base 模块新增了 java.lang.constant 包，定义了一系列基于值的符号引用，它们能够描述每种可加载常量。</p></li><li><p>JEP340：只保留一个 AArch64 实现</p><p>11 之前存在两个 64 位 ARM 端口</p></li><li><p>JEP341：默认生成类数据共享 CDS 归档文件</p><p>CDS：在多个 JVM 之间共享一些类</p><p>jdk5 引入了 cds，jdk9 扩展，jdk10 扩展至 appcds</p></li><li><p>JEP344：可终止的 G1 Mixed GC</p><p>当 G1 垃圾回收器的回收超过暂停事件的目标，则终止垃圾回收过程，为了满足用户设置的预期的 JVM 停顿时间。</p></li><li><p>JEP346：G1 及时返回未使用的已分配内存</p><p>G1 垃圾收集器在应用程序不活动期间定期生成或持续循环检查整体 Java 堆使用情况，以便 G1 垃圾收集器能够更及时的将 Java 堆中不使用内存部分返回操作系统。</p></li><li><p>支持 Unicode 11</p></li><li><p>支持压缩数字格式化</p></li></ul><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">NumberFormat</span><span class="hljs-operator">.</span><span class="hljs-variable">getCompactNumberInstance</span><span class="hljs-punctuation">(</span><span class="hljs-variable">Local</span><span class="hljs-operator">.</span><span class="hljs-variable">US</span><span class="hljs-operator">,</span> <span class="hljs-built_in">NumberFormat</span><span class="hljs-operator">.</span><span class="hljs-built_in">Style</span><span class="hljs-operator">.</span><span class="hljs-variable">SHORT</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><ul><li><p>string 新增方法</p><p>jdk6 字符串常量池，方法区</p><p>jdk7 堆空间</p><p>jdk9 底层 char[] -&gt; byte[] 字符编码集</p><ol><li><p>transform 方法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">String str = <span class="hljs-string">&quot;hello&quot;</span>.transform(info -&gt; info+<span class="hljs-string">&quot;world&quot;</span>);<br><span class="hljs-comment">// str : helloworld</span><br><span class="hljs-comment">// 可以链式调用</span><br><span class="hljs-string">&quot;hello&quot;</span>.transform(info -&gt; info+<span class="hljs-string">&quot;world&quot;</span>).transform(String :: toUpperCase);<br></code></pre></td></tr></table></figure></li><li><p>strip 约等于 trim 支持 unicode11</p></li><li><p>indent 在前面加空格 实现原理即是在调用 lines 方法创建一个 stream，然后往前</p></li></ol></li><li><p>Files 新增 mismatch 方法</p><p>比较两个文件的内容以确定它们之间是否存在不匹配</p></li><li><p>其他</p></li><li><p>移出项</p><p>FileInputStream 和 FileOutputStream、java.util.ZipFile/Inflator/Deflator 的 finalize 方法</p></li><li><p>废弃项</p></li></ul><h2 id="JDK-13"><a href="#JDK-13" class="headerlink" title="JDK 13"></a>JDK 13</h2><ul><li><p>JEP350 动态 cds 档案</p><p>在 java application 执行后进行动态 archive</p></li><li><p>JEP351 ZGC 取消使用未使用的内存</p><p>11 中引入了，这是一款可伸缩的低延迟垃圾收集器，但是不能将内存归还给操作系统。</p><p>ZGC 的堆由 Region 组成，每个 Region 成为 ZPage。每个 ZPage 与数量可变的已提交内存相关联。当 ZGC 压缩堆的时候，ZPage 就会释放，然后进入 page cache，即 ZPageCache。这些在 page cache 中的 ZPage 集合就标识没有使用的部分堆，这部分内存应该被归还给操作系统</p></li><li><p>JEP353 重新实现旧版套接字 API</p><p>原有问题：</p><ol><li>混合了 Java 和 C 的代码，维护困难</li><li>使用了线程栈作为 IO 的缓存，导致某些情况下需要增加线程栈的大小</li><li>支持异步关闭，带来了移植问题，和并发问题</li></ol><p>使用全新的 NioSocketImpl 拉替换 JDK1.0 中的 PlainSocketImpl</p><ol><li>便于维护和测试，与 NIO 相同的 JDK 内部结构</li><li>与现有的缓冲区缓存机制集成在一起</li><li>使用 concurrent 锁，而不是 synchronized 同步方法</li><li>可切换回旧版本</li></ol></li><li><p>JEP354 switch（预览）</p><p>基于 jdk12 加入了 yield，返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> i = <span class="hljs-keyword">switch</span>(x)&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span> -&gt; <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span> -&gt; <span class="hljs-number">6</span>;<br>    <span class="hljs-keyword">default</span> -&gt; &#123;<br>        yield <span class="hljs-number">7</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>yield：结束 switch 结构</p><p>return：结束方法</p></li><li><p>JEP355 文字块（预览）</p><p>类似于 ES6 的模板字符串</p><p>简化跨越多行的字符串，避免对换行符等特殊字符进行转义，增加 java 程序中字符串的可读性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">String html = <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">    &lt;html&gt;</span><br><span class="hljs-string">        &lt;body&gt;</span><br><span class="hljs-string">            &lt;p&gt;hello&lt;/p&gt;</span><br><span class="hljs-string">        &lt;/body&gt;</span><br><span class="hljs-string">    &lt;/html&gt;</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><ol><li><p>语法</p></li><li><p>编译器在编译时会删除掉多余的空格</p></li><li><p>转义字符，允许使用\n \f \r</p></li><li><p>文本块连接</p><p> 直接拼接 占位符 replace 方法 format 方法</p></li></ol></li></ul>]]></content>
    
    
    <summary type="html">Java JDK版本变化</summary>
    
    
    
    
    <category term="Java" scheme="https://blog.pyjava.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>noteFx-打开并展示文件</title>
    <link href="https://blog.pyjava.com/2021/04/28/project/noteFx/05_%E6%89%93%E5%BC%80%E5%B9%B6%E5%B1%95%E7%A4%BA%E6%96%87%E4%BB%B6/"/>
    <id>https://blog.pyjava.com/2021/04/28/project/noteFx/05_%E6%89%93%E5%BC%80%E5%B9%B6%E5%B1%95%E7%A4%BA%E6%96%87%E4%BB%B6/</id>
    <published>2021-04-27T16:40:22.000Z</published>
    <updated>2021-04-27T17:15:36.550Z</updated>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p><strong>项目地址</strong> <a href="https://github.com/sandorZHAO/noteFx">https://github.com/sandorZHAO/noteFx</a></p>          </div><h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><ol><li>提供文件打开方式</li><li>读取并展示文件内容</li><li>打开已经打开文件时自动选择对应tab</li><li>tab过多折叠</li></ol><h2 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h2><ol><li><code>Menu</code></li><li><code>Tab</code></li><li><code>FileChooser</code></li></ol><h2 id="顶部菜单"><a href="#顶部菜单" class="headerlink" title="顶部菜单"></a>顶部菜单</h2><p>首先是打开文件功能</p><ol><li><code>main.fxml</code></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><br>&lt;?import javafx.scene.layout.BorderPane?&gt;<br>&lt;?import javafx.scene.layout.StackPane?&gt;<br>&lt;?import javafx.scene.control.MenuBar?&gt;<br>&lt;?import javafx.scene.control.SeparatorMenuItem?&gt;<br>&lt;?import javafx.scene.control.Menu?&gt;<br>&lt;?import javafx.scene.control.MenuItem?&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">StackPane</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://javafx.com/javafx&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">xmlns:fx</span>=<span class="hljs-string">&quot;http://javafx.com/fxml&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">fx:id</span>=<span class="hljs-string">&quot;root&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">fx:controller</span>=<span class="hljs-string">&quot;com.pyjava.notefx.controller.MainController&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">BorderPane</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://javafx.com/javafx&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">xmlns:fx</span>=<span class="hljs-string">&quot;http://javafx.com/fxml&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">fx:id</span>=<span class="hljs-string">&quot;rootPane&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">prefHeight</span>=<span class="hljs-string">&quot;700.0&quot;</span> <span class="hljs-attr">prefWidth</span>=<span class="hljs-string">&quot;900.0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">top</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">MenuBar</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">Menu</span> <span class="hljs-attr">text</span>=<span class="hljs-string">&quot;File&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">Menu</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span>Open<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">MenuItem</span> <span class="hljs-attr">onAction</span>=<span class="hljs-string">&quot;#openFile&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span>Open File<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">MenuItem</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">MenuItem</span> <span class="hljs-attr">onAction</span>=<span class="hljs-string">&quot;#openHexo&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span>Open Hexo<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">MenuItem</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">Menu</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">SeparatorMenuItem</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">MenuItem</span> <span class="hljs-attr">onAction</span>=<span class="hljs-string">&quot;#exit&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span>exit<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">MenuItem</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">Menu</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">MenuBar</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">top</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">BorderPane</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">StackPane</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li><code>MainController</code></li></ol><p><code>main.fxml</code>中通过<code>fx:controller</code>指定了对应java类,其中的<code>onAction</code>指定了对应方法(缺少的部分代码请查看git)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainController</span> </span>&#123;<br><br><br>    <span class="hljs-meta">@FXML</span><br>    <span class="hljs-keyword">public</span> StackPane root;<br><br>    <span class="hljs-meta">@FXML</span><br>    <span class="hljs-keyword">public</span> BorderPane rootPane;<br><br>    <span class="hljs-meta">@FXML</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">openFile</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;openFile&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@FXML</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">openHexo</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;openHexo&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@FXML</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">exit</span><span class="hljs-params">()</span></span>&#123;<br>        Main.get().close();<br>        Platform.exit();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="读取文件内容"><a href="#读取文件内容" class="headerlink" title="读取文件内容"></a>读取文件内容</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FXML</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">openFile</span><span class="hljs-params">()</span></span>&#123;<br>    FileChooser fileChooser = <span class="hljs-keyword">new</span> FileChooser();<br>    fileChooser.setTitle(<span class="hljs-string">&quot;打开文件&quot;</span>);<br>    File file = fileChooser.showOpenDialog(Main.get());<br>    String fileName = String.valueOf(file);<br>    <span class="hljs-keyword">long</span> fileLengthLong = file.length();<br>    <span class="hljs-keyword">byte</span>[] fileContent = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[(<span class="hljs-keyword">int</span>) fileLengthLong];<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        FileInputStream inputStream = <span class="hljs-keyword">new</span> FileInputStream(file);<br>        <span class="hljs-keyword">int</span> read = inputStream.read(fileContent);<br>        inputStream.close();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        System.out.println(e.getMessage());<br>    &#125;<br>    String string = <span class="hljs-keyword">new</span> String(fileContent);<br>    System.out.println(string);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="tab展示文件数据"><a href="#tab展示文件数据" class="headerlink" title="tab展示文件数据"></a>tab展示文件数据</h2><p>首先需要了解的是,上面的方法在读取文件时占用了JavaFX的UI线程,我们需要另起线程来完成文件读取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FXML</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">openFile</span><span class="hljs-params">()</span> </span>&#123;<br>    FileChooser fileChooser = <span class="hljs-keyword">new</span> FileChooser();<br>    fileChooser.setTitle(<span class="hljs-string">&quot;打开文件&quot;</span>);<br>    File file = fileChooser.showOpenDialog(Main.get());<br>    String fileName = file.getName();<br>    CompletableFuture.supplyAsync(() -&gt; &#123;<br>        <span class="hljs-comment">// 读取文件时,鼠标指针为WAIT状态</span><br>        rootPane.setCursor(Cursor.WAIT);<br>        StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>        <span class="hljs-keyword">try</span> (BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> FileReader(file))) &#123;<br>            br.lines().map(s -&gt; s + <span class="hljs-string">&quot;\n&quot;</span>).forEach(sb::append);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br>        <span class="hljs-comment">// 读取完成将鼠标恢复</span><br>        rootPane.setCursor(Cursor.DEFAULT);<br>        <span class="hljs-comment">// 返回读取文件数据</span><br>        <span class="hljs-keyword">return</span> sb.toString();<br>    &#125;).thenAccept(s -&gt; Platform.runLater(() -&gt; &#123;<br><br>        <span class="hljs-comment">// 添加tab</span><br>        Tab tab = <span class="hljs-keyword">new</span> Tab(fileName);<br>        <span class="hljs-comment">// 将文件内容加入tab中</span><br>        TextArea textArea = <span class="hljs-keyword">new</span> TextArea();<br>        textArea.setText(s);<br>        tab.setContent(textArea);<br><br>        rightTab.getTabs().add(tab);<br><br>        <span class="hljs-comment">// 将刚打开的文件的tab置为选中状态</span><br>        SingleSelectionModel&lt;Tab&gt; selectionModel = rightTab.getSelectionModel();<br>        selectionModel.select(tab);<br>    &#125;));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="自动选择tab"><a href="#自动选择tab" class="headerlink" title="自动选择tab"></a>自动选择tab</h2><p>有这样的场景</p><ol><li><p>用户打开了a文件后,打开了b文件</p><p> 针对于这种情况,我们需要将刚刚选中的b文件变为选中状态</p></li><li><p>用户打开了a文件后打开了b文件,这时候他有选择了打开a文件;</p><p> 针对于这种情况,我们需要将第二次打开的a文件变为选中状态</p></li></ol><p>我们需要维护一个携带了File信息的Tab组件,便于获取文件信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileTab</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Tab</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> File file;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">FileTab</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">FileTab</span><span class="hljs-params">(File file)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>();<br>        <span class="hljs-keyword">this</span>.file = file;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">FileTab</span><span class="hljs-params">(String s, File file)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(s);<br>        <span class="hljs-keyword">this</span>.file = file;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">FileTab</span><span class="hljs-params">(String s, Node node, File file)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(s, node);<br>        <span class="hljs-keyword">this</span>.file = file;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> File <span class="hljs-title">getFile</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> file;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFile</span><span class="hljs-params">(File file)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.file = file;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对以上业务场景进行处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FXML</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">openFile</span><span class="hljs-params">()</span> </span>&#123;<br>    FileChooser fileChooser = <span class="hljs-keyword">new</span> FileChooser();<br>    fileChooser.setTitle(<span class="hljs-string">&quot;打开文件&quot;</span>);<br>    File file = fileChooser.showOpenDialog(Main.get());<br><br>    <span class="hljs-comment">// 查看当前文件是否已经被打开</span><br>    <span class="hljs-keyword">int</span> index = -<span class="hljs-number">1</span>;<br>    ObservableList&lt;Tab&gt; tabs = rightTab.getTabs();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; tabs.size(); i++) &#123;<br>        FileTab tab = (FileTab) tabs.get(i);<br>        File f = tab.getFile();<br>        <span class="hljs-keyword">boolean</span> equals = f.getAbsolutePath().equals(file.getAbsolutePath());<br>        <span class="hljs-keyword">if</span> (equals) &#123;<br>            index = i;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 如果已经打开该文件,则将该文件变成选择状态</span><br>    <span class="hljs-keyword">if</span> (index != -<span class="hljs-number">1</span>) &#123;<br>        SingleSelectionModel&lt;Tab&gt; selectionModel = rightTab.getSelectionModel();<br>        selectionModel.select(index);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 如果该文件还没有打开,则</span><br>    String fileName = file.getName();<br>    CompletableFuture.supplyAsync(() -&gt; &#123;<br>        <span class="hljs-comment">// 读取文件时,鼠标指针为WAIT状态</span><br>        rootPane.setCursor(Cursor.WAIT);<br>        StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>        <span class="hljs-keyword">try</span> (BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> FileReader(file))) &#123;<br>            br.lines().map(s -&gt; s + <span class="hljs-string">&quot;\n&quot;</span>).forEach(sb::append);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br>        <span class="hljs-comment">// 读取完成将鼠标恢复</span><br>        rootPane.setCursor(Cursor.DEFAULT);<br>        <span class="hljs-comment">// 返回读取文件数据</span><br>        <span class="hljs-keyword">return</span> sb.toString();<br>    &#125;).thenAccept(s -&gt; Platform.runLater(() -&gt; &#123;<br>        <span class="hljs-comment">// 添加tab</span><br>        FileTab tab = <span class="hljs-keyword">new</span> FileTab(fileName, file);<br>        <span class="hljs-comment">// 将文件内容加入tab中</span><br>        TextArea textArea = <span class="hljs-keyword">new</span> TextArea();<br>        textArea.setText(s);<br>        tab.setContent(textArea);<br><br>        rightTab.getTabs().add(tab);<br><br>        <span class="hljs-comment">// 将刚打开的文件的tab置为选中状态</span><br>        SingleSelectionModel&lt;Tab&gt; selectionModel = rightTab.getSelectionModel();<br>        selectionModel.select(tab);<br>    &#125;));<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">noteFx打开并展示文件(Menu,Tab,FileChooser)</summary>
    
    
    
    <category term="noteFx" scheme="https://blog.pyjava.com/categories/noteFx/"/>
    
    
    <category term="project" scheme="https://blog.pyjava.com/tags/project/"/>
    
    <category term="javaFx" scheme="https://blog.pyjava.com/tags/javaFx/"/>
    
  </entry>
  
  <entry>
    <title>noteFx-保存文件</title>
    <link href="https://blog.pyjava.com/2021/04/28/project/noteFx/06_%E4%BF%9D%E5%AD%98%E6%96%87%E4%BB%B6/"/>
    <id>https://blog.pyjava.com/2021/04/28/project/noteFx/06_%E4%BF%9D%E5%AD%98%E6%96%87%E4%BB%B6/</id>
    <published>2021-04-27T16:40:22.000Z</published>
    <updated>2021-04-28T16:32:43.557Z</updated>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p><strong>项目地址</strong> <a href="https://github.com/sandorZHAO/noteFx">https://github.com/sandorZHAO/noteFx</a></p>          </div><h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><ol><li>文件修改提示</li><li>文件保存</li></ol><h2 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h2><ol><li><code>ImageView</code></li><li>JavaFx监听</li><li>按键监听</li></ol><h2 id="文件修改提示"><a href="#文件修改提示" class="headerlink" title="文件修改提示"></a>文件修改提示</h2><p>当用户编辑文本时,提供一个文件已经被修改的状态提示,这里直接使用一个png图片展示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Image penIcon = <span class="hljs-keyword">new</span> Image(Objects.requireNonNull(ClassLoader.getSystemResourceAsStream(<span class="hljs-string">&quot;icon/pen-16.png&quot;</span>)));<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 添加tab</span><br>FileTab tab = <span class="hljs-keyword">new</span> FileTab(fileName, file);<br><span class="hljs-comment">// 将文件内容加入tab中</span><br>TextArea textArea = <span class="hljs-keyword">new</span> TextArea();<br>textArea.setText(fileContent);<br>tab.setContent(textArea);<br><span class="hljs-comment">// 监听文本区域值改变,当改变时,提供修改图标,提示用户该文件已被修改</span><br>textArea.textProperty().addListener((observable, oldValue, newValue) -&gt; &#123;<br>    ImageView iv = <span class="hljs-keyword">new</span> ImageView(penIcon);<br>    iv.setSmooth(<span class="hljs-keyword">true</span>);<br>    iv.setViewport(<span class="hljs-keyword">new</span> Rectangle2D(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>));<br>    tab.setGraphic(iv);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="文件保存"><a href="#文件保存" class="headerlink" title="文件保存"></a>文件保存</h2><p>当用户按下<code>ctrl</code>+<code>s</code>时,将文件保存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java">textArea.setOnKeyPressed((event) -&gt; &#123;<br>    <span class="hljs-keyword">if</span>(event.isControlDown() &amp;&amp; event.getCode().getName().equals(KeyCode.S.getName()))&#123;<br>        tab.setGraphic(<span class="hljs-keyword">null</span>);<br>        CompletableFuture.supplyAsync(()-&gt;&#123;<br>            FileWriter fileWriter = <span class="hljs-keyword">null</span>;<br>            <span class="hljs-keyword">try</span> &#123;<br>                fileWriter = <span class="hljs-keyword">new</span> FileWriter(tab.getFile());<br>                <span class="hljs-comment">// 写入文件</span><br>                fileWriter.write(textArea.getText());<br>                fileWriter.flush();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-keyword">if</span>(fileWriter != <span class="hljs-keyword">null</span>)&#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        fileWriter.close();<br>                    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">CompletableFuture.supplyAsync(() -&gt; &#123;<br>    <span class="hljs-comment">// some code</span><br>&#125;).thenAccept(s -&gt; Platform.runLater(() -&gt; &#123;<br>    <span class="hljs-comment">// some code</span><br>&#125;));<br></code></pre></td></tr></table></figure><p>原先代码都是写在<code>CompletableFuture</code>中,这样ui也会进入到子线程中,需要保证ui是在JavaFx的Application线程中,所有文件读取等操作放入到线程池中操作(可以提高用户体验).就有了如下代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">String fileContent = CompletableFuture.supplyAsync(() -&gt; &#123;<br>    <span class="hljs-comment">// 读取文件时,鼠标指针为WAIT状态</span><br>    rootPane.setCursor(Cursor.WAIT);<br>    StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>    <span class="hljs-keyword">try</span> (BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> FileReader(file))) &#123;<br>        br.lines().map(s -&gt; s + <span class="hljs-string">&quot;\n&quot;</span>).forEach(sb::append);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">// 读取完成将鼠标恢复</span><br>    rootPane.setCursor(Cursor.DEFAULT);<br>    <span class="hljs-comment">// 返回读取文件数据</span><br>    <span class="hljs-keyword">return</span> sb.toString();<br>&#125;).join();<br><br><span class="hljs-comment">// other code</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">noteFx保存文件(使用组件ImageView,以及JavaFx监听,按键监听)</summary>
    
    
    
    <category term="noteFx" scheme="https://blog.pyjava.com/categories/noteFx/"/>
    
    
    <category term="project" scheme="https://blog.pyjava.com/tags/project/"/>
    
    <category term="javaFx" scheme="https://blog.pyjava.com/tags/javaFx/"/>
    
  </entry>
  
  <entry>
    <title>noteFx-打包安装程序</title>
    <link href="https://blog.pyjava.com/2021/04/25/project/noteFx/03_%E6%89%93%E5%8C%85%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F/"/>
    <id>https://blog.pyjava.com/2021/04/25/project/noteFx/03_%E6%89%93%E5%8C%85%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F/</id>
    <published>2021-04-25T15:15:22.000Z</published>
    <updated>2021-04-28T15:13:08.014Z</updated>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p><strong>项目地址</strong> <a href="https://github.com/sandorZHAO/noteFx">https://github.com/sandorZHAO/noteFx</a></p>          </div><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p><a href="https://jrsoftware.org/isdl.php#stable">Inno Setup Compiler_6.1.2</a></p><h2 id="使用脚本"><a href="#使用脚本" class="headerlink" title="使用脚本"></a>使用脚本</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment">; Script generated by the Inno Setup Script Wizard.</span><br><span class="hljs-comment">; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!</span><br><br><span class="hljs-comment">#define MyAppName &quot;noteFx&quot;</span><br><span class="hljs-comment">#define MyAppVersion &quot;1.0&quot;</span><br><span class="hljs-comment">#define MyAppPublisher &quot;My Company, Inc.&quot;</span><br><span class="hljs-comment">#define MyAppURL &quot;https://www.example.com/&quot;</span><br><span class="hljs-comment">#define MyAppExeName &quot;noteFx.exe&quot;</span><br><br>[Setup]<br><span class="hljs-comment">; <span class="hljs-doctag">NOTE:</span> The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.</span><br><span class="hljs-comment">; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)</span><br>AppId=&#123;&#123;<span class="hljs-number">75</span>CD<span class="hljs-symbol">21B</span>1-A53A<span class="hljs-number">-4</span>F76<span class="hljs-number">-8</span>D46<span class="hljs-number">-9</span>EB36D886243&#125;<br>AppName=&#123;<span class="hljs-comment">#MyAppName&#125;</span><br>AppVersion=&#123;<span class="hljs-comment">#MyAppVersion&#125;</span><br><span class="hljs-comment">;AppVerName=&#123;#MyAppName&#125; &#123;#MyAppVersion&#125;</span><br>AppPublisher=&#123;<span class="hljs-comment">#MyAppPublisher&#125;</span><br>AppPublisherURL=&#123;<span class="hljs-comment">#MyAppURL&#125;</span><br>AppSupportURL=&#123;<span class="hljs-comment">#MyAppURL&#125;</span><br>AppUpdatesURL=&#123;<span class="hljs-comment">#MyAppURL&#125;</span><br>DefaultDirName=&#123;autopf&#125;\&#123;<span class="hljs-comment">#MyAppName&#125;</span><br><span class="hljs-keyword">DisableProgramGroupPage=yes</span><br><span class="hljs-keyword">; </span>Uncomment the following line to run in non administrative <span class="hljs-keyword">install </span>mode (<span class="hljs-keyword">install </span>for current user only.)<br><span class="hljs-comment">;PrivilegesRequired=lowest</span><br>OutputBaseFilename=mysetup<br>Compression=lzma<br>SolidCompression=yes<br>WizardStyle=modern<br><br>[Languages]<br><span class="hljs-symbol">Name:</span> <span class="hljs-string">&quot;english&quot;</span><span class="hljs-comment">; MessagesFile: &quot;compiler:Default.isl&quot;</span><br><span class="hljs-symbol">Name:</span> <span class="hljs-string">&quot;chinese&quot;</span><span class="hljs-comment">; MessagesFile: &quot;compiler:Languages\Chinese.isl&quot;</span><br><br>[Tasks]<br><span class="hljs-symbol">Name:</span> <span class="hljs-string">&quot;desktopicon&quot;</span><span class="hljs-comment">; Description: &quot;&#123;cm:CreateDesktopIcon&#125;&quot;; GroupDescription: &quot;&#123;cm:AdditionalIcons&#125;&quot;; Flags: unchecked</span><br><br>[Files]<br><span class="hljs-symbol">Source:</span> <span class="hljs-string">&quot;D:\work\i-workspace-noteFx\package\&#123;#MyAppExeName&#125;&quot;</span><span class="hljs-comment">; DestDir: &quot;&#123;app&#125;&quot;; Flags: ignoreversion</span><br><span class="hljs-symbol">Source:</span> <span class="hljs-string">&quot;D:\work\i-workspace-noteFx\package\miniJre\*&quot;</span><span class="hljs-comment">; DestDir: &quot;&#123;app&#125;\miniJre&quot;; Flags: ignoreversion recursesubdirs createallsubdirs</span><br><span class="hljs-comment">; <span class="hljs-doctag">NOTE:</span> Don&#x27;t use &quot;Flags: ignoreversion&quot; on any shared system files</span><br><br>[Icons]<br><span class="hljs-symbol">Name:</span> <span class="hljs-string">&quot;&#123;autoprograms&#125;\&#123;#MyAppName&#125;&quot;</span><span class="hljs-comment">; Filename: &quot;&#123;app&#125;\&#123;#MyAppExeName&#125;&quot;</span><br><span class="hljs-symbol">Name:</span> <span class="hljs-string">&quot;&#123;autodesktop&#125;\&#123;#MyAppName&#125;&quot;</span><span class="hljs-comment">; Filename: &quot;&#123;app&#125;\&#123;#MyAppExeName&#125;&quot;; Tasks: desktopicon</span><br><br>[Run]<br><span class="hljs-symbol">Filename:</span> <span class="hljs-string">&quot;&#123;app&#125;\&#123;#MyAppExeName&#125;&quot;</span><span class="hljs-comment">; Description: &quot;&#123;cm:LaunchProgram,&#123;#StringChange(MyAppName, &#x27;&amp;&#x27;, &#x27;&amp;&amp;&#x27;)&#125;&#125;&quot;; Flags: nowait postinstall skipifsilent</span><br></code></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><a href="/file/project/noteFx/mysetup.zip">mysetup.exe</a></p><h2 id="中文安装配置"><a href="#中文安装配置" class="headerlink" title="中文安装配置"></a>中文安装配置</h2><p><a href="/file/project/noteFx/Chinese.isl">Chinese.isl</a></p><p>该文件请放置在inno Setup Compiler的安装目录(\Inno Setup 6\Languages)下面</p>]]></content>
    
    
    <summary type="html">noteFx打包安装程序</summary>
    
    
    
    <category term="noteFx" scheme="https://blog.pyjava.com/categories/noteFx/"/>
    
    
    <category term="project" scheme="https://blog.pyjava.com/tags/project/"/>
    
    <category term="javaFx" scheme="https://blog.pyjava.com/tags/javaFx/"/>
    
  </entry>
  
  <entry>
    <title>noteFx-新!打包方法</title>
    <link href="https://blog.pyjava.com/2021/04/25/project/noteFx/04_%E6%96%B0!%E6%89%93%E5%8C%85%E6%96%B9%E6%B3%95/"/>
    <id>https://blog.pyjava.com/2021/04/25/project/noteFx/04_%E6%96%B0!%E6%89%93%E5%8C%85%E6%96%B9%E6%B3%95/</id>
    <published>2021-04-25T15:15:22.000Z</published>
    <updated>2021-04-28T06:31:35.424Z</updated>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p><strong>项目地址</strong> <a href="https://github.com/sandorZHAO/noteFx">https://github.com/sandorZHAO/noteFx</a></p>          </div><p>我在找JavaFx文档的时候,无意间在<a href="https://openjfx.cn/">官网</a>找到了<a href="https://github.com/fvarrui/JavaPackager">JavaPackager</a>,安装方法请见git教程</p><h2 id="软件依赖"><a href="#软件依赖" class="headerlink" title="软件依赖"></a>软件依赖</h2><p><a href="http://www.jrsoftware.org/isinfo.php">Inno Setup</a><br><a href="https://wixtoolset.org/releases/">WiX Toolset</a></p><p>安装完成后发现了一些问题,在使用<code>mvn package</code>的时候找不到<code>iscc</code>和<code>candle</code>指令.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plain">Setup installer generation failed due to: Command execution failed: iscc<br>...<br>...<br>...<br>MSI merge module generation failed due to: Command execution failed: candle -out<br>...<br>...<br>...<br></code></pre></td></tr></table></figure><p>翻看了JavaPackager的Issue后发现需要安装<code>choco</code></p><blockquote><ol><li>Install Chocolatey package manager.</li><li>Run next command on CMD or PowerShell as Administrator to install both tools:<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">choco <span class="hljs-keyword">install</span> -y innosetup wixtoolset<br></code></pre></td></tr></table></figure></li></ol></blockquote><p>当装好后发现,<code>iscc</code>可以运行了,但是candle不可以,原来choco没有安装二进制的wixtoolset</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ol><li>卸载<code>choco</code></li><li>安装<code>Inno Setup</code>,<code>WiX Toolset</code></li><li>加入环境变量PATH,就可以在控制台使用iscc和candle了</li></ol><div class="note note-warning">            <p>需要注意的是,idea可能需要重启</p>          </div>]]></content>
    
    
    <summary type="html">noteFx新打包方法</summary>
    
    
    
    <category term="noteFx" scheme="https://blog.pyjava.com/categories/noteFx/"/>
    
    
    <category term="project" scheme="https://blog.pyjava.com/tags/project/"/>
    
    <category term="javaFx" scheme="https://blog.pyjava.com/tags/javaFx/"/>
    
  </entry>
  
  <entry>
    <title>noteFx-打包exe</title>
    <link href="https://blog.pyjava.com/2021/04/25/project/noteFx/02_%E6%89%93%E5%8C%85exe/"/>
    <id>https://blog.pyjava.com/2021/04/25/project/noteFx/02_%E6%89%93%E5%8C%85exe/</id>
    <published>2021-04-25T14:15:22.000Z</published>
    <updated>2021-04-26T14:14:37.555Z</updated>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p><strong>项目地址</strong> <a href="https://github.com/sandorZHAO/noteFx">https://github.com/sandorZHAO/noteFx</a></p>          </div><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p><a href="https://exe4j.apponic.com/">exe4j_v6.0.1</a></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p><img src="/img/project/noteFx/02-00-exe4j.png" alt="打包exe-1"><br><img src="/img/project/noteFx/02-01-exe4j.png" alt="打包exe-2"><br><img src="/img/project/noteFx/02-02-exe4j.png" alt="打包exe-3"><br><img src="/img/project/noteFx/02-03-exe4j.png" alt="打包exe-4"><br><img src="/img/project/noteFx/02-04-exe4j.png" alt="打包exe-5"><br><img src="/img/project/noteFx/02-05-exe4j.png" alt="打包exe-6"><br><img src="/img/project/noteFx/02-06-exe4j.png" alt="打包exe-7"><br><img src="/img/project/noteFx/02-07-exe4j.png" alt="打包exe-8"><br><img src="/img/project/noteFx/02-08-exe4j.png" alt="打包exe-9"></p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>当然你现在是打不开的,因为目前使用的是./miniJre目录那么当前是找不到这个依赖的</p><h2 id="精简jre"><a href="#精简jre" class="headerlink" title="精简jre"></a>精简jre</h2><p>到对应的java 11 安装目录下执行以下脚本,进行<strong>精简jre</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./bin/jlink.exe  --strip-debug --compress 1 --no-header-files --no-man-pages --output miniJre --add-modules java.base,jdk.unsupported,java.desktop,java.scripting<br></code></pre></td></tr></table></figure><p>将<code>java.base</code>,<code>jdk.unsupported</code>,<code>java.desktop</code>,<code>java.scripting</code>模块导出形成miniJre,并且将miniJar和刚才打包出来的exe放到同一目录下,这时候打开对应exe文件就可以查看效果了</p><p><img src="/img/project/noteFx/02-09-result.png" alt="效果"></p>]]></content>
    
    
    <summary type="html">noteFx打包exe</summary>
    
    
    
    <category term="noteFx" scheme="https://blog.pyjava.com/categories/noteFx/"/>
    
    
    <category term="project" scheme="https://blog.pyjava.com/tags/project/"/>
    
    <category term="javaFx" scheme="https://blog.pyjava.com/tags/javaFx/"/>
    
  </entry>
  
  <entry>
    <title>noteFx-项目初始化</title>
    <link href="https://blog.pyjava.com/2021/04/25/project/noteFx/01_%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <id>https://blog.pyjava.com/2021/04/25/project/noteFx/01_%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96/</id>
    <published>2021-04-25T13:45:22.000Z</published>
    <updated>2021-04-25T17:13:15.658Z</updated>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p><strong>项目地址</strong> <a href="https://github.com/sandorZHAO/noteFx">https://github.com/sandorZHAO/noteFx</a></p>          </div><h2 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h2><h3 id="通过Idea的maven构建项目"><a href="#通过Idea的maven构建项目" class="headerlink" title="通过Idea的maven构建项目"></a>通过Idea的maven构建项目</h3><p><img src="/img/project/noteFx/01-00.png" alt="idea构建-1"><br><img src="/img/project/noteFx/01-01.png" alt="idea构建-2"></p><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p><img src="/img/project/noteFx/01-02-项目结构.png" alt="项目结构"></p><h3 id="pom依赖加入"><a href="#pom依赖加入" class="headerlink" title="pom依赖加入"></a>pom依赖加入</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs xml">    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">javafx.version</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">javafx.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.openjfx<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javafx-controls<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;javafx.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.openjfx<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javafx-fxml<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;javafx.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>noteFx<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/fxml/*.fxml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.6.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>$&#123;maven.compiler.source&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>$&#123;maven.compiler.target&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">archive</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">manifest</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>com.pyjava.notefx.AppLauncher<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">archive</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">descriptorRefs</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">descriptorRef</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">descriptorRefs</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>single<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="部分java类"><a href="#部分java类" class="headerlink" title="部分java类"></a>部分java类</h3><ul><li><p><code>AppLauncher</code>应用启动类,后续打包成exe后防止报错</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppLauncher</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Application.launch(Main.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>Main</code>启动类</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Application</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        launch(args);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">start</span><span class="hljs-params">(Stage primaryStage)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        URL resource = getClass().getClassLoader().getResource(<span class="hljs-string">&quot;fxml/main.fxml&quot;</span>);<br>        <span class="hljs-keyword">assert</span> resource != <span class="hljs-keyword">null</span>;<br>        Parent root = FXMLLoader.load(resource);<br>        Scene scene = <span class="hljs-keyword">new</span> Scene(root, <span class="hljs-number">600</span>, <span class="hljs-number">500</span>);<br><br>        primaryStage.setTitle(<span class="hljs-string">&quot;Simple JavaFX&quot;</span>);<br>        primaryStage.setScene(scene);<br>        primaryStage.show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>MainController</code></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainController</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handlerBtnClick</span><span class="hljs-params">(ActionEvent event)</span> </span>&#123;<br>        Button btnSource = (Button) event.getSource();<br>        btnSource.setText(<span class="hljs-string">&quot;I am clicked!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>main.fxml</code></p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><br>&lt;?import javafx.scene.control.Button?&gt;<br>&lt;?import javafx.scene.layout.BorderPane?&gt;<br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">BorderPane</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://javafx.com/javafx/8.0.112&quot;</span> <span class="hljs-attr">xmlns:fx</span>=<span class="hljs-string">&quot;http://javafx.com/fxml/1&quot;</span> <span class="hljs-attr">fx:controller</span>=<span class="hljs-string">&quot;com.pyjava.notefx.controller.MainController&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">text</span>=<span class="hljs-string">&quot;Click Me&quot;</span> <span class="hljs-attr">BorderPane.alignment</span>=<span class="hljs-string">&quot;CENTER&quot;</span> <span class="hljs-attr">onAction</span>=<span class="hljs-string">&quot;#handlerBtnClick&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">BorderPane</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">noteFx项目初始化</summary>
    
    
    
    <category term="noteFx" scheme="https://blog.pyjava.com/categories/noteFx/"/>
    
    
    <category term="project" scheme="https://blog.pyjava.com/tags/project/"/>
    
    <category term="javaFx" scheme="https://blog.pyjava.com/tags/javaFx/"/>
    
  </entry>
  
  <entry>
    <title>noteFx-介绍</title>
    <link href="https://blog.pyjava.com/2021/04/25/project/noteFx/00_%E4%BB%8B%E7%BB%8D/"/>
    <id>https://blog.pyjava.com/2021/04/25/project/noteFx/00_%E4%BB%8B%E7%BB%8D/</id>
    <published>2021-04-25T13:20:00.000Z</published>
    <updated>2021-04-27T16:58:23.457Z</updated>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p><strong>项目地址</strong> <a href="https://github.com/sandorZHAO/noteFx">https://github.com/sandorZHAO/noteFx</a></p>          </div><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>项目名:noteFx</p><h2 id="项目需求"><a href="#项目需求" class="headerlink" title="项目需求"></a>项目需求</h2><p>hexo编辑器</p><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><p>Idea</p>]]></content>
    
    
    <summary type="html">noteFx介绍(技术栈及需求分析)</summary>
    
    
    
    <category term="noteFx" scheme="https://blog.pyjava.com/categories/noteFx/"/>
    
    
    <category term="project" scheme="https://blog.pyjava.com/tags/project/"/>
    
    <category term="javaFx" scheme="https://blog.pyjava.com/tags/javaFx/"/>
    
  </entry>
  
  <entry>
    <title>包装类型</title>
    <link href="https://blog.pyjava.com/2021/04/23/java/02_core_class/02_%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B/"/>
    <id>https://blog.pyjava.com/2021/04/23/java/02_core_class/02_%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B/</id>
    <published>2021-04-22T16:10:00.000Z</published>
    <updated>2021-04-28T17:05:17.539Z</updated>
    
    <content type="html"><![CDATA[<h2 id="java-数据类型"><a href="#java-数据类型" class="headerlink" title="java 数据类型"></a>java 数据类型</h2><blockquote><p>基本数据类型:byte,short,int,long,float,double,char,boolean<br>引用数据类型: class,interface</p></blockquote><h2 id="为什么需要包装类型"><a href="#为什么需要包装类型" class="headerlink" title="为什么需要包装类型"></a>为什么需要包装类型</h2><p>那么为什么需要包装类型呢？</p><p>我们知道 Java 是一个面相对象的编程语言，基本类型并不具有对象的性质，为了让基本类型也具有对象的特征，就出现了包装类型（如我们在使用集合类型 Collection 时就一定要使用包装类型而非基本类型），它相当于将基本类型“包装起来”，使得它具有了对象的性质，并且为其添加了属性和方法，丰富了基本类型的操作。</p><h2 id="基本类型与包装类型对应关系"><a href="#基本类型与包装类型对应关系" class="headerlink" title="基本类型与包装类型对应关系"></a>基本类型与包装类型对应关系</h2><div class="table-container"><table><thead><tr><th>基本类型</th><th>对应的引用类型</th></tr></thead><tbody><tr><td>boolean</td><td>java.lang.Boolean</td></tr><tr><td>byte</td><td>java.lang.Byte</td></tr><tr><td>short</td><td>java.lang.Short</td></tr><tr><td>int</td><td>java.lang.Integer</td></tr><tr><td>long</td><td>java.lang.Long</td></tr><tr><td>float</td><td>java.lang.Float</td></tr><tr><td>double</td><td>java.lang.Double</td></tr><tr><td>char</td><td>java.lang.Character</td></tr></tbody></table></div><h2 id="自动装箱"><a href="#自动装箱" class="headerlink" title="自动装箱"></a>自动装箱</h2><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">Integer</span> n = <span class="hljs-number">100</span>; // 编译器自动使用<span class="hljs-keyword">Integer</span>.valueOf(<span class="hljs-built_in">int</span>)<br><span class="hljs-built_in">int</span> x = n; // 编译器自动使用<span class="hljs-keyword">Integer</span>.intValue()<br></code></pre></td></tr></table></figure><h2 id="不变类"><a href="#不变类" class="headerlink" title="不变类"></a>不变类</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Integer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Number</span> <span class="hljs-title">implements</span> <span class="hljs-title">Comparable&lt;Integer&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="Integer-amp-amp-Long"><a href="#Integer-amp-amp-Long" class="headerlink" title="Integer &amp;&amp; Long"></a>Integer &amp;&amp; Long</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IntegerCache</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> low = -<span class="hljs-number">128</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> high;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Integer cache[];<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-comment">// high value may be configured by property</span><br>        <span class="hljs-keyword">int</span> h = <span class="hljs-number">127</span>;<br>        String integerCacheHighPropValue =<br>            sun.misc.VM.getSavedProperty(<span class="hljs-string">&quot;java.lang.Integer.IntegerCache.high&quot;</span>);<br>        <span class="hljs-keyword">if</span> (integerCacheHighPropValue != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">int</span> i = parseInt(integerCacheHighPropValue);<br>                i = Math.max(i, <span class="hljs-number">127</span>);<br>                <span class="hljs-comment">// Maximum array size is Integer.MAX_VALUE</span><br>                h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">catch</span>( NumberFormatException nfe) &#123;<br>                <span class="hljs-comment">// If the property cannot be parsed into an int, ignore it.</span><br>            &#125;<br>        &#125;<br>        high = h;<br><br>        cache = <span class="hljs-keyword">new</span> Integer[(high - low) + <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">int</span> j = low;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; cache.length; k++)<br>            cache[k] = <span class="hljs-keyword">new</span> Integer(j++);<br><br>        <span class="hljs-comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span><br>        <span class="hljs-keyword">assert</span> IntegerCache.high &gt;= <span class="hljs-number">127</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">IntegerCache</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title">valueOf</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)<br>        <span class="hljs-keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Integer(i);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们再来看下以下代码会发生什么</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer a1 = Integer.valueOf(<span class="hljs-number">100</span>);<br>Integer a2 = Integer.valueOf(<span class="hljs-number">100</span>);<br><br>Integer b1 = <span class="hljs-number">100</span>;<br>Integer b2 = <span class="hljs-number">100</span>;<br><br>Integer c1 = <span class="hljs-number">200</span>;<br>Integer c2 = <span class="hljs-number">200</span>;<br><br><span class="hljs-keyword">if</span>(a1==a2) &#123;<br>    System.out.println(<span class="hljs-string">&quot;相等&quot;</span>);<span class="hljs-comment">//相等</span><br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;不相等&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span>(b1==b2) &#123;<br>    System.out.println(<span class="hljs-string">&quot;相等&quot;</span>);<span class="hljs-comment">//相等</span><br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;不相等&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span>(c1==c2) &#123;<br>    System.out.println(<span class="hljs-string">&quot;相等&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;不相等&quot;</span>);<span class="hljs-comment">//不相等</span><br>&#125;<br></code></pre></td></tr></table></figure><div class="note note-info">            <p>Integer缓存了-128~127之间的数，这是在类加载期间就完成的。以后需要的时候直接指向它就可以了，省去了构造对象的开支，提高了效率。<br>同理<code>Long</code>也是一样</p>          </div>]]></content>
    
    
    <summary type="html">包装类型</summary>
    
    
    
    
    <category term="Java" scheme="https://blog.pyjava.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java Object</title>
    <link href="https://blog.pyjava.com/2021/04/22/java/02_core_class/00_Object/"/>
    <id>https://blog.pyjava.com/2021/04/22/java/02_core_class/00_Object/</id>
    <published>2021-04-22T10:50:00.000Z</published>
    <updated>2021-04-22T10:07:50.744Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一切皆对象-Object"><a href="#一切皆对象-Object" class="headerlink" title="一切皆对象 Object"></a>一切皆对象 Object</h2><h2 id="Object方法"><a href="#Object方法" class="headerlink" title="Object方法"></a>Object方法</h2><h3 id="getClass"><a href="#getClass" class="headerlink" title="getClass"></a>getClass</h3><p>用来获取运行时的对象；当声明对象和.class 文件中真正的对象不一致时，该方法会返回.class 的对象</p><p>主要用于 Java 的反射 <code>public final native Class&lt;?&gt; getClass();</code></p><h3 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode"></a>hashCode</h3><p>用来获取一个对象 int 类型的 hash 码</p><p><code>public native int hashCode();</code></p><ol><li>native</li><li>没有 final，可重写</li><li>注意点<ol><li>在 java 程序执行过程中，在一个对象没有被改变的前提下，无论这个对象被调用多少次，hashCode 方法都会返回相同的 int 值。这个 int 值可在不同的程序中不同;</li><li>如果 2 个对象使用 equals 方法进行比较并且相同的话，那么这 2 个对象的 hashCode 方法的值也必须相等;</li><li>如果根据 equals 方法，得到两个对象不相等，那么这 2 个对象的 hashCode 值可以不相同; 但是，不相等的对象的 hashCode 值不同的话可以提高哈希表的性能;</li></ol></li></ol><h3 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h3><p>是比较两个对象是否相等</p><p>默认是实现是比较引用是否相同, 即是否为同一个内存对象;</p><ol><li>自反性 对于任意非空对象 x,x.equals(x)=true</li><li>对称性 对于任意非空对象 x,y, x.equals(y) = y.equals.(x)</li><li>传递性 对于任意非空对象 x,y,z, 若有 x.equals(y) , y.equals.(z),则 x.equals(z) =true</li><li>一致性 对于任意非空对象 x,y, x,y 都没有修改的前提下，x.equals(y)值唯一</li><li>对于任意非空对象 x,x.equals(null)，一定为 false</li><li>重写 equals 最好重写 hashcode</li></ol><h3 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h3><p><code>protected native Object clone() throws CloneNotSupportedException;</code></p><p>返回当前对象的一份拷贝</p><p>引申出深拷贝和浅拷贝</p><blockquote><p>浅拷贝：基本数据类型直接值传递，引用数据类型拷贝引用地址</p><p>深拷贝：复制对象的所有基本数据类型，为所有引用数据类型的成员变量申请存储空间</p></blockquote><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h3><h3 id="notify-和-notifyAll-和-wait"><a href="#notify-和-notifyAll-和-wait" class="headerlink" title="notify 和 notifyAll 和 wait"></a>notify 和 notifyAll 和 wait</h3><ol><li><p>wait 在同步代码块中调用该方法时，当前线程立即释放锁并等待，知道有其他线程调用</p></li><li><p>notify/notifyAll 或等待超时时，才会去再次竞争锁，成功后继续执行下面的逻辑</p></li><li><p>wait<br><code>public final native void wait(long timeout) throws InterruptedException;</code></p></li><li><p>notify</p><p>线程 A 在同步代码块中调用该方法，会随机地唤醒一个等待在该对象锁上的线程 B，主语这时候唤醒的线程 B 还没有持有锁，必须要等到线程 A 释放锁才能持有该锁。</p><blockquote><p>如果线程在 A 对象的同步代码块中执行 B 对象的 notify，会抛出 <code>illegalMonitorStateException</code></p></blockquote></li><li><p>notyfyAll</p><p>线程 A 在同步代码块中调用该方法时，会唤醒所有等待在该锁上的线程，同样的，这些唤醒的线程只有在线程 A 放锁以后，才能再次竞争该锁，竞争到该锁的线程继续执行，其他线程等待</p><blockquote><p>如果调用的线程不是该锁的持有者，那么也会抛出<code>illegalMonitorStateException</code></p></blockquote></li></ol><h3 id="finalize"><a href="#finalize" class="headerlink" title="finalize"></a>finalize</h3><p><code>protected void finalize() throws Throwable &#123; &#125;</code></p><p>JVM 在进行 GC 时，如果这个对象需要被回收，会判断该方法是否被重写，若未重写，则直接回收该对象内存空间。反之，判断该对象的 finalize 是否被执行过，若没有执行过，会放入一个队列，由低优先级的线程去执行该对象的 finalize 方法，执行完毕后再判断该对象是否需要回收；如果该对象已经执行一遍finalize 方法，直接回收对象的内存空间</p><ol><li>对象可能不被垃圾回收</li><li>垃圾回收并不等于析构</li><li>垃圾回收只与内存有关</li></ol><h3 id="registerNatives"><a href="#registerNatives" class="headerlink" title="registerNatives"></a>registerNatives</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerNatives</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">static</span> &#123;<br>    registerNatives();<br>&#125;<br><br></code></pre></td></tr></table></figure><ol><li>static</li><li>native</li></ol><p>注册原生方法：</p><p>必须通过<code>RegisterNatives</code>从自己的库中的本机代码调用JNI函数</p>]]></content>
    
    
    <summary type="html">java Object</summary>
    
    
    
    
    <category term="Java" scheme="https://blog.pyjava.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>ioui-介绍</title>
    <link href="https://blog.pyjava.com/2021/04/19/project/io-ui/00_%E4%BB%8B%E7%BB%8D/"/>
    <id>https://blog.pyjava.com/2021/04/19/project/io-ui/00_%E4%BB%8B%E7%BB%8D/</id>
    <published>2021-04-18T16:20:00.000Z</published>
    <updated>2021-04-21T05:01:49.008Z</updated>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p><strong>项目地址</strong> <a href="https://github.com/io-ui/io-ui">https://github.com/io-ui/io-ui</a><br><strong>项目文档</strong> <a href="https://io-ui.pyjava.com/">https://io-ui.pyjava.com/</a></p>          </div><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>Io-Ui<br>基于vue的ui样式组件</p><h2 id="名称来源"><a href="#名称来源" class="headerlink" title="名称来源"></a>名称来源</h2><p>io 来源于dota2中小精灵</p><h2 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h2><ol><li>Color 颜色</li><li>Font 字体</li><li>Shadow 投影</li></ol><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><ol><li><input type="checkbox" disabled checked="checked"> Button 按钮</li><li><input type="checkbox" disabled checked="checked"> Icon 图标 </li><li><input type="checkbox" disabled > Toast 消息框</li></ol>]]></content>
    
    
    <summary type="html">ioui介绍(技术栈及需求分析)</summary>
    
    
    
    <category term="ioui" scheme="https://blog.pyjava.com/categories/ioui/"/>
    
    
    <category term="project" scheme="https://blog.pyjava.com/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>电商平台-swagger</title>
    <link href="https://blog.pyjava.com/2021/04/18/project/%E7%94%B5%E5%95%86%E5%B9%B3%E5%8F%B0/03_swagger/"/>
    <id>https://blog.pyjava.com/2021/04/18/project/%E7%94%B5%E5%95%86%E5%B9%B3%E5%8F%B0/03_swagger/</id>
    <published>2021-04-18T15:24:06.000Z</published>
    <updated>2021-04-21T05:01:02.960Z</updated>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p><strong>项目地址</strong> <a href="https://github.com/sandorZHAO/shop">https://github.com/sandorZHAO/shop</a></p>          </div><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>以下摘自oschina<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="oschina-swagger介绍">[1]</span></a></sup></p><blockquote><p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。</p><p>总体目标是使客户端和文件系统作为服务器以同样的速度来更新。文件的方法、参数和模型紧密集成到服务器端的代码，允许 API 来始终保持同步。Swagger 让部署管理和使用功能强大的 API 从未如此简单。</p></blockquote><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@EnableOpenApi</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SwaggerConfiguration</span> </span>&#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">webApiDoc</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.OAS_30)<br>                .groupName(<span class="hljs-string">&quot;用户端接口文档&quot;</span>)<br>                .pathMapping(<span class="hljs-string">&quot;/&quot;</span>)<br>                <span class="hljs-comment">// 定义是否开启swagger, 可以通过变量配置它</span><br>                .enable(<span class="hljs-keyword">true</span>)<br>                <span class="hljs-comment">// 配置文档的元信息</span><br>                .apiInfo(apiInfo())<br>                .select()<br>                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.pyjava.shop&quot;</span>))<br>                <span class="hljs-comment">// 正则匹配请求路径,并分配当前分组</span><br>                .paths(PathSelectors.ant(<span class="hljs-string">&quot;api/**&quot;</span>))<br>                .build()<br>                .globalRequestParameters(globalRequestParameters())<br>                .globalResponses(HttpMethod.GET, getGlobalResponseMessage());<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">adminApiDoc</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.OAS_30)<br>                .groupName(<span class="hljs-string">&quot;管理端接口文档&quot;</span>)<br>                .pathMapping(<span class="hljs-string">&quot;/&quot;</span>)<br>                <span class="hljs-comment">// 定义是否开启swagger, 可以通过变量配置它</span><br>                .enable(<span class="hljs-keyword">true</span>)<br>                <span class="hljs-comment">// 配置文档的元信息</span><br>                .apiInfo(apiInfo())<br>                .select()<br>                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.pyjava.shop&quot;</span>))<br>                <span class="hljs-comment">// 正则匹配请求路径,并分配当前分组</span><br>                .paths(PathSelectors.ant(<span class="hljs-string">&quot;admin/**&quot;</span>))<br>                .build();<br><br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title">apiInfo</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ApiInfoBuilder()<br>                .title(<span class="hljs-string">&quot;电商平台&quot;</span>)<br>                .description(<span class="hljs-string">&quot;微服务接口文档&quot;</span>)<br>                .version(<span class="hljs-string">&quot;v1.0&quot;</span>)<br>                .contact(<span class="hljs-keyword">new</span> Contact(<span class="hljs-string">&quot;zhaojj&quot;</span>, <span class="hljs-string">&quot;http://pyjava.com&quot;</span>, <span class="hljs-string">&quot;757355084@qq.com&quot;</span>))<br>                .build();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> List&lt;RequestParameter&gt; <span class="hljs-title">globalRequestParameters</span><span class="hljs-params">()</span> </span>&#123;<br>        List&lt;RequestParameter&gt; parameters = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        parameters.add(<span class="hljs-keyword">new</span> RequestParameterBuilder()<br>                .name(<span class="hljs-string">&quot;token&quot;</span>)<br>                .description(<span class="hljs-string">&quot;登录令牌&quot;</span>)<br>                .in(ParameterType.HEADER)<br>                .query(q -&gt; q.model(m -&gt; m.scalarModel(ScalarType.STRING)))<br>                .required(<span class="hljs-keyword">false</span>)<br>                .build());<br><br>        <span class="hljs-keyword">return</span> parameters;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> List&lt;Response&gt; <span class="hljs-title">getGlobalResponseMessage</span><span class="hljs-params">()</span> </span>&#123;<br>        List&lt;Response&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>        list.add(<span class="hljs-keyword">new</span> ResponseBuilder()<br>                .code(<span class="hljs-string">&quot;4xx&quot;</span>)<br>                .description(<span class="hljs-string">&quot;请求错误,根据code和msg检查&quot;</span>)<br>                .build());<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><section class="footnotes"><h2>参考</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.oschina.net/p/swagger?hmsr=aladdin1e1">oschina-swagger介绍</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <summary type="html">电商平台-common模块</summary>
    
    
    
    <category term="基于Spring Alibaba Cloud的电商平台" scheme="https://blog.pyjava.com/categories/%E5%9F%BA%E4%BA%8ESpring-Alibaba-Cloud%E7%9A%84%E7%94%B5%E5%95%86%E5%B9%B3%E5%8F%B0/"/>
    
    
    <category term="project" scheme="https://blog.pyjava.com/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>电商平台-用户模块</title>
    <link href="https://blog.pyjava.com/2021/04/18/project/%E7%94%B5%E5%95%86%E5%B9%B3%E5%8F%B0/04_%E7%94%A8%E6%88%B7%E6%A8%A1%E5%9D%97/"/>
    <id>https://blog.pyjava.com/2021/04/18/project/%E7%94%B5%E5%95%86%E5%B9%B3%E5%8F%B0/04_%E7%94%A8%E6%88%B7%E6%A8%A1%E5%9D%97/</id>
    <published>2021-04-18T15:24:06.000Z</published>
    <updated>2021-04-21T05:01:07.240Z</updated>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p><strong>项目地址</strong> <a href="https://github.com/sandorZHAO/shop">https://github.com/sandorZHAO/shop</a></p>          </div><h2 id="注册功能"><a href="#注册功能" class="headerlink" title="注册功能"></a>注册功能</h2><h3 id="功能需求"><a href="#功能需求" class="headerlink" title="功能需求"></a>功能需求</h3><ul><li>使用邮箱注册，已经注册的邮箱不能重复注册</li><li>密码不能使用简单的MD5加密</li><li>用户上传头像需要用文件存储</li></ul><h3 id="安全需求"><a href="#安全需求" class="headerlink" title="安全需求"></a>安全需求</h3><ul><li>高并发下邮箱唯一性</li><li>注册邮箱或者手机验证码不能被恶意调用</li><li>头像文件存储访问方便扩容和管理</li></ul><h3 id="短信轰炸"><a href="#短信轰炸" class="headerlink" title="短信轰炸"></a>短信轰炸</h3><ul><li><p>什么是短信-邮箱轰炸机：</p><p>  手机短信轰炸机是批量、循环给手机无限发送各种网站的注册验证码短信的方法。</p></li></ul><h3 id="图形验证码"><a href="#图形验证码" class="headerlink" title="图形验证码"></a>图形验证码</h3><ul><li><p>依赖</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>kaptcha-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>开发配置</p><p>  在user工程下</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CaptchaConfig</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 验证码配置</span><br><span class="hljs-comment">    * Kaptcha配置类名</span><br><span class="hljs-comment">    * </span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@Qualifier(&quot;captchaProducer&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DefaultKaptcha <span class="hljs-title">kaptcha</span><span class="hljs-params">()</span> </span>&#123;<br>        DefaultKaptcha kaptcha = <span class="hljs-keyword">new</span> DefaultKaptcha();<br>        Properties properties = <span class="hljs-keyword">new</span> Properties();<br><span class="hljs-comment">//properties.setProperty(Constants.KAPTCHA_BORDER, &quot;yes&quot;);</span><br><span class="hljs-comment">//properties.setProperty(Constants.KAPTCHA_BORDER_COLOR, &quot;220,220,220&quot;);</span><br><span class="hljs-comment">////properties.setProperty(Constants.KAPTCHA_TEXTPRODUCER_FONT_COLOR, &quot;38,29,12&quot;);</span><br><span class="hljs-comment">//properties.setProperty(Constants.KAPTCHA_IMAGE_WIDTH, &quot;147&quot;);</span><br><span class="hljs-comment">//properties.setProperty(Constants.KAPTCHA_IMAGE_HEIGHT, &quot;34&quot;);</span><br><span class="hljs-comment">//properties.setProperty(Constants.KAPTCHA_TEXTPRODUCER_FONT_SIZE, &quot;25&quot;);</span><br><span class="hljs-comment">////properties.setProperty(Constants.KAPTCHA_SESSION_KEY, &quot;code&quot;);</span><br>        <span class="hljs-comment">//验证码个数</span><br>        properties.setProperty(Constants.KAPTCHA_TEXTPRODUCER_CHAR_LENGTH, <span class="hljs-string">&quot;4&quot;</span>);<br><span class="hljs-comment">//properties.setProperty(Constants.KAPTCHA_TEXTPRODUCER_FONT_NAMES, &quot;Courier&quot;);</span><br>        <span class="hljs-comment">//字体间隔</span><br>        properties.setProperty(Constants.KAPTCHA_TEXTPRODUCER_CHAR_SPACE,<span class="hljs-string">&quot;8&quot;</span>);<br>        <span class="hljs-comment">//干扰线颜色</span><br><span class="hljs-comment">//properties.setProperty(Constants.KAPTCHA_NOISE_COLOR, &quot;white&quot;);</span><br>        <span class="hljs-comment">//干扰实现类</span><br>        properties.setProperty(Constants.KAPTCHA_NOISE_IMPL, <span class="hljs-string">&quot;com.google.code.kaptcha.impl.NoNoise&quot;</span>);<br>        <span class="hljs-comment">//图片样式</span><br>        properties.setProperty(Constants.KAPTCHA_OBSCURIFICATOR_IMPL, <span class="hljs-string">&quot;com.google.code.kaptcha.impl.WaterRipple&quot;</span>);<br>        <span class="hljs-comment">//文字来源</span><br>        properties.setProperty(Constants.KAPTCHA_TEXTPRODUCER_CHAR_STRING, <span class="hljs-string">&quot;0123456789&quot;</span>);<br>        Config config = <span class="hljs-keyword">new</span> Config(properties);<br>        kaptcha.setConfig(config);<br>        <span class="hljs-keyword">return</span> kaptcha;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>对应接口实现</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Api(tags = &quot;通知模块&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/api/notify/v1/&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NotifyController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Qualifier(&quot;captchaProducer&quot;)</span><br>    <span class="hljs-keyword">private</span> Producer captchaProducer;<br><br>    <span class="hljs-meta">@GetMapping(&quot;captcha&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getCaptcha</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span></span>&#123;<br>        String captcha = captchaProducer.createText();<br>        log.info(<span class="hljs-string">&quot;图形验证码&quot;</span> + captcha);<br>        BufferedImage image = captchaProducer.createImage(captcha);<br>        ServletOutputStream outputStream;<br>        <span class="hljs-keyword">try</span> &#123;<br>            outputStream = response.getOutputStream();<br>            ImageIO.write(image, <span class="hljs-string">&quot;jpg&quot;</span>, outputStream);<br>            outputStream.flush();<br>            outputStream.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>            log.error(<span class="hljs-string">&quot;获取验证码异常:&#123;0&#125;&quot;</span>, e);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>请求结果</p><p>  <img src="/img/project/shop/shop-captcha.png" alt="获取图形验证码"></p></li></ul>]]></content>
    
    
    <summary type="html">电商平台-用户模块</summary>
    
    
    
    <category term="基于Spring Alibaba Cloud的电商平台" scheme="https://blog.pyjava.com/categories/%E5%9F%BA%E4%BA%8ESpring-Alibaba-Cloud%E7%9A%84%E7%94%B5%E5%95%86%E5%B9%B3%E5%8F%B0/"/>
    
    
    <category term="project" scheme="https://blog.pyjava.com/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>电商平台-common模块</title>
    <link href="https://blog.pyjava.com/2021/04/16/project/%E7%94%B5%E5%95%86%E5%B9%B3%E5%8F%B0/02_common%E7%BB%84%E4%BB%B6/"/>
    <id>https://blog.pyjava.com/2021/04/16/project/%E7%94%B5%E5%95%86%E5%B9%B3%E5%8F%B0/02_common%E7%BB%84%E4%BB%B6/</id>
    <published>2021-04-16T13:11:00.000Z</published>
    <updated>2021-04-21T05:03:48.189Z</updated>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p><strong>项目地址</strong> <a href="https://github.com/sandorZHAO/shop">https://github.com/sandorZHAO/shop</a></p>          </div><h2 id="统一返回结果"><a href="#统一返回结果" class="headerlink" title="统一返回结果"></a>统一返回结果</h2><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>在编写代码时,给前端返回一个格式统一的json结构,通常使用一个<code>Result</code>类来包装。</p><p>再给前台返回时可以使用这样的操作：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/find/&#123;addressId&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Result&lt;AddressDO&gt; <span class="hljs-title">findAddressById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;addressId&quot;)</span> <span class="hljs-keyword">long</span> addressId)</span> </span>&#123;<br>    AddressDO address = addressService.findAddress(addressId);<br>    <span class="hljs-keyword">return</span> Result.ofSuccess(address);<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="Result类"><a href="#Result类" class="headerlink" title="Result类"></a>Result类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Result</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 状态码</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Integer code;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 描述</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String message;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> T data;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Long timestamp;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Result</span><span class="hljs-params">(Integer code, String message, T data)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.code = code;<br>        <span class="hljs-keyword">this</span>.message = message;<br>        <span class="hljs-keyword">this</span>.data = data;<br>        <span class="hljs-keyword">this</span>.timestamp = System.currentTimeMillis();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@link</span> Result&#125; 构建器</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> code    状态码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message 描述</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data    数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> Result&#125; 统一返回结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">Result&lt;T&gt; <span class="hljs-title">of</span><span class="hljs-params">(Integer code, String message, T data)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result&lt;&gt;(code, message, data);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@link</span> Result&#125; 构建器</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> resultCode &#123;<span class="hljs-doctag">@link</span> ResultCode&#125; 状态码枚举类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> Result&#125; 统一返回结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">Result&lt;T&gt; <span class="hljs-title">of</span><span class="hljs-params">(ResultCode resultCode)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Result.of(resultCode.getCode(), resultCode.getMessage(), <span class="hljs-keyword">null</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@link</span> Result&#125; 构建器</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> resultCode &#123;<span class="hljs-doctag">@link</span> ResultCode&#125; 状态码枚举类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data       数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> Result&#125; 统一返回结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">Result&lt;T&gt; <span class="hljs-title">of</span><span class="hljs-params">(ResultCode resultCode, T data)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Result.of(resultCode.getCode(), resultCode.getMessage(), data);<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 成功</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> Result&#125; 统一返回结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title">ofSuccess</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Result.of(ResultCode.SUCCESS, <span class="hljs-keyword">null</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 成功 并且携带数据</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> object 数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> Result&#125; 统一返回结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">Result&lt;T&gt; <span class="hljs-title">ofSuccess</span><span class="hljs-params">(T object)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Result.of(ResultCode.SUCCESS, object);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 失败</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> resultCode &#123;<span class="hljs-doctag">@link</span> ResultCode&#125; 状态码枚举类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> Result&#125; 统一返回结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title">ofFailure</span><span class="hljs-params">(ResultCode resultCode)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Result.of(resultCode);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>以上<code>Result</code>类需要配和<code>ResultCode</code>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">ResultCode</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 成功</span><br><span class="hljs-comment">     */</span><br>    SUCCESS(<span class="hljs-number">100000</span>, <span class="hljs-string">&quot;成功&quot;</span>),<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 内部异常</span><br><span class="hljs-comment">     */</span><br>    INNER_EXCEPTION(<span class="hljs-number">500000</span>, <span class="hljs-string">&quot;内部异常&quot;</span>),<br><br>    <span class="hljs-meta">@Getter</span><br>    <span class="hljs-keyword">private</span> String message;<br><br>    <span class="hljs-meta">@Getter</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> code;<br><br>    ResultCode(<span class="hljs-keyword">int</span> code, String message) &#123;<br>        <span class="hljs-keyword">this</span>.code = code;<br>        <span class="hljs-keyword">this</span>.message = message;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="业务异常类"><a href="#业务异常类" class="headerlink" title="业务异常类"></a>业务异常类</h3><p>我们通过自定义<code>BizException</code>类，将业务代码中出现的异常通过该类统一的抛出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EqualsAndHashCode(callSuper = true)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BizException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RuntimeException</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer code;<br>    <span class="hljs-keyword">private</span> String message;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">BizException</span><span class="hljs-params">(Integer code, String message)</span></span>&#123;<br>        <span class="hljs-keyword">super</span>(message);<br>        <span class="hljs-keyword">this</span>.code = code;<br>        <span class="hljs-keyword">this</span>.message = message;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">BizException</span><span class="hljs-params">(ResultCode resultCode)</span></span>&#123;<br>        <span class="hljs-keyword">super</span>(resultCode.getMessage());<br>        <span class="hljs-keyword">this</span>.code = resultCode.getCode();<br>        <span class="hljs-keyword">this</span>.message = resultCode.getMessage();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="全局异常处理"><a href="#全局异常处理" class="headerlink" title="全局异常处理"></a>全局异常处理</h3><p>SpringBoot中有一个<code>ControllerAdvice</code>的注解，使用该注解表示开启了全局异常的捕获，我们只需在自定义一个方法使用<code>ExceptionHandler</code>注解然后定义捕获异常的类型即可对这些捕获的异常进行统一的处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GlobalExceptionHandler</span> </span>&#123;<br><br>    <span class="hljs-meta">@ExceptionHandler(value = Exception.class)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">exceptionHandler</span><span class="hljs-params">(Exception e)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> BizException) &#123;<br>            BizException bizException = (BizException) e;<br>            log.error(<span class="hljs-string">&quot;[业务异常 &#123;0&#125;]&quot;</span>, e);<br>            <span class="hljs-keyword">return</span> Result.of(bizException.getCode(), bizException.getMessage(), <span class="hljs-keyword">null</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            log.error(<span class="hljs-string">&quot;[非业务异常 &#123;0&#125;]&quot;</span>, e);<br>            <span class="hljs-keyword">return</span> Result.of(ResultCode.INNER_EXCEPTION);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>exceptionHandler</code>该方法通过获取当前异常类，如果是我们定义的<code>BizException</code>，那么就是业务异常，否则就是非业务异常了。</p><h3 id="业务场景改进-demo"><a href="#业务场景改进-demo" class="headerlink" title="业务场景改进(demo)"></a>业务场景改进(demo)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/find/&#123;addressId&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Result&lt;AddressDO&gt; <span class="hljs-title">findAddressById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;addressId&quot;)</span> <span class="hljs-keyword">long</span> addressId)</span> </span>&#123;<br>    AddressDO address = addressService.findAddress(addressId);<br>    <span class="hljs-keyword">if</span>(addressId == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BizException(ResultCode.INNER_EXCEPTION);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> Result.ofSuccess(address);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里改进了之前的业务场景，假定查询id为1的地址时会抛出异常<code>BizException</code>，这时代码就进入了全局异常处理类中了(统一的去处理异常)。</p>]]></content>
    
    
    <summary type="html">电商平台-common模块</summary>
    
    
    
    <category term="基于Spring Alibaba Cloud的电商平台" scheme="https://blog.pyjava.com/categories/%E5%9F%BA%E4%BA%8ESpring-Alibaba-Cloud%E7%9A%84%E7%94%B5%E5%95%86%E5%B9%B3%E5%8F%B0/"/>
    
    
    <category term="project" scheme="https://blog.pyjava.com/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>电商平台-表结构</title>
    <link href="https://blog.pyjava.com/2021/04/12/project/%E7%94%B5%E5%95%86%E5%B9%B3%E5%8F%B0/01_%E8%A1%A8%E7%BB%93%E6%9E%84/"/>
    <id>https://blog.pyjava.com/2021/04/12/project/%E7%94%B5%E5%95%86%E5%B9%B3%E5%8F%B0/01_%E8%A1%A8%E7%BB%93%E6%9E%84/</id>
    <published>2021-04-12T04:51:00.000Z</published>
    <updated>2021-04-21T05:03:48.189Z</updated>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p><strong>项目地址</strong> <a href="https://github.com/sandorZHAO/shop">https://github.com/sandorZHAO/shop</a></p>          </div><h2 id="数据库划分"><a href="#数据库划分" class="headerlink" title="数据库划分"></a>数据库划分</h2><p>按照介绍中的分类(用户,优惠券,商品,订单)做数据库区分,每一个模块分类对应一个独立数据库</p><h2 id="用户服务数据库shop-user"><a href="#用户服务数据库shop-user" class="headerlink" title="用户服务数据库shop_user"></a>用户服务数据库shop_user</h2><ol><li>用户表</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `<span class="hljs-keyword">user</span>` (<br>    `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">11</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>    `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;昵称&#x27;</span>,<br>    `password` <span class="hljs-type">varchar</span>(<span class="hljs-number">124</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;密码&#x27;</span>,<br>    `avatar` <span class="hljs-type">varchar</span>(<span class="hljs-number">524</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;头像&#x27;</span>,<br>    `slogan` <span class="hljs-type">varchar</span>(<span class="hljs-number">524</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;用户签名&#x27;</span>,<br>    `sex` tinyint(<span class="hljs-number">2</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;1&#x27;</span> COMMENT <span class="hljs-string">&#x27;0表示女，1表示男&#x27;</span>,<br>    `points` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;积分&#x27;</span>,<br>    `create_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    `email` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;邮箱&#x27;</span>,<br>    `salt` <span class="hljs-type">varchar</span>(<span class="hljs-number">12</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;盐，用于个人敏感信息处理&#x27;</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>    <span class="hljs-keyword">UNIQUE</span> KEY `email_idx` (`email`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br></code></pre></td></tr></table></figure><ol><li>收货地址表</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `address` (<br>    `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>    `user_id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;用户id&#x27;</span>,<br>    `default_status` <span class="hljs-type">int</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;是否默认收货地址：0-&gt;否；1-&gt;是&#x27;</span>,<br>    `receive_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;收发货人姓名&#x27;</span>,<br>    `phone` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;收货人电话&#x27;</span>,<br>    `province` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;省/直辖市&#x27;</span>,<br>    `city` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;市&#x27;</span>,<br>    `region` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;区&#x27;</span>,<br>    `detail_address` <span class="hljs-type">varchar</span>(<span class="hljs-number">200</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;详细地址&#x27;</span>,<br>    `create_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">39</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4 COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;电商-公司收发货地址表&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="优惠券服务数据库shop-product"><a href="#优惠券服务数据库shop-product" class="headerlink" title="优惠券服务数据库shop_product"></a>优惠券服务数据库shop_product</h2><h2 id="商品服务数据库shop-coupon"><a href="#商品服务数据库shop-coupon" class="headerlink" title="商品服务数据库shop_coupon"></a>商品服务数据库shop_coupon</h2><h2 id="订单服务数据库shop-order"><a href="#订单服务数据库shop-order" class="headerlink" title="订单服务数据库shop_order"></a>订单服务数据库shop_order</h2><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/sandorZHAO/shop">https://github.com/sandorZHAO/shop</a></p>]]></content>
    
    
    <summary type="html">电商平台表结构</summary>
    
    
    
    <category term="基于Spring Alibaba Cloud的电商平台" scheme="https://blog.pyjava.com/categories/%E5%9F%BA%E4%BA%8ESpring-Alibaba-Cloud%E7%9A%84%E7%94%B5%E5%95%86%E5%B9%B3%E5%8F%B0/"/>
    
    
    <category term="project" scheme="https://blog.pyjava.com/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>电商平台-介绍</title>
    <link href="https://blog.pyjava.com/2021/04/12/project/%E7%94%B5%E5%95%86%E5%B9%B3%E5%8F%B0/00_%E4%BB%8B%E7%BB%8D/"/>
    <id>https://blog.pyjava.com/2021/04/12/project/%E7%94%B5%E5%95%86%E5%B9%B3%E5%8F%B0/00_%E4%BB%8B%E7%BB%8D/</id>
    <published>2021-04-12T04:50:00.000Z</published>
    <updated>2021-04-21T05:00:55.354Z</updated>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p><strong>项目地址</strong> <a href="https://github.com/sandorZHAO/shop">https://github.com/sandorZHAO/shop</a></p>          </div><h2 id="项目名称"><a href="#项目名称" class="headerlink" title="项目名称"></a>项目名称</h2><p>基于Spring Alibaba Cloud的电商平台的设计与实现</p><h2 id="需求分析和规划"><a href="#需求分析和规划" class="headerlink" title="需求分析和规划"></a>需求分析和规划</h2><h3 id="用户服务模块"><a href="#用户服务模块" class="headerlink" title="用户服务模块"></a>用户服务模块</h3><ol><li>用户注册/登录</li><li>头像和信息维护</li><li>收获地址模块</li></ol><h3 id="优惠券服务模块"><a href="#优惠券服务模块" class="headerlink" title="优惠券服务模块"></a>优惠券服务模块</h3><ol><li>展示和领券</li><li>使用和释放</li></ol><h3 id="商品服务模块"><a href="#商品服务模块" class="headerlink" title="商品服务模块"></a>商品服务模块</h3><ol><li>商品基本展示</li><li>库存扣减回收</li><li>购物车模块</li></ol><h3 id="订单服务模块"><a href="#订单服务模块" class="headerlink" title="订单服务模块"></a>订单服务模块</h3><ol><li>下单支付</li><li>订单基本操作</li></ol><h2 id="功能架构图"><a href="#功能架构图" class="headerlink" title="功能架构图"></a>功能架构图</h2><h2 id="技术栈介绍"><a href="#技术栈介绍" class="headerlink" title="技术栈介绍"></a>技术栈介绍</h2><ol><li>Spring Cloud Alibaba</li><li>RabbitMQ</li><li>Redis</li><li>Linux</li><li>Docker</li><li>Mybatis</li><li>Swagger</li><li>Rancher</li></ol><h3 id="为什么选择SpringCloudAlibaba"><a href="#为什么选择SpringCloudAlibaba" class="headerlink" title="为什么选择SpringCloudAlibaba"></a>为什么选择SpringCloudAlibaba</h3><ul><li><p>Spring Cloud</p><p>  官网: <a href="http://spring.io/projects/spring-cloud">http://spring.io/projects/spring-cloud</a><br>  通信方式: http restful<br>  注册中心: eureka<br>  配置中心: config<br>  断路器: hystrix<br>  网关: zuul/gateway<br>  分布式追踪系统: sleuth+zipkin</p></li><li><p>Spring Alibaba Cloud</p><p>  官网: <a href="http://spring.io/projects/spring-cloud-alibaba">http://spring.io/projects/spring-cloud-alibaba</a><br>  通信方式: http restful<br>  注册中心: Nacos<br>  服务限流降级: Sentinel<br>  分布配置中心: Nacos<br>  服务网关:  SpringCloud Gateway<br>  服务之间调用: Feign,Ribbon<br>  分布式追踪系统: sleuth+zipkin</p></li></ul><p>SpringCloud很多组件基于第三方整合,目前有组件不更新了(zuul,eureka,hystrix)<br>AlibabaCloud提供了一站式服务解决办法,可以与SpringCloud整合</p><ul><li><p>版本说明</p><p>  Spring Boot 2.3.3.RELEASE<br>  Spring Cloud Hoxton.SR8 版本<br>  AlibabaCloud2.2.1.RELEASE版本</p></li></ul><h2 id="模块拆分"><a href="#模块拆分" class="headerlink" title="模块拆分"></a>模块拆分</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>shop-common<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>shop-product-service<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>shop-user-service<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>shop-order-service<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>shop-coupon-service<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>shop-gateway<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">电商平台介绍(技术栈及需求分析)</summary>
    
    
    
    <category term="基于Spring Alibaba Cloud的电商平台" scheme="https://blog.pyjava.com/categories/%E5%9F%BA%E4%BA%8ESpring-Alibaba-Cloud%E7%9A%84%E7%94%B5%E5%95%86%E5%B9%B3%E5%8F%B0/"/>
    
    
    <category term="project" scheme="https://blog.pyjava.com/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>Java String</title>
    <link href="https://blog.pyjava.com/2021/04/12/java/02_core_class/01_String/"/>
    <id>https://blog.pyjava.com/2021/04/12/java/02_core_class/01_String/</id>
    <published>2021-04-11T16:10:00.000Z</published>
    <updated>2021-04-28T17:05:19.180Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h2><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>在Unicode出现之前,已经有许多不同的标准：美国的ASCII，西欧的ISO 8859-1、俄国的KOI-8、中国的GB118030和BIG-5等。这样就产生了两个问题：</p><ol><li>对于任何给定的代码值，在不同的编码方案下有可能对应不同的字母</li><li>采用大写符集的语言其编码长度有可能不同</li></ol><p>不可避免地，Unicode超过了16位的可容纳大小（65536）。</p><h2 id="Java的解决办法"><a href="#Java的解决办法" class="headerlink" title="Java的解决办法"></a>Java的解决办法</h2><p>从JDK 5.0开始。代码点是指与一个编码集的某个字符对应的代码值。在Unicode标准中，代码点采用十六进制书写，并且加上前缀U+，例如U+0041就是字母A的代码点。Unicode的代码点可以分为17个代码级别，第一个代码级别称为<em>基本的多语言级别</em>，代码点从U+0000到U+FFFF，其中包括了经典的Unicode代码，其余的16个附加级别，从代码点从U+10000到U+10FFFF，其中包括了一些辅助字符。</p><p>UTF-16编码采用不同长度的编码表示所有Unicode代码点。在基本的多语言级别中，每个字符使用16位表示，通常被称为代码单元；而辅助字符采用一对连续的代码单元进行编码。这样够成的编码值一定落入基本的多语言级别中空闲的2048字节内，通常被称为替代区域。</p><h2 id="Java-String"><a href="#Java-String" class="headerlink" title="Java String"></a>Java String</h2><p>Java 字符串是Unicode字符序列。Java没有内置的字符串类型，而是在标准Java类中提供了一个预定义的类String。每个用双括号括起来的字符串都是String类的一个实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">String a = <span class="hljs-string">&quot;hello&quot;</span>;<br>String b = <span class="hljs-string">&quot;world&quot;</span>;<br></code></pre></td></tr></table></figure><div class="note note-light">            <p>Java 允许使用+链接两个字符串<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">String greeting = a + <span class="hljs-string">&quot; &quot;</span> + b;<br></code></pre></td></tr></table></figure></p>          </div><h2 id="不可更改"><a href="#不可更改" class="headerlink" title="不可更改"></a>不可更改</h2><h3 id="为什么String的内容不可更改"><a href="#为什么String的内容不可更改" class="headerlink" title="为什么String的内容不可更改"></a>为什么String的内容不可更改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// String源码</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">String</span></span><br><span class="hljs-class">    <span class="hljs-keyword">implements</span> <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span>, <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">String</span>&gt;, <span class="hljs-title">CharSequence</span> </span>&#123;<br>    <span class="hljs-comment">/** The value is used for character storage. */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">char</span> value[];<br><br>    <span class="hljs-comment">/** Cache the hash code for the string */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> hash; <span class="hljs-comment">// Default to 0</span><br><br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><ol><li><code>String</code>被修饰成final,这保证了它不能被继承，确保它们不会再子类中改变语义</li><li><code>value</code>数组被修饰成<code>private static</code>,保证了存储的数据不可更改</li></ol><h3 id="为什么要保证String的不可变性"><a href="#为什么要保证String的不可变性" class="headerlink" title="为什么要保证String的不可变性"></a>为什么要保证String的不可变性</h3><p>只有当字符串不可变,字符串池才可能实现.字符串池的实现可以再运行时节约很多heap空间,因为不同的字符串变量都指向池中的同一个字符串.</p><p>如果字符串可变的话</p><ol><li><code>String interning</code>将不能实现:变量如果改变了他的值,那么其他指向这个值的变量的值也会一起改变</li><li>安全性问题:连接名,密码等都需要使用字符串,使得黑客可以改变字符串指向的对象的值</li></ol><h3 id="不可更改的好处"><a href="#不可更改的好处" class="headerlink" title="不可更改的好处"></a>不可更改的好处</h3><ol><li>如果可变复用将变得不稳定。复用可以节约内存</li><li>hashcode被缓存,没必要重复结算</li><li>如果定义为final 也就是String的引用和内容都会稳定不可变</li></ol><h2 id="intern"><a href="#intern" class="headerlink" title="intern"></a>intern</h2><p>上面提到了 <code>intern</code>,这个是指什么呢?</p><p><code>String.intern()</code>是一个Native方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> String <span class="hljs-title">intern</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><p>它的作用是:如果字符常量池中已经包含一个等于此String对象的字符串,则返回常量池中字符串的引用,否则,将新的字符串放入常量池,并返回新字符串的引用。</p><p>因此,对于任意两个字符串s和t，<code>s.intern()==t.intern()</code>是true当且仅当<code>s.equals(t)== true</code></p><h2 id="String-String-string-的构造方法是如何工作的"><a href="#String-String-string-的构造方法是如何工作的" class="headerlink" title="String(String string)的构造方法是如何工作的"></a>String(String string)的构造方法是如何工作的</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">String</span><span class="hljs-params">(String original)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.value = original.value;<br>    <span class="hljs-keyword">this</span>.hash = original.hash;<br>&#125;<br></code></pre></td></tr></table></figure><p>用String去new String构造新的对象是，确实会产生新的对象，而且新的value和hash值都和原String对象一致。<br>当然String还是有其他构造方法，都会去new char[]</p><h2 id="一个线程中内容为“adc”的String对象，存储的char-是否是同一个，char-数组是否一定在字符串常量池中"><a href="#一个线程中内容为“adc”的String对象，存储的char-是否是同一个，char-数组是否一定在字符串常量池中" class="headerlink" title="一个线程中内容为“adc”的String对象，存储的char[]是否是同一个，char[]数组是否一定在字符串常量池中?"></a>一个线程中内容为“adc”的String对象，存储的char[]是否是同一个，char[]数组是否一定在字符串常量池中?</h2><p>由String产生的String里面的char[]是同一个，其他方式产生的都是新的。“”包裹产生的字符串会在常量池中，其他的都是正常的存在堆中。所以堆中可以有n份“adb”的串，常量池中的“adc”永远只有一个，可以被多个引用所指向。</p><h2 id="string的-编译器是如何处理的？"><a href="#string的-编译器是如何处理的？" class="headerlink" title="string的+编译器是如何处理的？"></a>string的+编译器是如何处理的？</h2><p>第一种情况:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">String a = <span class="hljs-string">&quot;a&quot;</span>+<span class="hljs-string">&quot;b&quot;</span>+<span class="hljs-string">&quot;c&quot;</span>;<br></code></pre></td></tr></table></figure><p>javac会直接合并所有的””，形成utf8 结构体，保存下来，结构体中有个2byte的length字段记录字面量（””这种东西官方称为字面量）在类运行中会把结构体的东西加载到内存的字符串常量池中（具体加载细节后续再聊）</p><p>第二种情况:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">String a = <span class="hljs-string">&quot;a&quot;</span>;<br>String b = a + <span class="hljs-string">&quot;b&quot;</span>;<br></code></pre></td></tr></table></figure><p>这里会new StringBuilder 调用append方法，最后toString。</p><h2 id="String-StringBuffer-StringBuilder"><a href="#String-StringBuffer-StringBuilder" class="headerlink" title="String,StringBuffer,StringBuilder"></a>String,StringBuffer,StringBuilder</h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">String</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span>,<span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">String</span>&gt;, <span class="hljs-title">CharSequence</span></span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">char</span> value[];<br>    ....<br>&#125;<br></code></pre></td></tr></table></figure><p>String 字符串不可继承，不可变</p><p>如果要修改String的值的话，效率非常低下</p><h3 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h3><p>继承<code>AbstractStringBuilder</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractStringBuilder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Appendable</span>, <span class="hljs-title">CharSequence</span></span>&#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The value is used for character storage.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">char</span>[] value;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The count is the number of characters used.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">int</span> count;<br><br>AbstractStringBuilder(<span class="hljs-keyword">int</span> capacity) &#123;<br>    value = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[capacity];<br>&#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> AbstractStringBuilder <span class="hljs-title">append</span><span class="hljs-params">(String str)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (str == <span class="hljs-keyword">null</span>)<br>        <span class="hljs-keyword">return</span> appendNull(); <span class="hljs-comment">// 如果是null的话，就添加字符串&quot;null&quot;</span><br>    <span class="hljs-keyword">int</span> len = str.length();<br>    ensureCapacityInternal(count + len);<br>    str.getChars(<span class="hljs-number">0</span>, len, value, count); <span class="hljs-comment">// 字符数组的拷贝</span><br>    count += len;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在StringBuffer的一些方法中是由synchronized关键字修饰的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// StringBuffer的append实现</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> StringBuffer <span class="hljs-title">append</span><span class="hljs-params">(String str)</span> </span>&#123;<br>    toStringCache = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">super</span>.append(str);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>&#125;<br><span class="hljs-comment">// StringBuffer的toString实现</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (toStringCache == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-comment">// 使用了缓存,这在java并发编程实战中也提到了相似的例子</span><br>        toStringCache = Arrays.copyOfRange(value, <span class="hljs-number">0</span>, count);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String(toStringCache, <span class="hljs-keyword">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h3><p>继承<code>AbstractStringBuilder</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractStringBuilder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Appendable</span>, <span class="hljs-title">CharSequence</span></span>&#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* The value is used for character storage.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">char</span>[] value;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* The count is the number of characters used.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">int</span> count;<br><br>AbstractStringBuilder(<span class="hljs-keyword">int</span> capacity) &#123;<br>    value = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[capacity];<br>&#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> AbstractStringBuilder <span class="hljs-title">append</span><span class="hljs-params">(String str)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (str == <span class="hljs-keyword">null</span>)<br>        <span class="hljs-keyword">return</span> appendNull(); <span class="hljs-comment">// 如果是null的话，就添加字符串&quot;null&quot;</span><br>    <span class="hljs-keyword">int</span> len = str.length();<br>    ensureCapacityInternal(count + len);<br>    str.getChars(<span class="hljs-number">0</span>, len, value, count); <span class="hljs-comment">// 字符数组的拷贝</span><br>    count += len;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在StringBuidler没有synchronized关键字修饰的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// StringBuidler的append实现</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> StringBuffer <span class="hljs-title">append</span><span class="hljs-params">(String str)</span> </span>&#123;<br>    toStringCache = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">super</span>.append(str);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>&#125;<br><span class="hljs-comment">// StringBuidler的toString实现</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// Create a copy, don&#x27;t share the array</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String(value, <span class="hljs-number">0</span>, count);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">java String</summary>
    
    
    
    
    <category term="Java" scheme="https://blog.pyjava.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java面向对象</title>
    <link href="https://blog.pyjava.com/2021/04/07/java/01_object/00_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>https://blog.pyjava.com/2021/04/07/java/01_object/00_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</id>
    <published>2021-04-07T10:10:05.000Z</published>
    <updated>2021-04-22T09:56:32.120Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面向对象思想"><a href="#面向对象思想" class="headerlink" title="面向对象思想"></a>面向对象思想</h2><p>我们将问题空间中的元素及其在解空间中的表示称为对象。对象具有状态、行为和标识,即每一个对象都可以拥有内部数据（给出该对象的状态）和方法（对象产生的行为），并且每个对象都可以唯一地与其他对象区分开来（对象的身份标识），即每个对象在内存中都有一个唯一的地址。</p><p>程序可以通过添加新类型的对象使自身适用于某个特定问题，当你在阅读描述解决方案的代码时，也是在阅读问题的表述。</p><ol><li>万物皆对象；</li><li>程序是对象的结合，它们通过发送消息来告知彼此所要做的；</li><li>每个对象都有自己的由其他对象所构成的存储；</li><li>每个对象都拥有其类型；</li><li>某一特定类型的所有对象都可以接受同样的消息。</li></ol><h2 id="面向过程与面向对象的优缺点"><a href="#面向过程与面向对象的优缺点" class="headerlink" title="面向过程与面向对象的优缺点"></a>面向过程与面向对象的优缺点</h2><ul><li>性能</li><li>维护、复用、扩展</li></ul><h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h2><p>参考现实世界中”人”这一概念,我们可以把人成为类,而具体的某一个人是对象实例.</p><p>我们就可以按照这样子的概念进行Java代码编写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span></span>&#123;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> age;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        Cat pikaqiu = <span class="hljs-keyword">new</span> Cat();<br>        pikaqiu.name = <span class="hljs-string">&quot;皮卡丘&quot;</span>;<br>        pikaqiu.age = <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span></span>&#123;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">crawl</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我叫&quot;</span><span class="hljs-keyword">this</span>.name + <span class="hljs-string">&quot;,我在爬&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        Person zhangsan = <span class="hljs-keyword">new</span> Person();<br>        zhangsan.name = <span class="hljs-string">&quot;皮卡丘&quot;</span>;<br>        zhangsan.age = <span class="hljs-number">1</span>;<br>        zhangsan.crawl();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>构造方法是一种特殊的方法，它是一个<strong>与类同名</strong>的方法。对象的创建就是通过构造方法来完成，其功能主要是完成对象的初始化。当类实例化一个对象时会自动调用构造方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span></span>&#123;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Cat</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.name = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">this</span>.age = <span class="hljs-number">1</span>;<br>    &#125; <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Cat</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125; <br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">crawl</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我叫&quot;</span><span class="hljs-keyword">this</span>.name + <span class="hljs-string">&quot;,我在爬&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><div class="note note-info">            <ol><li>没有返回值,甚至连void也没有</li><li>不能被static、final、synchronized、abstract和native修饰</li><li>类中必定有构造方法，若不写，系统自动添加无参构造方法</li></ol>          </div><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>在创建一个类之后，即使另一个新类与其具有相似的功能，你还是得重新创建一个新类。通过添加和修改这个副本来创建新类就好多了。即继承便可以达到这样的效果。</p><p>在现实世界中猫有吃这一个行为,而英短也因此有吃这样一个行为.</p><p>可以通过编写一个<code>BritishShorthairCat</code>类,<code>Cat</code>类都具有<code>eat</code>方法,也可以通过以下方法实现.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;吃!!!&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BritishShorthairCat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Cat</span></span>&#123;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Cat</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.name = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">this</span>.age = <span class="hljs-number">1</span>;<br>    &#125; <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Cat</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125; <br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">crawl</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我叫&quot;</span><span class="hljs-keyword">this</span>.name + <span class="hljs-string">&quot;,我在爬&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过这样的方法人也具有了动物的吃的方法.</p><ol><li>单根继承（多继承，过于复杂，难于维护）</li><li>类没有多继承， 接口有多继承</li><li>子类继承父类，可以得到父类的全部属性和方法，但不见得可以直接访问</li><li>所有类的父类是 Object </li></ol><h3 id="继承的优点"><a href="#继承的优点" class="headerlink" title="继承的优点"></a>继承的优点</h3><ol><li>代码共享</li><li>提高代码的重用性</li><li>提高代码的可扩展性</li><li>提高产品或者项目的开放性</li></ol><h3 id="继承的缺点"><a href="#继承的缺点" class="headerlink" title="继承的缺点"></a>继承的缺点</h3><ol><li>继承是侵入性的。</li><li>继承代码的灵活性</li><li>增强耦合性</li></ol><h3 id="单继承"><a href="#单继承" class="headerlink" title="单继承"></a>单继承</h3><p>为了降低复杂性和避免冲突，C类同时继承A类，B类，可能会出现冲突。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">A</span>, <span class="hljs-title">B</span></span><br></code></pre></td></tr></table></figure><p>这样是不允许的</p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>封装是将代码及其处理的数据绑定在一起的一种编程机制，该机制保证了程序和数据都不受外部干扰且不被误用。<br>封装的目的在于保护信息，隐藏对象的属性和实现细节，仅对外公开接口，控制在程序中属性的读和修改的访问级别。</p><p>涉及保留字<code>public</code>,<code>private</code>,<code>protected</code></p><h3 id="封装的优点"><a href="#封装的优点" class="headerlink" title="封装的优点"></a>封装的优点</h3><ol><li>良好的封装能够减少耦合。</li><li>类内部的结构可以自由修改。</li><li>可以对成员变量进行更精确的控制。</li><li>隐藏信息，实现细节。</li></ol><h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><p>这种方法名，但各自的参数不同，称为方法重载（Overload）。</p><p>重载的规则 </p><ol><li>必须具有不同的参数列表。 </li><li>可以有不同的返回类型，只要参数列表不同就可以了。 </li><li>可以有不同的访问修饰符。 </li><li>可以抛出不同的异常。  </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello, world!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello, &quot;</span> + name + <span class="hljs-string">&quot;!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果传入的数据类型（实参）小于方法中声明的形式参数类型（形参），实际数据类型就会提升。</p><p>如果传入的数据类型（实参）大于方法中声明的形式参数类型（形参），需要通过强制类型转化才能传递。</p><p><strong>重载+变长参数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-keyword">float</span> i, Character... args)</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">(Character... args)</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        f(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>);<br>        f(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>);<br>        System.out.println(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><em>为什么java不通过返回值区分重载方法，而是方法名？</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 参考如下代码</span><br><span class="hljs-comment">// 而f函数可能有很多种实现方式，编译器并不能知道你究竟要调哪一个</span><br>f();<br></code></pre></td></tr></table></figure><h2 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h2><p>在继承关系中，子类如果定义了一个与父类方法签名完全相同的方法，被称为重写（Override）。</p><p>方法名、参数、返回值相同。</p><p>子类方法不能缩小父类方法的访问权限。</p><p>子类方法不能抛出比父类方法更多的异常(但子类方法可以不抛出异常)。</p><p>存在于父类和子类之间。 方法被定义为 final 不能被重写。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;吃!!!&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BritishShorthairCat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Cat</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;蓝白在吃!!!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>多态是指，针对某个类型的方法调用，其真正执行的方法取决于运行时期实际类型的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Cat a = <span class="hljs-keyword">new</span> BritishShorthairCat();<br>a.eat();<br></code></pre></td></tr></table></figure><p>运行期才能动态决定调用的子类方法。对某个类型调用某个方法，执行的实际方法可能是某个子类的覆写方法。</p><p>所以<code>a.eat()</code>调用的是子类的eat方法.</p><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>回到上面<code>Cat</code>和<code>BritishShorthairCat</code>类的概念,照理说<code>Cat</code>类本身是不该可以实例化的,现实世界猫只是一个抽象的概念,他不该能被实例化形成具体对象.</p><p>所以Java提供了<code>abstract</code>,抽象类.上面的代码我们可以改成如下形式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BritishShorthairCat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Cat</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;蓝白在吃!!!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><div class="note note-warning">            <p><strong>抽象类</strong></p><ol><li>抽象类不能实例化，即不能对其用new运算符</li><li>类中如果有一个或多个abstract方法，则该类必须声明为abstract</li><li>抽象类中的方法不一定都是abstract方法，它还可以包含一个或者多个具体的方法；</li><li>即使一个类中不含抽象方法，它也可以声明为抽象类；</li><li>抽象类中的抽象方法要被使用，必须由子类复写起所有的抽象方法后，建立子类对象调用。</li><li>如果子类只覆盖了部分抽象方法，那么该子类还是一个抽象类。</li><li>不可以与private、final、static共存<br><strong>抽象方法</strong></li><li>抽象方法不能有方法主体</li></ol>          </div><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>接口（英文：Interface），在JAVA编程语言中是一个抽象类型，是抽象方法的集合，接口通常以interface来声明。一个类通过继承接口的方式，从而来继承接口的抽象方法。</p><p>我们可以定义一个<code>Runnable</code>接口去限制继承该接口的所有类必须拥有的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Runnable</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>;<br>&#125;<br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BritishShorthairCat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Runnable</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;蓝白在吃!!!&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;蓝白在吃!!!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="接口、抽象类、类的关系"><a href="#接口、抽象类、类的关系" class="headerlink" title="接口、抽象类、类的关系"></a>接口、抽象类、类的关系</h3><ol><li><p>抽象类是对一种事物的抽象，即对类抽象，而接口是对行为的抽象。飞机和鸟是不同类的事物，但是它们都有一个共性，就是都会飞。那么在实现飞机和鸟的时候可以共同实现一个<code>Flyable</code>接口,因为这个飞行这个概念不好通过类去表现。</p></li><li><p>设计层面不同，抽象类作为很多子类的父类，它是一种模板式设计。而接口是一种行为规范，它是一种辐射式设计。</p></li></ol><div class="note note-info">            <p>Java 为什么是单继承多实现？<br>接口和抽象都可以实现抽象方法，为什么还要设计两个？</p>          </div>]]></content>
    
    
    <summary type="html">Java面向对象</summary>
    
    
    
    
    <category term="Java" scheme="https://blog.pyjava.com/tags/Java/"/>
    
  </entry>
  
</feed>
