<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zhaojj&#39;s blog</title>
  
  
  <link href="https://blog.pyjava.com/atom.xml" rel="self"/>
  
  <link href="https://blog.pyjava.com/"/>
  <updated>2021-05-10T17:35:06.343Z</updated>
  <id>https://blog.pyjava.com/</id>
  
  <author>
    <name>zhaojj</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>注解</title>
    <link href="https://blog.pyjava.com/2021/05/11/java/00_base/0A_%E6%B3%A8%E8%A7%A3/"/>
    <id>https://blog.pyjava.com/2021/05/11/java/00_base/0A_%E6%B3%A8%E8%A7%A3/</id>
    <published>2021-05-10T18:15:00.000Z</published>
    <updated>2021-05-10T17:35:06.343Z</updated>
    
    <content type="html"><![CDATA[<p>jdk1.5</p><p>注解本质是一个继承了 Annotation 的特殊接口，其具体实现类是 Java 运行时生成的动态代理类。而我们通过反射获取注解时，返回的是 Java 运行时生成的动态代理对象$Proxy1。通过代理对象调用自定义注解（接口）的方法，会最终调用 AnnotationInvocationHandler 的 invoke 方法。该方法会从 memberValues 这个 Map 中索引出对应的值。而 memberValues 的来源是 Java 常量池。</p><h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><ol><li>@Documented<br> 用于制作文档，不是很重要，忽略便是</li><li>@Target<br> 限定注解使用位置</li><li><p>@Retention<br> 注解的保留策略(SOURCE/CLASS/RUNTIME)</p><ul><li>注解主要被反射读取</li><li>反射只能读取内存中的字节码信息</li><li>RetentionPolicy.CLASS 指的是保留在字节码文件，他在磁盘中。虚拟机将字节码加载进内存后，注解失效</li><li>若想要被反射读取，保留策略中用 RUNTIME，即运行时可读取</li></ul></li><li><p>@Inherited – 是否允许子类继承该注解</p></li></ol><h2 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h2><ol><li>Annotation 型定义为@interface, 所有的 Annotation 会自动继承 java.lang.Annotation 这一接口,并且不能再去继承别的类或是接口.</li><li>参数成员只能用 public 或默认(default) 这两个访问权修饰</li><li>参数成员只能用基本类型 byte、short、char、int、long、float、double、boolean 八种基本数据类型和 String、Enum、Class、annotations 等数据类型，以及这一些类型的数组.</li><li>要获取类方法和字段的注解信息，必须通过 Java 的反射技术来获取 Annotation 对象，因为你除此之外没有别的获取注解对象的方法</li><li>注解也可以没有定义成员</li></ol><h2 id="注解的一般使用方法"><a href="#注解的一般使用方法" class="headerlink" title="注解的一般使用方法"></a>注解的一般使用方法</h2><ol><li>定义注解</li><li>使用注解</li><li>读取注解</li></ol>]]></content>
    
    
    <summary type="html">注解</summary>
    
    
    
    
    <category term="Java" scheme="https://blog.pyjava.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>异常</title>
    <link href="https://blog.pyjava.com/2021/05/11/java/00_base/09_%E6%B3%9B%E5%9E%8B/"/>
    <id>https://blog.pyjava.com/2021/05/11/java/00_base/09_%E6%B3%9B%E5%9E%8B/</id>
    <published>2021-05-10T18:00:00.000Z</published>
    <updated>2021-05-10T17:33:07.888Z</updated>
    
    <content type="html"><![CDATA[<p>jdk1.5中引入泛型，允许在定义类、接口时通过一个标识标识类中某个属性的类型或者是某个方法的返回值以及参数类型。</p><p>泛型的本质是为了参数化类型（在不创建新的类型的情况下，通过泛型指定的不同类型来控制形参具体限制的类型），以及提供类型安全性</p><ol><li>强转可能出现下ClassCastException</li><li>编译时检查数据类型，保证数据安全</li><li>使用包装类强转</li><li>子类可以保留，部分保留，擦除泛型</li><li>泛型方法，在方法中出现了泛型的结构，泛型参数与类的泛型参数无关</li><li>泛型在继承方面的体现 G\<A\>和G\<B\>不具有子父类关系 但如果 A\<G\>和B\<G\>就可以</li><li>List\&lt;?> List\&lt;? extend A></li></ol>]]></content>
    
    
    <summary type="html">异常</summary>
    
    
    
    
    <category term="Java" scheme="https://blog.pyjava.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>异常</title>
    <link href="https://blog.pyjava.com/2021/05/11/java/00_base/08_%E5%BC%82%E5%B8%B8/"/>
    <id>https://blog.pyjava.com/2021/05/11/java/00_base/08_%E5%BC%82%E5%B8%B8/</id>
    <published>2021-05-10T17:45:00.000Z</published>
    <updated>2021-05-10T17:36:38.785Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Throwable"><a href="#Throwable" class="headerlink" title="Throwable"></a>Throwable</h2><p>用来标识任何可以作为异常被抛出的类。</p><h2 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h2><h2 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h2><p>编译时异常-受检异常，运行时异常-非受检异常</p><h2 id="异常处理机制"><a href="#异常处理机制" class="headerlink" title="异常处理机制"></a>异常处理机制</h2><ol><li><p>try-catch-finally</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br><br>&#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br><br>&#125;<span class="hljs-keyword">finally</span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><ol><li>有return</li><li>只有try</li><li>try+catch</li><li>try+finally </li></ol><p>如果一个catch子句要捕获一个类型为E的被检查异常，而其相对应的try子句不能抛出E的某种子类型的异常，那么这就是一个编译期错误。但是捕获Exception或Throwable是合法的。</p><p>一个方法可以抛出的被检查异常集合是它所适用的所有类型声明要抛出的被检查异常集合的交集，而不是合集<br>因此，静态类型为Type3的对象上的f方法根本就不能抛出任何被检查异常。<br>可以尝试在Arcane3上的f方法上 抛出<code>CloneNotSupportedException</code>，<code>InterruptedException</code>，全部都报错了<br>总而言之，多继承接口下的方法抛出异常应该是接口异常的交集</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Type1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Type2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Type3</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Type1</span>, <span class="hljs-title">Type2</span> </span>&#123;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Arcane3</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Type3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello world&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Type3 t3 = <span class="hljs-keyword">new</span> Arcane3();<br>        t3.f();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>throws 和 throw</p></li><li><p>finally 用来干什么？</p><p>清理资源：已经打开的文件或者网络连接等等</p></li></ol><h3 id="return和finally"><a href="#return和finally" class="headerlink" title="return和finally"></a>return和finally</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">show1</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">int</span> a = <span class="hljs-number">8</span>/<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;finally模块被执行&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">show2</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">int</span> a = <span class="hljs-number">8</span>/<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;finally模块被执行&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">show3</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span> result = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;finally模块被执行&quot;</span>);<br>            result = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title">show4</span><span class="hljs-params">()</span></span>&#123;<br>        Object obj = <span class="hljs-keyword">new</span> Object();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> obj;<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;finally模块被执行&quot;</span>);<br>            obj = <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> StringBuilder <span class="hljs-title">show5</span><span class="hljs-params">()</span></span>&#123;<br>        StringBuilder s = <span class="hljs-keyword">new</span> StringBuilder(<span class="hljs-string">&quot;Hello&quot;</span>);<br>        <span class="hljs-keyword">try</span><br>        &#123;<br>            <span class="hljs-comment">//doing something</span><br>            s.append(<span class="hljs-string">&quot;Word&quot;</span>);<br>            <span class="hljs-keyword">return</span> s;<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            <span class="hljs-keyword">return</span> s;<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br>            s.append(<span class="hljs-string">&quot;finally&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(show1());<br>        System.out.println(show2());<br>        System.out.println(show3());<br>        System.out.println(show4());<br>        System.out.println(show5());<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// finally模块被执行</span><br><span class="hljs-comment">// 2</span><br><span class="hljs-comment">// finally模块被执行</span><br><span class="hljs-comment">// 0</span><br><span class="hljs-comment">// finally模块被执行</span><br><span class="hljs-comment">// 0</span><br><span class="hljs-comment">// finally模块被执行</span><br><span class="hljs-comment">// java.lang.Object@16d3586</span><br><span class="hljs-comment">// HelloWordfinally</span><br></code></pre></td></tr></table></figure><h3 id="异常缺失"><a href="#异常缺失" class="headerlink" title="异常缺失"></a>异常缺失</h3><h3 id="异常匹配"><a href="#异常匹配" class="headerlink" title="异常匹配"></a>异常匹配</h3><p>异常处理系统会按照代码书写顺序找出最近的处理程序，处理完了之后，就认为异常处理了，不在继续查找。</p><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><p>继承RuntimeException，空参构造，string的构造</p><h2 id="异常链"><a href="#异常链" class="headerlink" title="异常链"></a>异常链</h2><p>在JDK1.4之前，程序员需要自己编写代码来保存原始异常的信息。Throwable的子类在构造器都可以接受一个cause对象作为参数。这个cause就用来标识原始异常，这样通过把原始异常传递给新的异常，使得即使在当前位置创建并抛出了新的异常，也能通过这个异常链追踪到异常最初发生的位置。但是在Throwable的子类中，只有三种三种基本的异常类提供带cause参数的构造器。Error、Exception、RuntimeException。其他异常需要initCause。</p>]]></content>
    
    
    <summary type="html">异常</summary>
    
    
    
    
    <category term="Java" scheme="https://blog.pyjava.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>一些关键字的使用</title>
    <link href="https://blog.pyjava.com/2021/05/11/java/00_base/07_%E4%B8%80%E4%BA%9B%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://blog.pyjava.com/2021/05/11/java/00_base/07_%E4%B8%80%E4%BA%9B%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2021-05-10T17:30:00.000Z</published>
    <updated>2021-05-10T17:31:11.564Z</updated>
    
    <content type="html"><![CDATA[<h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><p>随着类的加载而加载</p><ol><li>导入静态</li><li>属性</li><li>方法</li><li>代码块</li><li>内部类</li></ol><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 并不能认为final,即在编译时可知值。</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> i4 = rand.nextInt(<span class="hljs-number">20</span>);<br><span class="hljs-comment">// 并不能认为final,即无法修改常量的值</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Value v = <span class="hljs-keyword">new</span> Value();<br></code></pre></td></tr></table></figure><ol><li><p>类 </p><p>不可被继承</p></li><li><p>方法</p><p>不可重写，确保在继承中使方法行为保持不变</p><p>早期实现中，使用final即同意编译器将针对该方法的所有调用都转为内嵌调用。当编译器发现一个final方法调用命令时，他会根据自己的判断，跳过插入程序代码这种正常方式而执行方法调用机制，并且以方法体中的实际代码的副本来代替方法调用。</p></li><li><p>属性 </p><p>引用不可变，不能修改参数引用所指向的对象。</p><p><strong>空白final</strong>提供更强大的灵活性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 即可以稍后在构造器中修改i的值，但修改后无法再被修改</span><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> i;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Final</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.i = i;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>类中的final方法都隐式地指定为是final。</p><h2 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h2><ol><li><p>类</p><ol><li>不能实例化</li><li>但是可以有构造器，让子类调用</li></ol></li><li><p>方法</p><ol><li>普通子类必须重写</li><li>只有方法的声明</li><li>普通类不存在抽象方法</li></ol></li></ol><h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br></code></pre></td></tr></table></figure><p>能使得可以访问java/util目录下的所有的类，不能访问java/util目录下的所有类</p>]]></content>
    
    
    <summary type="html">一些关键字的使用</summary>
    
    
    
    
    <category term="Java" scheme="https://blog.pyjava.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>noteFx-目录树管理</title>
    <link href="https://blog.pyjava.com/2021/05/10/project/noteFx/07_%E7%9B%AE%E5%BD%95%E6%A0%91%E7%AE%A1%E7%90%86/"/>
    <id>https://blog.pyjava.com/2021/05/10/project/noteFx/07_%E7%9B%AE%E5%BD%95%E6%A0%91%E7%AE%A1%E7%90%86/</id>
    <published>2021-05-09T17:24:22.000Z</published>
    <updated>2021-05-10T17:27:47.943Z</updated>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p><strong>项目地址</strong> <a href="https://github.com/sandorZHAO/noteFx">https://github.com/sandorZHAO/noteFx</a></p>          </div><h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><ol><li>打开文件夹后展示文件夹下所有文件(文件和文件夹)</li><li>监听目标文件夹下的新增删除等动作,并且更新目录树</li></ol><h2 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h2><ol><li><code>TreeView</code></li><li><code>DirectoryChooser</code></li><li>WatchService监听</li></ol><h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><h3 id="打开文件夹-并获取相关数据"><a href="#打开文件夹-并获取相关数据" class="headerlink" title="打开文件夹,并获取相关数据"></a>打开文件夹,并获取相关数据</h3><ol><li><p>首先使用<code>DirectoryChooser</code>做一个简单的打开文件夹功能,这样就可以获取<code>目标文件夹</code>的<code>File</code>对象</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">DirectoryChooser chooser = <span class="hljs-keyword">new</span> DirectoryChooser();<br>File dir = chooser.showDialog(Main.get());<br><span class="hljs-keyword">if</span>(dir == <span class="hljs-keyword">null</span>)&#123;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>需要对<code>目标文件夹</code>进行遍历,构建<code>文件树对象</code></p><ul><li><p><code>文件树对象</code></p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileTreeNode</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">FileTreeNode</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String name;<br>    <span class="hljs-keyword">private</span> Boolean isExpanded;<br>    <span class="hljs-keyword">private</span> File file;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;FileTreeNode&gt; children;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">FileTreeNode</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.isExpanded = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">this</span>.children = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-comment">// get set 省略</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(FileTreeNode o)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.getName().compareToIgnoreCase(o.getName());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>遍历文件夹构建<code>文件树对象</code> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">iterateFiles</span><span class="hljs-params">(FileTreeNode fileTreeNode)</span> </span>&#123;<br>    File file = fileTreeNode.getFile();<br><br>    <span class="hljs-keyword">if</span> (file.isDirectory()) &#123;<br>        File[] files = file.listFiles();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == files || files.length &lt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (File fi : files) &#123;<br>            FileTreeNode fti = <span class="hljs-keyword">new</span> FileTreeNode(fi.getName());<br>            fti.setExpanded(<span class="hljs-keyword">false</span>);<br>            fti.setFile(fi);<br>            fileTreeNode.getChildren().add(fti);<br>            iterateFiles(fti);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        FileTreeNode fti = <span class="hljs-keyword">new</span> FileTreeNode(file.getName());<br>        fti.setExpanded(<span class="hljs-keyword">false</span>);<br>        fti.setFile(file);<br>        fileTreeNode.getChildren().add(fti);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>构建<code>TreeView</code></p><ul><li><p>首先视图中拥有一个<code>TreeView</code>节点</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">TreeView</span> <span class="hljs-attr">fx:id</span>=<span class="hljs-string">&quot;treeView&quot;</span> <span class="hljs-attr">SplitPane.resizableWithParent</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">TreeView</span>&gt;</span><br></code></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FXML</span><br><span class="hljs-keyword">public</span> TreeView&lt;FileTreeNode&gt; treeView;<br></code></pre></td></tr></table></figure></li><li><p>根据<code>文件树对象</code>构建<code>TreeView</code>树</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildTree</span><span class="hljs-params">(FileTreeNode fileTreeNode, TreeItem&lt;FileTreeNode&gt; rootItem)</span> </span>&#123;<br>    List&lt;FileTreeNode&gt; children = fileTreeNode.getChildren();<br>    <span class="hljs-keyword">if</span> (children == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    Consumer&lt;FileTreeNode&gt; consumer = fti -&gt; &#123;<br>        File fi = fti.getFile();<br>        TreeItem&lt;FileTreeNode&gt; item = <span class="hljs-keyword">new</span> TreeItem&lt;&gt;(fti);<br>        <span class="hljs-keyword">if</span> (fi.isDirectory()) &#123;<br>            ImageView iv = <span class="hljs-keyword">new</span> ImageView(FOLDER_ICON);<br>            iv.setSmooth(<span class="hljs-keyword">true</span>);<br>            iv.setViewport(<span class="hljs-keyword">new</span> Rectangle2D(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>));<br>            item.setGraphic(iv);<br>            item.setExpanded(fti.getExpanded());<br>            rootItem.getChildren().add(item);<br>            buildTree(fti, item);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            item.setGraphic(<span class="hljs-keyword">new</span> ImageView(FILE_ICON));<br>            rootItem.getChildren().add(item);<br>        &#125;<br>    &#125;;<br>    children.stream().filter(f -&gt; !f.getFile().isHidden() &amp;&amp; f.getFile().isDirectory()).sorted().forEach(consumer);<br>    children.stream().filter(f -&gt; !f.getFile().isHidden() &amp;&amp; f.getFile().isFile()).sorted().forEach(consumer);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>构建完成后只需要向<code>treeView</code>中挂在就完成展示了</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">fileTreeNode = <span class="hljs-keyword">new</span> FileTreeNode(dir.getName());<br>fileTreeNode.setExpanded(<span class="hljs-keyword">true</span>);<br>fileTreeNode.setFile(dir);<br>iterateFiles(fileTreeNode);<br><span class="hljs-comment">// 设置图标</span><br>ImageView iv = <span class="hljs-keyword">new</span> ImageView(FOLDER_ICON);<br>iv.setSmooth(<span class="hljs-keyword">true</span>);<br>iv.setViewport(<span class="hljs-keyword">new</span> Rectangle2D(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>));<br><span class="hljs-comment">// 根节点</span><br>TreeItem&lt;FileTreeNode&gt; rootTree = <span class="hljs-keyword">new</span> TreeItem&lt;&gt;(fileTreeNode, iv);<br><span class="hljs-comment">// 在根节点上挂在其子节点</span><br>buildTree(fileTreeNode, rootTree);<br>treeView.setRoot(rootTree);<br>rootTree.setExpanded(<span class="hljs-keyword">true</span>);<br></code></pre></td></tr></table></figure></li></ul></li></ol><h3 id="监听目标文件夹"><a href="#监听目标文件夹" class="headerlink" title="监听目标文件夹"></a>监听目标文件夹</h3><p>这里本项目使用了<code>WatchService</code>.在我Java编程学习过程中,真的没有接触到这个内容,也算是完善了知识体系了.</p><p>在本项目中<code>WatchService</code>的难点在于</p><ol><li>如何使用线程池管理</li><li>如何监听子目录</li></ol><h4 id="如何使用线程池管理"><a href="#如何使用线程池管理" class="headerlink" title="如何使用线程池管理"></a>如何使用线程池管理</h4><p>本项目功能在于打开目录时,只会存在一个目录树,参考<code>IDEA</code>,所以这里只需要一个单个线程的线程池,代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ExecutorService FILE_MONITOR_POOL;<br><span class="hljs-keyword">static</span>&#123;<br>    FILE_MONITOR_POOL = Executors.newSingleThreadExecutor(r -&gt; <span class="hljs-keyword">new</span> Thread(r, <span class="hljs-string">&quot;file-monitor-thread&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="如何监听子目录"><a href="#如何监听子目录" class="headerlink" title="如何监听子目录"></a>如何监听子目录</h4><p>百度搜索了很久网上并没也提到如何监听子目录的案例,不过有监听单个文件夹下文件操作的.所以使用的方法就是遍历<code>目标文件夹</code>下所有文件路径,将其加入监听中.</p><p>文件监听器代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileMonitor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> FileMonitor monitor;<br>    <span class="hljs-keyword">private</span> WatchService watchService;<br>    <span class="hljs-keyword">private</span> Future&lt;?&gt; future;<br>    <span class="hljs-keyword">private</span> MainController mainController;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">FileMonitor</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            watchService = FileSystems.getDefault().newWatchService();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                WatchKey watchKey = watchService.take();<br>                List&lt;WatchEvent&lt;?&gt;&gt; watchEvents = watchKey.pollEvents();<br>                <span class="hljs-keyword">for</span> (WatchEvent&lt;?&gt; event : watchEvents) &#123;<br>                    WatchEvent.Kind&lt;?&gt; kind = event.kind();<br>                    <span class="hljs-keyword">if</span> (kind == StandardWatchEventKinds.ENTRY_CREATE) &#123;<br>                        System.out.println(<span class="hljs-string">&quot;创建=&quot;</span> + event.context());<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (kind == StandardWatchEventKinds.ENTRY_DELETE) &#123;<br>                        System.out.println(<span class="hljs-string">&quot;删除=&quot;</span> + event.context());<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (kind == StandardWatchEventKinds.ENTRY_MODIFY) &#123;<br>                        System.out.println(<span class="hljs-string">&quot;修改=&quot;</span> + event.context());<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (kind == StandardWatchEventKinds.OVERFLOW) &#123;<br>                        System.out.println(<span class="hljs-string">&quot;覆盖=&quot;</span> + event.context());<br>                    &#125;<br>                    <span class="hljs-comment">// 触发更新回调</span><br>                    <span class="hljs-keyword">if</span> (mainController != <span class="hljs-keyword">null</span>) &#123;<br>                        mainController.update();<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">boolean</span> res = watchKey.reset();<br>                <span class="hljs-keyword">if</span> (!res) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> FileMonitor <span class="hljs-title">get</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (monitor == <span class="hljs-keyword">null</span>) &#123;<br>            monitor = <span class="hljs-keyword">new</span> FileMonitor();<br>        &#125;<br>        <span class="hljs-keyword">return</span> monitor;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addWatchFile</span><span class="hljs-params">(File file)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Paths.get(file.toURI()).register(watchService,<br>                    StandardWatchEventKinds.ENTRY_CREATE,<br>                    StandardWatchEventKinds.ENTRY_DELETE<br>                    <span class="hljs-comment">/*StandardWatchEventKinds.ENTRY_MODIFY,*/</span><br>                    <span class="hljs-comment">/*StandardWatchEventKinds.OVERFLOW*/</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setListener</span><span class="hljs-params">(MainController mainController)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.mainController = mainController;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">watch</span><span class="hljs-params">()</span> </span>&#123;<br>        future = NoteFxThreadPool.getFileMonitorPool().submit(<span class="hljs-keyword">this</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">stopWatch</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(future != <span class="hljs-keyword">null</span>)&#123;<br>            future.cancel(<span class="hljs-keyword">true</span>);<br>        &#125;<br>        monitor = <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>遍历<code>目标文件夹</code>下所有文件夹,并为这些文件夹加上监听,代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">LinkedList&lt;File&gt; fileLinkedList = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>fileLinkedList.add(dir);<br><span class="hljs-keyword">while</span> (fileLinkedList.size() &gt; <span class="hljs-number">0</span>) &#123;<br>    File f = fileLinkedList.removeFirst();<br>    File[] files = f.listFiles();<br>    <span class="hljs-keyword">if</span> (files == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (File file : files) &#123;<br>        <span class="hljs-keyword">if</span> (file.isDirectory()) &#123;<br>            fileLinkedList.addLast(file);<br>            FileMonitor.get().addWatchFile(file);<br>        &#125;<br>    &#125;<br>&#125;<br>FileMonitor.get().addWatchFile(dir);<br>FileMonitor.get().setListener(<span class="hljs-keyword">this</span>);<br>FileMonitor.get().watch();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">noteFx目录树管理</summary>
    
    
    
    <category term="noteFx" scheme="https://blog.pyjava.com/categories/noteFx/"/>
    
    
    <category term="project" scheme="https://blog.pyjava.com/tags/project/"/>
    
    <category term="javaFx" scheme="https://blog.pyjava.com/tags/javaFx/"/>
    
  </entry>
  
  <entry>
    <title>Contest 1519</title>
    <link href="https://blog.pyjava.com/2021/04/30/algorithm/codeforce/Contest%201519/"/>
    <id>https://blog.pyjava.com/2021/04/30/algorithm/codeforce/Contest%201519/</id>
    <published>2021-04-29T16:32:48.000Z</published>
    <updated>2021-04-29T17:07:28.924Z</updated>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p><strong>比赛地址</strong> <a href="https://codeforces.com/contest/1519">Contest 1519</a></p>          </div><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><div class="table-container"><table><thead><tr><th>题目编号</th><th>题目名称</th><th>是否 AC</th><th>思路概述</th></tr></thead><tbody><tr><td>A.</td><td>Red and Blue Beans</td><td>Y</td><td>简单的算术</td></tr><tr><td>B.</td><td>The Cake Is a Lie</td><td>Y</td><td>简单的算术</td></tr><tr><td>C.</td><td>Berland Regional</td><td>N</td><td>-</td></tr><tr><td>D.</td><td>Maximum Sum of Products</td><td>N</td><td>-</td></tr><tr><td>E.</td><td>Off by One</td><td>N</td><td>-</td></tr><tr><td>F.</td><td>Chests and Keys</td><td>N</td><td>-</td></tr></tbody></table></div><h2 id="Red-and-Blue-Beans"><a href="#Red-and-Blue-Beans" class="headerlink" title="Red and Blue Beans"></a>Red and Blue Beans</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>蓝豆 r 个和红豆 b 个放入任意个包中,每个包中的两种豆子差值不为 d(<script type="math/tex">|r_i-b_i|<=d</script>),问是否可以完成这样的操作,能输出”YES”</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路 1"></a>思路 1</h3><ol><li>当 d=0 时,必须 r==b,才会输出”YES”,否则输出”NO”</li><li>当 d!=0 时,当 min(r,b)* (d+1) &gt;= max(r,b), 输出 YES,否则输出”NO”</li></ol><p>由于很久没有写算法题了,导致只能用<code>BigInteger</code>硬暴力</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">int</span> c = scanner.nextInt();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; c; ++i) &#123;<br>            <span class="hljs-keyword">int</span> r = scanner.nextInt();<br>            <span class="hljs-keyword">int</span> b = scanner.nextInt();<br>            <span class="hljs-keyword">int</span> d = scanner.nextInt();<br><br>            <span class="hljs-keyword">if</span> (d == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (r == b) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;YES&quot;</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    System.out.println(<span class="hljs-string">&quot;NO&quot;</span>);<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (r &lt; b) &#123;<br>                    BigInteger b1 = <span class="hljs-keyword">new</span> BigInteger(Integer.toString(b));<br>                    BigInteger d1 = <span class="hljs-keyword">new</span> BigInteger(Integer.toString(d + <span class="hljs-number">1</span>));<br>                    BigInteger r1 = <span class="hljs-keyword">new</span> BigInteger(Integer.toString(r));<br>                    BigInteger t1 = d1.multiply(r1);<br>                    <span class="hljs-keyword">int</span> i1 = t1.compareTo(b1);<br>                    <span class="hljs-keyword">if</span> ( i1 == <span class="hljs-number">0</span> || i1 == <span class="hljs-number">1</span>) &#123;<br>                        System.out.println(<span class="hljs-string">&quot;YES&quot;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        System.out.println(<span class="hljs-string">&quot;NO&quot;</span>);<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (r &gt; b) &#123;<br>                    BigInteger b1 = <span class="hljs-keyword">new</span> BigInteger(Integer.toString(b));<br>                    BigInteger d1 = <span class="hljs-keyword">new</span> BigInteger(Integer.toString(d + <span class="hljs-number">1</span>));<br>                    BigInteger r1 = <span class="hljs-keyword">new</span> BigInteger(Integer.toString(r));<br>                    BigInteger t1 = d1.multiply(b1);<br>                    <span class="hljs-keyword">long</span> t = b * (d + <span class="hljs-number">1</span>);<br>                    <span class="hljs-keyword">int</span> i1 = t1.compareTo(r1);<br>                    <span class="hljs-keyword">if</span> ( i1 == <span class="hljs-number">0</span> || i1 == <span class="hljs-number">1</span>) &#123;<br>                        System.out.println(<span class="hljs-string">&quot;YES&quot;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        System.out.println(<span class="hljs-string">&quot;NO&quot;</span>);<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    System.out.println(<span class="hljs-string">&quot;YES&quot;</span>);<br>                &#125;<br>            &#125;<br><br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="The-Cake-Is-a-Lie"><a href="#The-Cake-Is-a-Lie" class="headerlink" title="The Cake Is a Lie"></a>The Cake Is a Lie</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h3><p>从(1,1)出发到(n,m),每次只能使得 x 坐标+1/y 坐标+1,分别耗费 y/x 值,问是否满足 k 值能使得从(1,1)到(n,m)</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>从(1,1)到(n,1)每步消费 1,共计 n-1 步</li><li>从(n,1)到(n,m)每步消费 n,共计 m-1 步</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">int</span> c = scanner.nextInt();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; c; ++i) &#123;<br>            <span class="hljs-keyword">int</span> n = scanner.nextInt();<br>            <span class="hljs-keyword">int</span> m = scanner.nextInt();<br>            <span class="hljs-keyword">int</span> k = scanner.nextInt();<br><br>            <span class="hljs-keyword">int</span> h = <span class="hljs-number">1</span>*(n-<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">int</span> z = n*(m-<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">int</span> sum = h+z;<br><br>            <span class="hljs-keyword">if</span>(sum == k)&#123;<br>                System.out.println(<span class="hljs-string">&quot;YES&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;NO&quot;</span>);<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Educational Codeforces Round 108 (Rated for Div. 2)</summary>
    
    
    
    <category term="algorithm" scheme="https://blog.pyjava.com/categories/algorithm/"/>
    
    
    <category term="Codeforces" scheme="https://blog.pyjava.com/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>反射</title>
    <link href="https://blog.pyjava.com/2021/04/29/java/00_base/06_%E5%8F%8D%E5%B0%84/"/>
    <id>https://blog.pyjava.com/2021/04/29/java/00_base/06_%E5%8F%8D%E5%B0%84/</id>
    <published>2021-04-28T17:10:00.000Z</published>
    <updated>2021-04-28T17:08:11.048Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是反射"><a href="#什么是反射" class="headerlink" title="什么是反射"></a>什么是反射</h2><p>java的反射机制是指在运行状态中，对于任意一个类，都能知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个属性和方法；这种动态获取的类的信息，和动态调用对象的方法的功能就是反射机制。</p><p>反射机制允许程序在执行期借助反射获取类的内部信息，并能直接操作<strong>任意</strong>对象的内部属性及方法。</p><p>动态性</p><p>加载完类之后，在对内存的方法区（元空间）中产生了Class类型的对象，这个对象包含完整的类的结构信息。</p><p><strong>反射机制与面向对象的封装性是不是有矛盾？</strong></p><p>不矛盾。反射调用私有也可以，但不建议。封装性建议你调用哪些方法和属性</p><p><strong>通过直接new和或者反射都可以调用公共的结构，开发中用哪个？</strong></p><p>编译时已确定需要用那个类使用new；如果不知道可以采用反射。</p><h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><p>运行时类，就作为Class的一个示例，1.8在元空间。</p><p>包括 class、interface、数组、enum、annotation(Override.class)、primitive type(int.class)、void(void.class)、</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 方式1：调用运行时类的属性</span><br>Class clazz = Person.class;<br><span class="hljs-comment">// 方式2：调用getClass</span><br>Person p = <span class="hljs-keyword">new</span> Person();<br>Class clazz = p.getClass();<br><span class="hljs-comment">// 方式3：调用Class的静态方法</span><br>Class clazz = Class.forName(<span class="hljs-string">&quot;com.xxx.person&quot;</span>);<br><span class="hljs-comment">// 方式4：通过本类的类加载器加载</span><br>ClassLoader classLoader = Test.class.getClassLoader();<br>Class clazz = classLoader.loadClass(<span class="hljs-string">&quot;com.xxx.Person&quot;</span>);<br></code></pre></td></tr></table></figure><p><a href="./5.Back-end/1.Language/java/JVM.md#类加载过程">类加载过程</a></p><h2 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h2><p><a href="./5.Back-end/1.Language/java/JVM.md#类加载器">类加载过程</a></p><h2 id="创建运行时类的对象"><a href="#创建运行时类的对象" class="headerlink" title="创建运行时类的对象"></a>创建运行时类的对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 运行时类必须提供空参构造器</span><br><span class="hljs-comment">// 访问权限满足</span><br>Class&lt;Person&gt; clazz = Person.class;<br>Person obj = clazz.newInstance();<br></code></pre></td></tr></table></figure><h2 id="获取运行时类的结构"><a href="#获取运行时类的结构" class="headerlink" title="获取运行时类的结构"></a>获取运行时类的结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java">Class clazz = Persion.class;<br><span class="hljs-comment">// 属性</span><br><span class="hljs-comment">// 属性(本类和父类public修饰的属性)</span><br>Field[] fields = clazz.getFields();<br><br><span class="hljs-comment">// 当前运行时类的所有属性（不包括父类）</span><br>Field[] declaredFields = clazz.getDeclaredFields();<br><br><span class="hljs-comment">// 获取属性权限修饰符 getModifiers() 0124...;</span><br><span class="hljs-comment">// 获取数据类型 getType()</span><br><span class="hljs-comment">// 获取变量名 getName()</span><br><br><span class="hljs-comment">// 方法</span><br><span class="hljs-comment">// 方法(本类和父类public修饰的方法)</span><br>Method[] methods = clazz.getMethods();<br><br><span class="hljs-comment">//当前运行时类的所有方法（不包括父类）</span><br>Method[] declaredMethods = clazz.getDeclareMethods();<br><span class="hljs-comment">// 获取方法权限修饰符 getModifiers();</span><br><span class="hljs-comment">// 获取方法返回类型 getRetureType();</span><br><span class="hljs-comment">// 获取方法形参类型 getParameterTypes();</span><br><span class="hljs-comment">// 获取方法名 getName();</span><br><span class="hljs-comment">// 获取方法注解 getAnnotations();</span><br><span class="hljs-comment">// 获取方法异常 getExceptionTypes();</span><br><br><span class="hljs-comment">// 构造器 </span><br><span class="hljs-comment">// 运行时类中public的构造器</span><br>Constructor constructors = clazz.getConstrctores();<br><span class="hljs-comment">// 获取 运行时类中的所有构造器</span><br>Constructor DeclaredConstructors = clazz.getDeclaredConstrctores();<br><br><span class="hljs-comment">// 父类</span><br>Class[] classs = clazz.getSuperclass();<br><span class="hljs-comment">// 带泛型的父类</span><br>Type genericSuperclass = clazz.getGenericSuperclass();<br>ParameterizedType paramType = (ParameterizedType) genericSuperclass;<br>Type[] actualTypeArguments = paramType.getActualTypeArguments();<br><br><span class="hljs-comment">// 接口</span><br>Class[] classs = clazz.getInterfaces();<br><span class="hljs-comment">// 包 </span><br>Package = clazz.getPackage();<br><span class="hljs-comment">// 注解</span><br>Annotations[] annotations = clazz.getAnnotations();<br></code></pre></td></tr></table></figure><h2 id="调用运行时类的结构"><a href="#调用运行时类的结构" class="headerlink" title="调用运行时类的结构"></a>调用运行时类的结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">Class clazz =Person.class;<br>Person p = (Person) clazz.newInstance();<br><span class="hljs-comment">// 属性setAccessible(true)</span><br>Field id = clazz.getField(<span class="hljs-string">&quot;id&quot;</span>);<br>id.set(p, <span class="hljs-number">1001</span>);<br>id.get(p);<br><br><span class="hljs-comment">// 方法setAccessible(true)</span><br>Method show = clazz.getDeclaredMethod(<span class="hljs-string">&quot;show&quot;</span>, String.class);<br>show.invoke(<span class="hljs-string">&quot;hello&quot;</span>);<br><br><span class="hljs-comment">// 构造器setAccessible(true)</span><br>Constructor constructor = clazz.getDeclaredConstructor(String.class);<br>constructor.newInstance(<span class="hljs-string">&quot;hello&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="应用：动态代理"><a href="#应用：动态代理" class="headerlink" title="应用：动态代理"></a>应用：动态代理</h2><p>使用一个代理将对象包装起来，然后用代理对象取代原始对象。</p><p>静态代理：代理类和被代理类在编译期间就确定下来了。</p>]]></content>
    
    
    <summary type="html">反射</summary>
    
    
    
    
    <category term="Java" scheme="https://blog.pyjava.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java JDK版本变化</title>
    <link href="https://blog.pyjava.com/2021/04/29/java/00_base/05_JDK%E7%89%88%E6%9C%AC%E5%8F%98%E5%8C%96/"/>
    <id>https://blog.pyjava.com/2021/04/29/java/00_base/05_JDK%E7%89%88%E6%9C%AC%E5%8F%98%E5%8C%96/</id>
    <published>2021-04-28T16:55:02.000Z</published>
    <updated>2021-04-28T17:05:28.960Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JDK-Version-1-0"><a href="#JDK-Version-1-0" class="headerlink" title="JDK Version 1.0"></a>JDK Version 1.0</h2><p>1996-01-23 Oak 橡树</p><p>使用外挂 JIT，性能差</p><h2 id="JDK-Version-1-1"><a href="#JDK-Version-1-1" class="headerlink" title="JDK Version 1.1"></a>JDK Version 1.1</h2><p>1997-02-19</p><ul><li>JDBC</li><li>支持内部类</li><li>RMI 远程方法调用</li><li>反射</li><li>JavaBean</li></ul><h2 id="JDK-Version-1-2"><a href="#JDK-Version-1-2" class="headerlink" title="JDK Version 1.2"></a>JDK Version 1.2</h2><p>1998-12-08</p><ul><li>集合框架</li><li>JIT 编译器</li><li>对打包的 Java 文件进行数字签名</li><li>JFC，包括 Swing 1.9，拖放和 Java2D 类库</li><li>Java 插件</li><li>JDBC 引入可滚动结果集，BLOB，CLOB，批量更新和用户自定义类型</li><li>Applet 添加声音支持</li><li>同时发布了 JSP/Servlet、EJB 规范，将 java 分成 J2EE，J2SE 和 J2ME</li></ul><h2 id="JDK-Version-1-3"><a href="#JDK-Version-1-3" class="headerlink" title="JDK Version 1.3"></a>JDK Version 1.3</h2><p>2000-05-08 红隼</p><ul><li>Java Sound API</li><li>jar 文件索引</li><li>对 Java 的各个方面都做了大量优化和增强</li><li>Hotspot 成为 Java 默认虚拟机</li></ul><h2 id="JDK-Version-1-4"><a href="#JDK-Version-1-4" class="headerlink" title="JDK Version 1.4"></a>JDK Version 1.4</h2><p>2002-02-13 隼</p><ul><li>断言</li><li>XML 处理</li><li>Java 打印服务</li><li>Logging API</li><li>Java Web Start</li><li>JDBC 3.0 API</li><li>链式异常处理</li><li>支持 IPV6</li><li>支持正则</li><li>引入 Image I/O API</li><li>Classic 虚拟机退出</li></ul><h2 id="JDK-5"><a href="#JDK-5" class="headerlink" title="JDK 5"></a>JDK 5</h2><p>2004-09-30 老虎 改名为 J2SE5.0</p><ul><li><p>类型安全的枚举</p><ol><li>枚举类在经过编译之后确实生成了一个扩展<code>java.lang.Enum</code>的类</li><li>枚举类是 final 的</li><li>每一个枚举值都是该类中一个成员</li><li>枚举类中被默认增加了许多静态方法，如<code>values()</code>，<code>valueOf()</code></li></ol></li><li><p>泛型</p><p><code>ArrayList list=new ArrayList()</code></p><p><code>ArrayList&lt;Integer&gt;list=new ArrayList&lt;Integer&gt;();</code></p><p>避免了程序员自行保证集合容器中存取数据的强制转换</p></li><li><p>自动装箱与拆箱</p><p>int&gt;&gt;Integer<br>Integer&gt;&gt;int</p></li><li><p>元数据（注解）</p></li><li><p>增强循环 foreach</p></li><li><p>可变参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">(Object... obj)</span></span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>静态引入</p><p><code>import start **.**</code></p></li><li><p>Instrumentation</p></li></ul><h2 id="JDK-6"><a href="#JDK-6" class="headerlink" title="JDK 6"></a>JDK 6</h2><p>2006-12-11 野马</p><ul><li>支持脚本语言</li><li>JDBC 4.0 API</li><li>Java Compiler API</li><li>可插拔注解</li><li>增加对 Native PKI、Java GSS、Kerberos 和 LDAP 支持</li><li>集成 WebServices</li></ul><h2 id="JDK-7"><a href="#JDK-7" class="headerlink" title="JDK 7"></a>JDK 7</h2><p>2011-07-28 海豚</p><ul><li>钻石型语法（在创建泛型对象时应用类型推断）</li><li>支持 try-with-resources（在一个语句块中捕获多种异常）</li><li>switch 语句块中允许以字符串作为分支条件</li><li>引入 Java NIO.2 开发包</li><li>在创建泛型对象时应用类型推断</li><li>支持动态语言</li><li>数值类型可以用二进制字符串标识，并且可以在字符串表示中添加下划线</li><li>null 值的自动处理</li><li>采用 G1 垃圾回收器，支持 64 为系统的压缩指针</li></ul><h2 id="JDK8"><a href="#JDK8" class="headerlink" title="JDK8"></a>JDK8</h2><p>2014-03-18</p><ul><li><p>lambda</p><p>作为接口的实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 无参数，无返回值</span><br>Runnable r = () -&gt; System.out.println(<span class="hljs-string">&quot;hello&quot;</span>);<br><span class="hljs-comment">// 需要一个参数，无返回值</span><br>Consumer&lt;String&gt; con = (String str) -&gt; &#123;<br>    System.out.println(str);<br>&#125;<br><span class="hljs-comment">// 数据类型可省略,类型推断</span><br>Consumer&lt;String&gt; con = (str) -&gt; &#123;<br>    System.out.println(str);<br>&#125;<br><span class="hljs-comment">// 如果只需要一个参数，参数的小括号可以省略</span><br>Consumer&lt;String&gt; con = str -&gt; &#123;<br>    System.out.println(str);<br>&#125;<br><span class="hljs-comment">// lambda需要两个或者两个以上的参数，多条执行语句，并且可以有返回值</span><br>Comparator&lt;Integer&gt; com = (o1, o2)-&gt; &#123;<br>    <span class="hljs-keyword">return</span> Integer.compare(o1, o2);<br>&#125;<br><span class="hljs-comment">//如果lambda只有一条语句，return和大括号可以省略</span><br>Comparator&lt;Integer&gt; com = (o1, o2)-&gt; Integer.compare(o1, o2);<br></code></pre></td></tr></table></figure></li><li><p>函数式接口</p><p>如果一个接口中，只声明了一个抽象方法，则此接口就称为函数式接口</p><p>可以加<code>@FunctionalInterface</code>，但不加也可以</p><p>OOF 编程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">Consumer&lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title">accept</span><span class="hljs-params">(T t)</span></span>;<br><span class="hljs-function">Supplier&lt;T&gt; T <span class="hljs-title">get</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function">Function&lt;T,R&gt; R <span class="hljs-title">apply</span><span class="hljs-params">(T r)</span></span>;<br><span class="hljs-function">Predicate&lt;T&gt; <span class="hljs-keyword">boolean</span> <span class="hljs-title">test</span><span class="hljs-params">(T t)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>Stream API</p><p>操作数据源所生成的元素序列，不会存储元素，不会改变源对象，操作是延迟执行的。</p><ol><li>创建 stream</li><li>中间操作</li><li>终止操作 一旦执行，就执行中间操作，并且产生结果</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建Stream</span><br><span class="hljs-comment">// 创建方式1：通过集合</span><br>List&lt;Person&gt; persons = PersonService.getPersons();<br><span class="hljs-comment">// 返回顺序流</span><br>Stream&lt;Person&gt; stream = employees.stream();<br><span class="hljs-comment">// 返回一个并行流</span><br>Stream&lt;Person&gt; parallelStream = employees.parallelStream();<br><br><span class="hljs-comment">// 创建方式2：通过数组</span><br><span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;<br>IntStream stream = Arrays.stream(arr);<br><br><span class="hljs-comment">// 创建方式3：通过Stream的of()</span><br>Stream&lt;Integer&gt; stream = Stream.of(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>);<br><br><span class="hljs-comment">// 创建方式4：创建无限流</span><br>Stream.iterate(<span class="hljs-number">0</span>, t -&gt; t+<span class="hljs-number">2</span>).limit(<span class="hljs-number">10</span>).forEach(System.out::println);<br>Stream.generate(Math::random).limit(<span class="hljs-number">10</span>).forEach(System.out::println);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 中间操作</span><br><span class="hljs-comment">// 筛选与切片</span><br>List&lt;Person&gt; persons = PersonService.getPersons();<br>list.stream().filter(e -&gt; e.getSalary() &gt; <span class="hljs-number">7000</span>).forEach(System.out::println);<br><span class="hljs-comment">// 截断流，数目不超过给定数量</span><br>limit(n);<br><span class="hljs-comment">// 跳过元素，返回一个扔掉前n个元素的流</span><br>skip(n);<br><span class="hljs-comment">// 筛选，通过流所生成元素的hashCode 和equals 去重</span><br>distinct();<br><span class="hljs-comment">// 映射</span><br><span class="hljs-comment">// 接受一个函数作为参数，将元素转换成其他形式或者提取信息</span><br>map(Function f);<br><span class="hljs-comment">// 接受一个函数作为参数，将流中的每个值都换成另一个流，然后将所有流连成一个流</span><br>flatMap(Function f);<br><span class="hljs-comment">// 排序</span><br>sorted();<br>sorted(Comparator com);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 终止操作</span><br><span class="hljs-comment">// 匹配与查找</span><br><span class="hljs-comment">// 检查是否匹配所有元素</span><br>allMatch(Predicate p);<br><span class="hljs-comment">// 检查是否至少匹配一个元素</span><br>anyMatch(Predicate p);<br><span class="hljs-comment">// 检查是否没有匹配的元素</span><br>noneMatch(Predicate p);<br><span class="hljs-comment">// 返回第一个元素</span><br>findFirst();<br><span class="hljs-comment">// 返回当前流中任意元素</span><br>findAny();<br><span class="hljs-comment">// 返回流中元素的总个数</span><br>count();<br><span class="hljs-comment">// 返回流中最大值</span><br>max(Comparator c);<br><span class="hljs-comment">// 返回流中最小值</span><br>min(Comparator c);<br><span class="hljs-comment">// 迭代</span><br>forEach(Comsumer c);<br><br><span class="hljs-comment">// 归约</span><br><span class="hljs-comment">// 可以将流中元素反复结合起来，得到一个值</span><br>reduce(T identity, BinaryOperator);<br><span class="hljs-comment">// 可以将流中元素反复结合起来，得到一个值，返回Optional&lt;T&gt;</span><br>reduce(BinaryOperator);<br><br><span class="hljs-comment">// 收集</span><br><span class="hljs-comment">// 将流转换为其他形式，接受一个Colletor接口的实现，汇总</span><br>collec(Collector c);<br></code></pre></td></tr></table></figure></li><li><p>方法引用和构造器引用</p><p>当要传递给 Lambda 体的操作，已经有实现的方法了，可以使用方法引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 类(或者对象)::方法名</span><br>PrintStream ps = System.out;<br>Consumer&lt;String&gt; con2 = ps::println;<br>con2.accept(<span class="hljs-string">&quot;hello&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>默认方法 在接口里有一个实现的方法</p></li><li><p>新工具 nashorn 引擎、类依赖分析器 jdeps</p></li><li><p>Date Time API</p></li><li><p>Optional 类，解决空指针异常</p><p>Optional\<T\>是一个容器类，他可以保存类型 T 的值，代表这个值存在，或者保存 null，标识这个值不存在。</p></li></ul><h2 id="JDK-9"><a href="#JDK-9" class="headerlink" title="JDK 9"></a>JDK 9</h2><p>2017-09-22</p><ul><li><p>模块化系统 jigsaw（module requires）</p></li><li><p>REPL：交互式编程环境</p></li><li><p>多版本兼容 JAR</p></li><li><p>私有接口方法，连方法的访问权限修饰符都可以声明为 private</p></li><li><p>钻石操作符的使用升级 （泛型+匿名内部类）</p></li><li><p>语法改进 try，自动关闭连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 8</span><br><br><span class="hljs-keyword">try</span>(InputStreamReader reader = <span class="hljs-keyword">new</span> InputStreamReader(System.in))&#123;<br>....<br>&#125;<br><span class="hljs-comment">// 9</span><br>InputStreamReader reader = <span class="hljs-keyword">new</span> InputStreamReader(System.in);<br><span class="hljs-keyword">try</span>(reader)&#123;<br>....<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>String 存储结构变更(AbstractStringBuilder 都修改了)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Stable</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">byte</span>[] value;<br></code></pre></td></tr></table></figure></li><li><p>便利的集合特性 of()</p><p>创建只读集合</p></li><li><p>增强的 InputStreamAPI</p><p>transferTo，将数据直接传输给 OutputStream</p></li><li><p>增强的 StreamAPI</p><p>takeWhile 返回从开头开始的尽可能多的数据</p><p>dropWhile 与 takeWhile 相反，返回剩余元素</p><p>ofNullable，形参变量是可以为 null 的单个元素</p><p>iterate 的新重载，</p></li><li><p>Optional 中 stream 的方法</p></li><li><p>全新的 HTTP 客户端 API</p></li><li><p>Deprecated 的相关 API</p></li><li><p>javadoc 的 h5 支持</p></li><li><p>js 引擎升级 Nashorn</p></li><li><p>java 的动态编译器</p></li></ul><h2 id="JDK-10"><a href="#JDK-10" class="headerlink" title="JDK 10"></a>JDK 10</h2><p>2018-03-21</p><ul><li>var 局部变量类型推断</li><li>将原来 mercurial 管理的众多 JDK 仓库代码合并</li><li>统一的垃圾回收接口</li><li>G1 垃圾回收器的并行完整垃圾回收</li><li>集合新增 copyOf()，用于创建一个只读的集合</li></ul><h2 id="JDK-11"><a href="#JDK-11" class="headerlink" title="JDK 11"></a>JDK 11</h2><ul><li><p>基于嵌套的访问控制</p></li><li><p>动态的类文件常量</p></li><li><p>Epsilon 垃圾回收器</p></li><li><p>ZGC 垃圾回收器 可伸缩的低延时垃圾回收器</p><p>并发，基于 region，压缩型的垃圾收集器，只有 root 扫描会 stw，因此 GC 停顿时间不会随着堆的增长和存货对象的增长而增长。</p><ul><li>优势<ul><li>GC 暂停时间不超过 10ms</li><li>可处理几百兆的小堆，也能处理几 T 的大堆</li><li>和 G1 相比，应用吞吐能力不会下降超过 15%</li><li>为未来的 GC 功能和利用 colord 指针以及 Load barriers 优化奠定基础</li><li>初始只支持 64 位系统</li></ul></li></ul></li><li><p>字符串新方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 判断字符串是否为空白</span><br><span class="hljs-string">&quot; &quot;</span>.isBlank();<br><span class="hljs-comment">// 去除首尾空白</span><br><span class="hljs-string">&quot; Javastack &quot;</span>.strip();<br><span class="hljs-comment">// 去除尾部空格</span><br><span class="hljs-string">&quot; Javastack &quot;</span>.stripTrailing();<br><span class="hljs-comment">// 去除首部空格</span><br><span class="hljs-string">&quot; Javastack &quot;</span>.stripLeading();<br><span class="hljs-comment">// 复制字符串</span><br><span class="hljs-string">&quot;Java&quot;</span>.repeat(<span class="hljs-number">3</span>);<br><span class="hljs-comment">// 行数统计</span><br><span class="hljs-string">&quot;A\nB\nC&quot;</span>.lines().count();<br></code></pre></td></tr></table></figure></li><li><p>Optional 加强</p></li><li><p>局部变量类型推断升级</p><p>在使用 lambda 表达式时给参数加上注解</p></li><li><p>简化的编译运行程序</p><p>java test.java 即可</p></li><li><p>废弃 Nashorn 引擎</p></li></ul><h2 id="JDK-12"><a href="#JDK-12" class="headerlink" title="JDK 12"></a>JDK 12</h2><ul><li><p>JEP189：低暂停时间的 GC（Shenandoah）</p><p>  垃圾回收器的暂停时间与堆的大小无关，这意味着不论堆多大，都将拥有一致的系统暂停时间</p><p>  <strong>工作原理</strong></p><p>  类似于 G1，区别在于实现了并发的疏散环节，引入了<strong>Brooks Forwarding Pointer</strong>计数使得 GC 在移动对象时，对象引用仍然可以访问。</p><ol><li>Init Mark 启动并发标记阶段</li><li>并发标记遍历堆阶段</li><li>并发标记完成阶段</li><li>并发整理回收无活动区域阶段</li><li>并发 Evacuation 整理内存区域阶段</li><li>InitUpdateRefs 更新引用初始化阶段</li><li>并发更新引用阶段</li><li>Final Update Refs 完成引用更新阶段</li><li>并发回收无引用区域阶段</li></ol></li><li><p>JEP230：微基准测试套件</p><ol><li>JMH java microbenchmark harness，用于代码微基准测试的工具套件。</li><li>场景：准确的知道某个方法需要执行多长时间，以及执行事件和输入之间的相关性；对比不同实现的吞吐量；查看多少百分比的请求在多长事件内完成。</li></ol></li><li><p>JEP325：switch 表达式（预览版）</p><p>  传统 switch 的弊端：</p><ol><li>匹配自上而下，忘记 break，会执行其他 case 中的语句</li><li>所有 case 共有一个块范围</li><li>不能在一个 case 中写多个执行结果一致的条件</li><li><p>整个 switch 不能作为返回值</p><p>预览版解决了以上所有问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">numberOfLetters = <span class="hljs-keyword">switch</span>(fruit)&#123;<br>    <span class="hljs-keyword">case</span> PEAR -&gt; <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">case</span> APPLE, GRAPE, MANGO -&gt; <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">case</span> ORANGE, PAPAYA -&gt; <span class="hljs-number">6</span>;<br>    <span class="hljs-keyword">default</span> -&gt; <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(<span class="hljs-string">&quot;No Such Fruit&quot;</span> + fruit);<br>&#125;<br>System.out.println(numberOfLetters)<br></code></pre></td></tr></table></figure><p>需要注意的是 Java11 以前的版本中，Switch 支持：byte、char、short、int、Byte、Character、Short、Integer、enum、String，而不支持 float、double 和 long</p></li></ol></li><li><p>JEP334：JVM 常量 API</p><p>  更容易地对关键类文件和运行时构建的名义描述进行建模，特别是对那些从常量池加载的常量。</p><p>  具体来说，java.base 模块新增了 java.lang.constant 包，定义了一系列基于值的符号引用，它们能够描述每种可加载常量。</p></li><li><p>JEP340：只保留一个 AArch64 实现</p><p>11 之前存在两个 64 位 ARM 端口</p></li><li><p>JEP341：默认生成类数据共享 CDS 归档文件</p><p>CDS：在多个 JVM 之间共享一些类</p><p>jdk5 引入了 cds，jdk9 扩展，jdk10 扩展至 appcds</p></li><li><p>JEP344：可终止的 G1 Mixed GC</p><p>当 G1 垃圾回收器的回收超过暂停事件的目标，则终止垃圾回收过程，为了满足用户设置的预期的 JVM 停顿时间。</p></li><li><p>JEP346：G1 及时返回未使用的已分配内存</p><p>G1 垃圾收集器在应用程序不活动期间定期生成或持续循环检查整体 Java 堆使用情况，以便 G1 垃圾收集器能够更及时的将 Java 堆中不使用内存部分返回操作系统。</p></li><li><p>支持 Unicode 11</p></li><li><p>支持压缩数字格式化</p></li></ul><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">NumberFormat</span><span class="hljs-operator">.</span><span class="hljs-variable">getCompactNumberInstance</span><span class="hljs-punctuation">(</span><span class="hljs-variable">Local</span><span class="hljs-operator">.</span><span class="hljs-variable">US</span><span class="hljs-operator">,</span> <span class="hljs-built_in">NumberFormat</span><span class="hljs-operator">.</span><span class="hljs-built_in">Style</span><span class="hljs-operator">.</span><span class="hljs-variable">SHORT</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><ul><li><p>string 新增方法</p><p>jdk6 字符串常量池，方法区</p><p>jdk7 堆空间</p><p>jdk9 底层 char[] -&gt; byte[] 字符编码集</p><ol><li><p>transform 方法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">String str = <span class="hljs-string">&quot;hello&quot;</span>.transform(info -&gt; info+<span class="hljs-string">&quot;world&quot;</span>);<br><span class="hljs-comment">// str : helloworld</span><br><span class="hljs-comment">// 可以链式调用</span><br><span class="hljs-string">&quot;hello&quot;</span>.transform(info -&gt; info+<span class="hljs-string">&quot;world&quot;</span>).transform(String :: toUpperCase);<br></code></pre></td></tr></table></figure></li><li><p>strip 约等于 trim 支持 unicode11</p></li><li><p>indent 在前面加空格 实现原理即是在调用 lines 方法创建一个 stream，然后往前</p></li></ol></li><li><p>Files 新增 mismatch 方法</p><p>比较两个文件的内容以确定它们之间是否存在不匹配</p></li><li><p>其他</p></li><li><p>移出项</p><p>FileInputStream 和 FileOutputStream、java.util.ZipFile/Inflator/Deflator 的 finalize 方法</p></li><li><p>废弃项</p></li></ul><h2 id="JDK-13"><a href="#JDK-13" class="headerlink" title="JDK 13"></a>JDK 13</h2><ul><li><p>JEP350 动态 cds 档案</p><p>在 java application 执行后进行动态 archive</p></li><li><p>JEP351 ZGC 取消使用未使用的内存</p><p>11 中引入了，这是一款可伸缩的低延迟垃圾收集器，但是不能将内存归还给操作系统。</p><p>ZGC 的堆由 Region 组成，每个 Region 成为 ZPage。每个 ZPage 与数量可变的已提交内存相关联。当 ZGC 压缩堆的时候，ZPage 就会释放，然后进入 page cache，即 ZPageCache。这些在 page cache 中的 ZPage 集合就标识没有使用的部分堆，这部分内存应该被归还给操作系统</p></li><li><p>JEP353 重新实现旧版套接字 API</p><p>原有问题：</p><ol><li>混合了 Java 和 C 的代码，维护困难</li><li>使用了线程栈作为 IO 的缓存，导致某些情况下需要增加线程栈的大小</li><li>支持异步关闭，带来了移植问题，和并发问题</li></ol><p>使用全新的 NioSocketImpl 拉替换 JDK1.0 中的 PlainSocketImpl</p><ol><li>便于维护和测试，与 NIO 相同的 JDK 内部结构</li><li>与现有的缓冲区缓存机制集成在一起</li><li>使用 concurrent 锁，而不是 synchronized 同步方法</li><li>可切换回旧版本</li></ol></li><li><p>JEP354 switch（预览）</p><p>基于 jdk12 加入了 yield，返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> i = <span class="hljs-keyword">switch</span>(x)&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span> -&gt; <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span> -&gt; <span class="hljs-number">6</span>;<br>    <span class="hljs-keyword">default</span> -&gt; &#123;<br>        yield <span class="hljs-number">7</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>yield：结束 switch 结构</p><p>return：结束方法</p></li><li><p>JEP355 文字块（预览）</p><p>类似于 ES6 的模板字符串</p><p>简化跨越多行的字符串，避免对换行符等特殊字符进行转义，增加 java 程序中字符串的可读性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">String html = <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">    &lt;html&gt;</span><br><span class="hljs-string">        &lt;body&gt;</span><br><span class="hljs-string">            &lt;p&gt;hello&lt;/p&gt;</span><br><span class="hljs-string">        &lt;/body&gt;</span><br><span class="hljs-string">    &lt;/html&gt;</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><ol><li><p>语法</p></li><li><p>编译器在编译时会删除掉多余的空格</p></li><li><p>转义字符，允许使用\n \f \r</p></li><li><p>文本块连接</p><p> 直接拼接 占位符 replace 方法 format 方法</p></li></ol></li></ul>]]></content>
    
    
    <summary type="html">Java JDK版本变化</summary>
    
    
    
    
    <category term="Java" scheme="https://blog.pyjava.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>noteFx-打开并展示文件</title>
    <link href="https://blog.pyjava.com/2021/04/28/project/noteFx/05_%E6%89%93%E5%BC%80%E5%B9%B6%E5%B1%95%E7%A4%BA%E6%96%87%E4%BB%B6/"/>
    <id>https://blog.pyjava.com/2021/04/28/project/noteFx/05_%E6%89%93%E5%BC%80%E5%B9%B6%E5%B1%95%E7%A4%BA%E6%96%87%E4%BB%B6/</id>
    <published>2021-04-27T16:40:22.000Z</published>
    <updated>2021-04-27T17:15:36.550Z</updated>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p><strong>项目地址</strong> <a href="https://github.com/sandorZHAO/noteFx">https://github.com/sandorZHAO/noteFx</a></p>          </div><h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><ol><li>提供文件打开方式</li><li>读取并展示文件内容</li><li>打开已经打开文件时自动选择对应tab</li><li>tab过多折叠</li></ol><h2 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h2><ol><li><code>Menu</code></li><li><code>Tab</code></li><li><code>FileChooser</code></li></ol><h2 id="顶部菜单"><a href="#顶部菜单" class="headerlink" title="顶部菜单"></a>顶部菜单</h2><p>首先是打开文件功能</p><ol><li><code>main.fxml</code></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><br>&lt;?import javafx.scene.layout.BorderPane?&gt;<br>&lt;?import javafx.scene.layout.StackPane?&gt;<br>&lt;?import javafx.scene.control.MenuBar?&gt;<br>&lt;?import javafx.scene.control.SeparatorMenuItem?&gt;<br>&lt;?import javafx.scene.control.Menu?&gt;<br>&lt;?import javafx.scene.control.MenuItem?&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">StackPane</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://javafx.com/javafx&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">xmlns:fx</span>=<span class="hljs-string">&quot;http://javafx.com/fxml&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">fx:id</span>=<span class="hljs-string">&quot;root&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">fx:controller</span>=<span class="hljs-string">&quot;com.pyjava.notefx.controller.MainController&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">BorderPane</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://javafx.com/javafx&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">xmlns:fx</span>=<span class="hljs-string">&quot;http://javafx.com/fxml&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">fx:id</span>=<span class="hljs-string">&quot;rootPane&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">prefHeight</span>=<span class="hljs-string">&quot;700.0&quot;</span> <span class="hljs-attr">prefWidth</span>=<span class="hljs-string">&quot;900.0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">top</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">MenuBar</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">Menu</span> <span class="hljs-attr">text</span>=<span class="hljs-string">&quot;File&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">Menu</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span>Open<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">MenuItem</span> <span class="hljs-attr">onAction</span>=<span class="hljs-string">&quot;#openFile&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span>Open File<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">MenuItem</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">MenuItem</span> <span class="hljs-attr">onAction</span>=<span class="hljs-string">&quot;#openHexo&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span>Open Hexo<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">MenuItem</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">Menu</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">SeparatorMenuItem</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">MenuItem</span> <span class="hljs-attr">onAction</span>=<span class="hljs-string">&quot;#exit&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span>exit<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">MenuItem</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">Menu</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">MenuBar</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">top</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">BorderPane</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">StackPane</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li><code>MainController</code></li></ol><p><code>main.fxml</code>中通过<code>fx:controller</code>指定了对应java类,其中的<code>onAction</code>指定了对应方法(缺少的部分代码请查看git)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainController</span> </span>&#123;<br><br><br>    <span class="hljs-meta">@FXML</span><br>    <span class="hljs-keyword">public</span> StackPane root;<br><br>    <span class="hljs-meta">@FXML</span><br>    <span class="hljs-keyword">public</span> BorderPane rootPane;<br><br>    <span class="hljs-meta">@FXML</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">openFile</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;openFile&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@FXML</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">openHexo</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;openHexo&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@FXML</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">exit</span><span class="hljs-params">()</span></span>&#123;<br>        Main.get().close();<br>        Platform.exit();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="读取文件内容"><a href="#读取文件内容" class="headerlink" title="读取文件内容"></a>读取文件内容</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FXML</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">openFile</span><span class="hljs-params">()</span></span>&#123;<br>    FileChooser fileChooser = <span class="hljs-keyword">new</span> FileChooser();<br>    fileChooser.setTitle(<span class="hljs-string">&quot;打开文件&quot;</span>);<br>    File file = fileChooser.showOpenDialog(Main.get());<br>    String fileName = String.valueOf(file);<br>    <span class="hljs-keyword">long</span> fileLengthLong = file.length();<br>    <span class="hljs-keyword">byte</span>[] fileContent = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[(<span class="hljs-keyword">int</span>) fileLengthLong];<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        FileInputStream inputStream = <span class="hljs-keyword">new</span> FileInputStream(file);<br>        <span class="hljs-keyword">int</span> read = inputStream.read(fileContent);<br>        inputStream.close();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        System.out.println(e.getMessage());<br>    &#125;<br>    String string = <span class="hljs-keyword">new</span> String(fileContent);<br>    System.out.println(string);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="tab展示文件数据"><a href="#tab展示文件数据" class="headerlink" title="tab展示文件数据"></a>tab展示文件数据</h2><p>首先需要了解的是,上面的方法在读取文件时占用了JavaFX的UI线程,我们需要另起线程来完成文件读取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FXML</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">openFile</span><span class="hljs-params">()</span> </span>&#123;<br>    FileChooser fileChooser = <span class="hljs-keyword">new</span> FileChooser();<br>    fileChooser.setTitle(<span class="hljs-string">&quot;打开文件&quot;</span>);<br>    File file = fileChooser.showOpenDialog(Main.get());<br>    String fileName = file.getName();<br>    CompletableFuture.supplyAsync(() -&gt; &#123;<br>        <span class="hljs-comment">// 读取文件时,鼠标指针为WAIT状态</span><br>        rootPane.setCursor(Cursor.WAIT);<br>        StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>        <span class="hljs-keyword">try</span> (BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> FileReader(file))) &#123;<br>            br.lines().map(s -&gt; s + <span class="hljs-string">&quot;\n&quot;</span>).forEach(sb::append);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br>        <span class="hljs-comment">// 读取完成将鼠标恢复</span><br>        rootPane.setCursor(Cursor.DEFAULT);<br>        <span class="hljs-comment">// 返回读取文件数据</span><br>        <span class="hljs-keyword">return</span> sb.toString();<br>    &#125;).thenAccept(s -&gt; Platform.runLater(() -&gt; &#123;<br><br>        <span class="hljs-comment">// 添加tab</span><br>        Tab tab = <span class="hljs-keyword">new</span> Tab(fileName);<br>        <span class="hljs-comment">// 将文件内容加入tab中</span><br>        TextArea textArea = <span class="hljs-keyword">new</span> TextArea();<br>        textArea.setText(s);<br>        tab.setContent(textArea);<br><br>        rightTab.getTabs().add(tab);<br><br>        <span class="hljs-comment">// 将刚打开的文件的tab置为选中状态</span><br>        SingleSelectionModel&lt;Tab&gt; selectionModel = rightTab.getSelectionModel();<br>        selectionModel.select(tab);<br>    &#125;));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="自动选择tab"><a href="#自动选择tab" class="headerlink" title="自动选择tab"></a>自动选择tab</h2><p>有这样的场景</p><ol><li><p>用户打开了a文件后,打开了b文件</p><p> 针对于这种情况,我们需要将刚刚选中的b文件变为选中状态</p></li><li><p>用户打开了a文件后打开了b文件,这时候他有选择了打开a文件;</p><p> 针对于这种情况,我们需要将第二次打开的a文件变为选中状态</p></li></ol><p>我们需要维护一个携带了File信息的Tab组件,便于获取文件信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileTab</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Tab</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> File file;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">FileTab</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">FileTab</span><span class="hljs-params">(File file)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>();<br>        <span class="hljs-keyword">this</span>.file = file;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">FileTab</span><span class="hljs-params">(String s, File file)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(s);<br>        <span class="hljs-keyword">this</span>.file = file;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">FileTab</span><span class="hljs-params">(String s, Node node, File file)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(s, node);<br>        <span class="hljs-keyword">this</span>.file = file;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> File <span class="hljs-title">getFile</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> file;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFile</span><span class="hljs-params">(File file)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.file = file;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对以上业务场景进行处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FXML</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">openFile</span><span class="hljs-params">()</span> </span>&#123;<br>    FileChooser fileChooser = <span class="hljs-keyword">new</span> FileChooser();<br>    fileChooser.setTitle(<span class="hljs-string">&quot;打开文件&quot;</span>);<br>    File file = fileChooser.showOpenDialog(Main.get());<br><br>    <span class="hljs-comment">// 查看当前文件是否已经被打开</span><br>    <span class="hljs-keyword">int</span> index = -<span class="hljs-number">1</span>;<br>    ObservableList&lt;Tab&gt; tabs = rightTab.getTabs();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; tabs.size(); i++) &#123;<br>        FileTab tab = (FileTab) tabs.get(i);<br>        File f = tab.getFile();<br>        <span class="hljs-keyword">boolean</span> equals = f.getAbsolutePath().equals(file.getAbsolutePath());<br>        <span class="hljs-keyword">if</span> (equals) &#123;<br>            index = i;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 如果已经打开该文件,则将该文件变成选择状态</span><br>    <span class="hljs-keyword">if</span> (index != -<span class="hljs-number">1</span>) &#123;<br>        SingleSelectionModel&lt;Tab&gt; selectionModel = rightTab.getSelectionModel();<br>        selectionModel.select(index);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 如果该文件还没有打开,则</span><br>    String fileName = file.getName();<br>    CompletableFuture.supplyAsync(() -&gt; &#123;<br>        <span class="hljs-comment">// 读取文件时,鼠标指针为WAIT状态</span><br>        rootPane.setCursor(Cursor.WAIT);<br>        StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>        <span class="hljs-keyword">try</span> (BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> FileReader(file))) &#123;<br>            br.lines().map(s -&gt; s + <span class="hljs-string">&quot;\n&quot;</span>).forEach(sb::append);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br>        <span class="hljs-comment">// 读取完成将鼠标恢复</span><br>        rootPane.setCursor(Cursor.DEFAULT);<br>        <span class="hljs-comment">// 返回读取文件数据</span><br>        <span class="hljs-keyword">return</span> sb.toString();<br>    &#125;).thenAccept(s -&gt; Platform.runLater(() -&gt; &#123;<br>        <span class="hljs-comment">// 添加tab</span><br>        FileTab tab = <span class="hljs-keyword">new</span> FileTab(fileName, file);<br>        <span class="hljs-comment">// 将文件内容加入tab中</span><br>        TextArea textArea = <span class="hljs-keyword">new</span> TextArea();<br>        textArea.setText(s);<br>        tab.setContent(textArea);<br><br>        rightTab.getTabs().add(tab);<br><br>        <span class="hljs-comment">// 将刚打开的文件的tab置为选中状态</span><br>        SingleSelectionModel&lt;Tab&gt; selectionModel = rightTab.getSelectionModel();<br>        selectionModel.select(tab);<br>    &#125;));<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">noteFx打开并展示文件(Menu,Tab,FileChooser)</summary>
    
    
    
    <category term="noteFx" scheme="https://blog.pyjava.com/categories/noteFx/"/>
    
    
    <category term="project" scheme="https://blog.pyjava.com/tags/project/"/>
    
    <category term="javaFx" scheme="https://blog.pyjava.com/tags/javaFx/"/>
    
  </entry>
  
  <entry>
    <title>noteFx-保存文件</title>
    <link href="https://blog.pyjava.com/2021/04/28/project/noteFx/06_%E4%BF%9D%E5%AD%98%E6%96%87%E4%BB%B6/"/>
    <id>https://blog.pyjava.com/2021/04/28/project/noteFx/06_%E4%BF%9D%E5%AD%98%E6%96%87%E4%BB%B6/</id>
    <published>2021-04-27T16:40:22.000Z</published>
    <updated>2021-04-28T16:32:43.557Z</updated>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p><strong>项目地址</strong> <a href="https://github.com/sandorZHAO/noteFx">https://github.com/sandorZHAO/noteFx</a></p>          </div><h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><ol><li>文件修改提示</li><li>文件保存</li></ol><h2 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h2><ol><li><code>ImageView</code></li><li>JavaFx监听</li><li>按键监听</li></ol><h2 id="文件修改提示"><a href="#文件修改提示" class="headerlink" title="文件修改提示"></a>文件修改提示</h2><p>当用户编辑文本时,提供一个文件已经被修改的状态提示,这里直接使用一个png图片展示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Image penIcon = <span class="hljs-keyword">new</span> Image(Objects.requireNonNull(ClassLoader.getSystemResourceAsStream(<span class="hljs-string">&quot;icon/pen-16.png&quot;</span>)));<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 添加tab</span><br>FileTab tab = <span class="hljs-keyword">new</span> FileTab(fileName, file);<br><span class="hljs-comment">// 将文件内容加入tab中</span><br>TextArea textArea = <span class="hljs-keyword">new</span> TextArea();<br>textArea.setText(fileContent);<br>tab.setContent(textArea);<br><span class="hljs-comment">// 监听文本区域值改变,当改变时,提供修改图标,提示用户该文件已被修改</span><br>textArea.textProperty().addListener((observable, oldValue, newValue) -&gt; &#123;<br>    ImageView iv = <span class="hljs-keyword">new</span> ImageView(penIcon);<br>    iv.setSmooth(<span class="hljs-keyword">true</span>);<br>    iv.setViewport(<span class="hljs-keyword">new</span> Rectangle2D(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>));<br>    tab.setGraphic(iv);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="文件保存"><a href="#文件保存" class="headerlink" title="文件保存"></a>文件保存</h2><p>当用户按下<code>ctrl</code>+<code>s</code>时,将文件保存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java">textArea.setOnKeyPressed((event) -&gt; &#123;<br>    <span class="hljs-keyword">if</span>(event.isControlDown() &amp;&amp; event.getCode().getName().equals(KeyCode.S.getName()))&#123;<br>        tab.setGraphic(<span class="hljs-keyword">null</span>);<br>        CompletableFuture.supplyAsync(()-&gt;&#123;<br>            FileWriter fileWriter = <span class="hljs-keyword">null</span>;<br>            <span class="hljs-keyword">try</span> &#123;<br>                fileWriter = <span class="hljs-keyword">new</span> FileWriter(tab.getFile());<br>                <span class="hljs-comment">// 写入文件</span><br>                fileWriter.write(textArea.getText());<br>                fileWriter.flush();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-keyword">if</span>(fileWriter != <span class="hljs-keyword">null</span>)&#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        fileWriter.close();<br>                    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">CompletableFuture.supplyAsync(() -&gt; &#123;<br>    <span class="hljs-comment">// some code</span><br>&#125;).thenAccept(s -&gt; Platform.runLater(() -&gt; &#123;<br>    <span class="hljs-comment">// some code</span><br>&#125;));<br></code></pre></td></tr></table></figure><p>原先代码都是写在<code>CompletableFuture</code>中,这样ui也会进入到子线程中,需要保证ui是在JavaFx的Application线程中,所有文件读取等操作放入到线程池中操作(可以提高用户体验).就有了如下代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">String fileContent = CompletableFuture.supplyAsync(() -&gt; &#123;<br>    <span class="hljs-comment">// 读取文件时,鼠标指针为WAIT状态</span><br>    rootPane.setCursor(Cursor.WAIT);<br>    StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>    <span class="hljs-keyword">try</span> (BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> FileReader(file))) &#123;<br>        br.lines().map(s -&gt; s + <span class="hljs-string">&quot;\n&quot;</span>).forEach(sb::append);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">// 读取完成将鼠标恢复</span><br>    rootPane.setCursor(Cursor.DEFAULT);<br>    <span class="hljs-comment">// 返回读取文件数据</span><br>    <span class="hljs-keyword">return</span> sb.toString();<br>&#125;).join();<br><br><span class="hljs-comment">// other code</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">noteFx保存文件(使用组件ImageView,以及JavaFx监听,按键监听)</summary>
    
    
    
    <category term="noteFx" scheme="https://blog.pyjava.com/categories/noteFx/"/>
    
    
    <category term="project" scheme="https://blog.pyjava.com/tags/project/"/>
    
    <category term="javaFx" scheme="https://blog.pyjava.com/tags/javaFx/"/>
    
  </entry>
  
  <entry>
    <title>noteFx-打包安装程序</title>
    <link href="https://blog.pyjava.com/2021/04/25/project/noteFx/03_%E6%89%93%E5%8C%85%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F/"/>
    <id>https://blog.pyjava.com/2021/04/25/project/noteFx/03_%E6%89%93%E5%8C%85%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F/</id>
    <published>2021-04-25T15:15:22.000Z</published>
    <updated>2021-04-28T15:13:08.014Z</updated>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p><strong>项目地址</strong> <a href="https://github.com/sandorZHAO/noteFx">https://github.com/sandorZHAO/noteFx</a></p>          </div><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p><a href="https://jrsoftware.org/isdl.php#stable">Inno Setup Compiler_6.1.2</a></p><h2 id="使用脚本"><a href="#使用脚本" class="headerlink" title="使用脚本"></a>使用脚本</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment">; Script generated by the Inno Setup Script Wizard.</span><br><span class="hljs-comment">; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!</span><br><br><span class="hljs-comment">#define MyAppName &quot;noteFx&quot;</span><br><span class="hljs-comment">#define MyAppVersion &quot;1.0&quot;</span><br><span class="hljs-comment">#define MyAppPublisher &quot;My Company, Inc.&quot;</span><br><span class="hljs-comment">#define MyAppURL &quot;https://www.example.com/&quot;</span><br><span class="hljs-comment">#define MyAppExeName &quot;noteFx.exe&quot;</span><br><br>[Setup]<br><span class="hljs-comment">; <span class="hljs-doctag">NOTE:</span> The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.</span><br><span class="hljs-comment">; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)</span><br>AppId=&#123;&#123;<span class="hljs-number">75</span>CD<span class="hljs-symbol">21B</span>1-A53A<span class="hljs-number">-4</span>F76<span class="hljs-number">-8</span>D46<span class="hljs-number">-9</span>EB36D886243&#125;<br>AppName=&#123;<span class="hljs-comment">#MyAppName&#125;</span><br>AppVersion=&#123;<span class="hljs-comment">#MyAppVersion&#125;</span><br><span class="hljs-comment">;AppVerName=&#123;#MyAppName&#125; &#123;#MyAppVersion&#125;</span><br>AppPublisher=&#123;<span class="hljs-comment">#MyAppPublisher&#125;</span><br>AppPublisherURL=&#123;<span class="hljs-comment">#MyAppURL&#125;</span><br>AppSupportURL=&#123;<span class="hljs-comment">#MyAppURL&#125;</span><br>AppUpdatesURL=&#123;<span class="hljs-comment">#MyAppURL&#125;</span><br>DefaultDirName=&#123;autopf&#125;\&#123;<span class="hljs-comment">#MyAppName&#125;</span><br><span class="hljs-keyword">DisableProgramGroupPage=yes</span><br><span class="hljs-keyword">; </span>Uncomment the following line to run in non administrative <span class="hljs-keyword">install </span>mode (<span class="hljs-keyword">install </span>for current user only.)<br><span class="hljs-comment">;PrivilegesRequired=lowest</span><br>OutputBaseFilename=mysetup<br>Compression=lzma<br>SolidCompression=yes<br>WizardStyle=modern<br><br>[Languages]<br><span class="hljs-symbol">Name:</span> <span class="hljs-string">&quot;english&quot;</span><span class="hljs-comment">; MessagesFile: &quot;compiler:Default.isl&quot;</span><br><span class="hljs-symbol">Name:</span> <span class="hljs-string">&quot;chinese&quot;</span><span class="hljs-comment">; MessagesFile: &quot;compiler:Languages\Chinese.isl&quot;</span><br><br>[Tasks]<br><span class="hljs-symbol">Name:</span> <span class="hljs-string">&quot;desktopicon&quot;</span><span class="hljs-comment">; Description: &quot;&#123;cm:CreateDesktopIcon&#125;&quot;; GroupDescription: &quot;&#123;cm:AdditionalIcons&#125;&quot;; Flags: unchecked</span><br><br>[Files]<br><span class="hljs-symbol">Source:</span> <span class="hljs-string">&quot;D:\work\i-workspace-noteFx\package\&#123;#MyAppExeName&#125;&quot;</span><span class="hljs-comment">; DestDir: &quot;&#123;app&#125;&quot;; Flags: ignoreversion</span><br><span class="hljs-symbol">Source:</span> <span class="hljs-string">&quot;D:\work\i-workspace-noteFx\package\miniJre\*&quot;</span><span class="hljs-comment">; DestDir: &quot;&#123;app&#125;\miniJre&quot;; Flags: ignoreversion recursesubdirs createallsubdirs</span><br><span class="hljs-comment">; <span class="hljs-doctag">NOTE:</span> Don&#x27;t use &quot;Flags: ignoreversion&quot; on any shared system files</span><br><br>[Icons]<br><span class="hljs-symbol">Name:</span> <span class="hljs-string">&quot;&#123;autoprograms&#125;\&#123;#MyAppName&#125;&quot;</span><span class="hljs-comment">; Filename: &quot;&#123;app&#125;\&#123;#MyAppExeName&#125;&quot;</span><br><span class="hljs-symbol">Name:</span> <span class="hljs-string">&quot;&#123;autodesktop&#125;\&#123;#MyAppName&#125;&quot;</span><span class="hljs-comment">; Filename: &quot;&#123;app&#125;\&#123;#MyAppExeName&#125;&quot;; Tasks: desktopicon</span><br><br>[Run]<br><span class="hljs-symbol">Filename:</span> <span class="hljs-string">&quot;&#123;app&#125;\&#123;#MyAppExeName&#125;&quot;</span><span class="hljs-comment">; Description: &quot;&#123;cm:LaunchProgram,&#123;#StringChange(MyAppName, &#x27;&amp;&#x27;, &#x27;&amp;&amp;&#x27;)&#125;&#125;&quot;; Flags: nowait postinstall skipifsilent</span><br></code></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><a href="/file/project/noteFx/mysetup.zip">mysetup.exe</a></p><h2 id="中文安装配置"><a href="#中文安装配置" class="headerlink" title="中文安装配置"></a>中文安装配置</h2><p><a href="/file/project/noteFx/Chinese.isl">Chinese.isl</a></p><p>该文件请放置在inno Setup Compiler的安装目录(\Inno Setup 6\Languages)下面</p>]]></content>
    
    
    <summary type="html">noteFx打包安装程序</summary>
    
    
    
    <category term="noteFx" scheme="https://blog.pyjava.com/categories/noteFx/"/>
    
    
    <category term="project" scheme="https://blog.pyjava.com/tags/project/"/>
    
    <category term="javaFx" scheme="https://blog.pyjava.com/tags/javaFx/"/>
    
  </entry>
  
  <entry>
    <title>noteFx-新!打包方法</title>
    <link href="https://blog.pyjava.com/2021/04/25/project/noteFx/04_%E6%96%B0!%E6%89%93%E5%8C%85%E6%96%B9%E6%B3%95/"/>
    <id>https://blog.pyjava.com/2021/04/25/project/noteFx/04_%E6%96%B0!%E6%89%93%E5%8C%85%E6%96%B9%E6%B3%95/</id>
    <published>2021-04-25T15:15:22.000Z</published>
    <updated>2021-04-28T06:31:35.424Z</updated>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p><strong>项目地址</strong> <a href="https://github.com/sandorZHAO/noteFx">https://github.com/sandorZHAO/noteFx</a></p>          </div><p>我在找JavaFx文档的时候,无意间在<a href="https://openjfx.cn/">官网</a>找到了<a href="https://github.com/fvarrui/JavaPackager">JavaPackager</a>,安装方法请见git教程</p><h2 id="软件依赖"><a href="#软件依赖" class="headerlink" title="软件依赖"></a>软件依赖</h2><p><a href="http://www.jrsoftware.org/isinfo.php">Inno Setup</a><br><a href="https://wixtoolset.org/releases/">WiX Toolset</a></p><p>安装完成后发现了一些问题,在使用<code>mvn package</code>的时候找不到<code>iscc</code>和<code>candle</code>指令.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plain">Setup installer generation failed due to: Command execution failed: iscc<br>...<br>...<br>...<br>MSI merge module generation failed due to: Command execution failed: candle -out<br>...<br>...<br>...<br></code></pre></td></tr></table></figure><p>翻看了JavaPackager的Issue后发现需要安装<code>choco</code></p><blockquote><ol><li>Install Chocolatey package manager.</li><li>Run next command on CMD or PowerShell as Administrator to install both tools:<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">choco <span class="hljs-keyword">install</span> -y innosetup wixtoolset<br></code></pre></td></tr></table></figure></li></ol></blockquote><p>当装好后发现,<code>iscc</code>可以运行了,但是candle不可以,原来choco没有安装二进制的wixtoolset</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ol><li>卸载<code>choco</code></li><li>安装<code>Inno Setup</code>,<code>WiX Toolset</code></li><li>加入环境变量PATH,就可以在控制台使用iscc和candle了</li></ol><div class="note note-warning">            <p>需要注意的是,idea可能需要重启</p>          </div>]]></content>
    
    
    <summary type="html">noteFx新打包方法</summary>
    
    
    
    <category term="noteFx" scheme="https://blog.pyjava.com/categories/noteFx/"/>
    
    
    <category term="project" scheme="https://blog.pyjava.com/tags/project/"/>
    
    <category term="javaFx" scheme="https://blog.pyjava.com/tags/javaFx/"/>
    
  </entry>
  
  <entry>
    <title>noteFx-打包exe</title>
    <link href="https://blog.pyjava.com/2021/04/25/project/noteFx/02_%E6%89%93%E5%8C%85exe/"/>
    <id>https://blog.pyjava.com/2021/04/25/project/noteFx/02_%E6%89%93%E5%8C%85exe/</id>
    <published>2021-04-25T14:15:22.000Z</published>
    <updated>2021-04-26T14:14:37.555Z</updated>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p><strong>项目地址</strong> <a href="https://github.com/sandorZHAO/noteFx">https://github.com/sandorZHAO/noteFx</a></p>          </div><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p><a href="https://exe4j.apponic.com/">exe4j_v6.0.1</a></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p><img src="/img/project/noteFx/02-00-exe4j.png" alt="打包exe-1"><br><img src="/img/project/noteFx/02-01-exe4j.png" alt="打包exe-2"><br><img src="/img/project/noteFx/02-02-exe4j.png" alt="打包exe-3"><br><img src="/img/project/noteFx/02-03-exe4j.png" alt="打包exe-4"><br><img src="/img/project/noteFx/02-04-exe4j.png" alt="打包exe-5"><br><img src="/img/project/noteFx/02-05-exe4j.png" alt="打包exe-6"><br><img src="/img/project/noteFx/02-06-exe4j.png" alt="打包exe-7"><br><img src="/img/project/noteFx/02-07-exe4j.png" alt="打包exe-8"><br><img src="/img/project/noteFx/02-08-exe4j.png" alt="打包exe-9"></p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>当然你现在是打不开的,因为目前使用的是./miniJre目录那么当前是找不到这个依赖的</p><h2 id="精简jre"><a href="#精简jre" class="headerlink" title="精简jre"></a>精简jre</h2><p>到对应的java 11 安装目录下执行以下脚本,进行<strong>精简jre</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./bin/jlink.exe  --strip-debug --compress 1 --no-header-files --no-man-pages --output miniJre --add-modules java.base,jdk.unsupported,java.desktop,java.scripting<br></code></pre></td></tr></table></figure><p>将<code>java.base</code>,<code>jdk.unsupported</code>,<code>java.desktop</code>,<code>java.scripting</code>模块导出形成miniJre,并且将miniJar和刚才打包出来的exe放到同一目录下,这时候打开对应exe文件就可以查看效果了</p><p><img src="/img/project/noteFx/02-09-result.png" alt="效果"></p>]]></content>
    
    
    <summary type="html">noteFx打包exe</summary>
    
    
    
    <category term="noteFx" scheme="https://blog.pyjava.com/categories/noteFx/"/>
    
    
    <category term="project" scheme="https://blog.pyjava.com/tags/project/"/>
    
    <category term="javaFx" scheme="https://blog.pyjava.com/tags/javaFx/"/>
    
  </entry>
  
  <entry>
    <title>noteFx-项目初始化</title>
    <link href="https://blog.pyjava.com/2021/04/25/project/noteFx/01_%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <id>https://blog.pyjava.com/2021/04/25/project/noteFx/01_%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96/</id>
    <published>2021-04-25T13:45:22.000Z</published>
    <updated>2021-04-25T17:13:15.658Z</updated>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p><strong>项目地址</strong> <a href="https://github.com/sandorZHAO/noteFx">https://github.com/sandorZHAO/noteFx</a></p>          </div><h2 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h2><h3 id="通过Idea的maven构建项目"><a href="#通过Idea的maven构建项目" class="headerlink" title="通过Idea的maven构建项目"></a>通过Idea的maven构建项目</h3><p><img src="/img/project/noteFx/01-00.png" alt="idea构建-1"><br><img src="/img/project/noteFx/01-01.png" alt="idea构建-2"></p><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p><img src="/img/project/noteFx/01-02-项目结构.png" alt="项目结构"></p><h3 id="pom依赖加入"><a href="#pom依赖加入" class="headerlink" title="pom依赖加入"></a>pom依赖加入</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs xml">    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">javafx.version</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">javafx.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.openjfx<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javafx-controls<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;javafx.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.openjfx<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javafx-fxml<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;javafx.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>noteFx<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/fxml/*.fxml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.6.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>$&#123;maven.compiler.source&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>$&#123;maven.compiler.target&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">archive</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">manifest</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>com.pyjava.notefx.AppLauncher<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">archive</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">descriptorRefs</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">descriptorRef</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">descriptorRefs</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>single<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="部分java类"><a href="#部分java类" class="headerlink" title="部分java类"></a>部分java类</h3><ul><li><p><code>AppLauncher</code>应用启动类,后续打包成exe后防止报错</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppLauncher</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Application.launch(Main.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>Main</code>启动类</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Application</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        launch(args);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">start</span><span class="hljs-params">(Stage primaryStage)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        URL resource = getClass().getClassLoader().getResource(<span class="hljs-string">&quot;fxml/main.fxml&quot;</span>);<br>        <span class="hljs-keyword">assert</span> resource != <span class="hljs-keyword">null</span>;<br>        Parent root = FXMLLoader.load(resource);<br>        Scene scene = <span class="hljs-keyword">new</span> Scene(root, <span class="hljs-number">600</span>, <span class="hljs-number">500</span>);<br><br>        primaryStage.setTitle(<span class="hljs-string">&quot;Simple JavaFX&quot;</span>);<br>        primaryStage.setScene(scene);<br>        primaryStage.show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>MainController</code></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainController</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handlerBtnClick</span><span class="hljs-params">(ActionEvent event)</span> </span>&#123;<br>        Button btnSource = (Button) event.getSource();<br>        btnSource.setText(<span class="hljs-string">&quot;I am clicked!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>main.fxml</code></p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><br>&lt;?import javafx.scene.control.Button?&gt;<br>&lt;?import javafx.scene.layout.BorderPane?&gt;<br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">BorderPane</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://javafx.com/javafx/8.0.112&quot;</span> <span class="hljs-attr">xmlns:fx</span>=<span class="hljs-string">&quot;http://javafx.com/fxml/1&quot;</span> <span class="hljs-attr">fx:controller</span>=<span class="hljs-string">&quot;com.pyjava.notefx.controller.MainController&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">text</span>=<span class="hljs-string">&quot;Click Me&quot;</span> <span class="hljs-attr">BorderPane.alignment</span>=<span class="hljs-string">&quot;CENTER&quot;</span> <span class="hljs-attr">onAction</span>=<span class="hljs-string">&quot;#handlerBtnClick&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">BorderPane</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">noteFx项目初始化</summary>
    
    
    
    <category term="noteFx" scheme="https://blog.pyjava.com/categories/noteFx/"/>
    
    
    <category term="project" scheme="https://blog.pyjava.com/tags/project/"/>
    
    <category term="javaFx" scheme="https://blog.pyjava.com/tags/javaFx/"/>
    
  </entry>
  
  <entry>
    <title>noteFx-介绍</title>
    <link href="https://blog.pyjava.com/2021/04/25/project/noteFx/00_%E4%BB%8B%E7%BB%8D/"/>
    <id>https://blog.pyjava.com/2021/04/25/project/noteFx/00_%E4%BB%8B%E7%BB%8D/</id>
    <published>2021-04-25T13:20:00.000Z</published>
    <updated>2021-04-27T16:58:23.457Z</updated>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p><strong>项目地址</strong> <a href="https://github.com/sandorZHAO/noteFx">https://github.com/sandorZHAO/noteFx</a></p>          </div><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>项目名:noteFx</p><h2 id="项目需求"><a href="#项目需求" class="headerlink" title="项目需求"></a>项目需求</h2><p>hexo编辑器</p><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><p>Idea</p>]]></content>
    
    
    <summary type="html">noteFx介绍(技术栈及需求分析)</summary>
    
    
    
    <category term="noteFx" scheme="https://blog.pyjava.com/categories/noteFx/"/>
    
    
    <category term="project" scheme="https://blog.pyjava.com/tags/project/"/>
    
    <category term="javaFx" scheme="https://blog.pyjava.com/tags/javaFx/"/>
    
  </entry>
  
  <entry>
    <title>包装类型</title>
    <link href="https://blog.pyjava.com/2021/04/23/java/02_core_class/02_%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B/"/>
    <id>https://blog.pyjava.com/2021/04/23/java/02_core_class/02_%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B/</id>
    <published>2021-04-22T16:10:00.000Z</published>
    <updated>2021-04-28T17:05:17.539Z</updated>
    
    <content type="html"><![CDATA[<h2 id="java-数据类型"><a href="#java-数据类型" class="headerlink" title="java 数据类型"></a>java 数据类型</h2><blockquote><p>基本数据类型:byte,short,int,long,float,double,char,boolean<br>引用数据类型: class,interface</p></blockquote><h2 id="为什么需要包装类型"><a href="#为什么需要包装类型" class="headerlink" title="为什么需要包装类型"></a>为什么需要包装类型</h2><p>那么为什么需要包装类型呢？</p><p>我们知道 Java 是一个面相对象的编程语言，基本类型并不具有对象的性质，为了让基本类型也具有对象的特征，就出现了包装类型（如我们在使用集合类型 Collection 时就一定要使用包装类型而非基本类型），它相当于将基本类型“包装起来”，使得它具有了对象的性质，并且为其添加了属性和方法，丰富了基本类型的操作。</p><h2 id="基本类型与包装类型对应关系"><a href="#基本类型与包装类型对应关系" class="headerlink" title="基本类型与包装类型对应关系"></a>基本类型与包装类型对应关系</h2><div class="table-container"><table><thead><tr><th>基本类型</th><th>对应的引用类型</th></tr></thead><tbody><tr><td>boolean</td><td>java.lang.Boolean</td></tr><tr><td>byte</td><td>java.lang.Byte</td></tr><tr><td>short</td><td>java.lang.Short</td></tr><tr><td>int</td><td>java.lang.Integer</td></tr><tr><td>long</td><td>java.lang.Long</td></tr><tr><td>float</td><td>java.lang.Float</td></tr><tr><td>double</td><td>java.lang.Double</td></tr><tr><td>char</td><td>java.lang.Character</td></tr></tbody></table></div><h2 id="自动装箱"><a href="#自动装箱" class="headerlink" title="自动装箱"></a>自动装箱</h2><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">Integer</span> n = <span class="hljs-number">100</span>; // 编译器自动使用<span class="hljs-keyword">Integer</span>.valueOf(<span class="hljs-built_in">int</span>)<br><span class="hljs-built_in">int</span> x = n; // 编译器自动使用<span class="hljs-keyword">Integer</span>.intValue()<br></code></pre></td></tr></table></figure><h2 id="不变类"><a href="#不变类" class="headerlink" title="不变类"></a>不变类</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Integer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Number</span> <span class="hljs-title">implements</span> <span class="hljs-title">Comparable&lt;Integer&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="Integer-amp-amp-Long"><a href="#Integer-amp-amp-Long" class="headerlink" title="Integer &amp;&amp; Long"></a>Integer &amp;&amp; Long</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IntegerCache</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> low = -<span class="hljs-number">128</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> high;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Integer cache[];<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-comment">// high value may be configured by property</span><br>        <span class="hljs-keyword">int</span> h = <span class="hljs-number">127</span>;<br>        String integerCacheHighPropValue =<br>            sun.misc.VM.getSavedProperty(<span class="hljs-string">&quot;java.lang.Integer.IntegerCache.high&quot;</span>);<br>        <span class="hljs-keyword">if</span> (integerCacheHighPropValue != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">int</span> i = parseInt(integerCacheHighPropValue);<br>                i = Math.max(i, <span class="hljs-number">127</span>);<br>                <span class="hljs-comment">// Maximum array size is Integer.MAX_VALUE</span><br>                h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">catch</span>( NumberFormatException nfe) &#123;<br>                <span class="hljs-comment">// If the property cannot be parsed into an int, ignore it.</span><br>            &#125;<br>        &#125;<br>        high = h;<br><br>        cache = <span class="hljs-keyword">new</span> Integer[(high - low) + <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">int</span> j = low;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; cache.length; k++)<br>            cache[k] = <span class="hljs-keyword">new</span> Integer(j++);<br><br>        <span class="hljs-comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span><br>        <span class="hljs-keyword">assert</span> IntegerCache.high &gt;= <span class="hljs-number">127</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">IntegerCache</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title">valueOf</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)<br>        <span class="hljs-keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Integer(i);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们再来看下以下代码会发生什么</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer a1 = Integer.valueOf(<span class="hljs-number">100</span>);<br>Integer a2 = Integer.valueOf(<span class="hljs-number">100</span>);<br><br>Integer b1 = <span class="hljs-number">100</span>;<br>Integer b2 = <span class="hljs-number">100</span>;<br><br>Integer c1 = <span class="hljs-number">200</span>;<br>Integer c2 = <span class="hljs-number">200</span>;<br><br><span class="hljs-keyword">if</span>(a1==a2) &#123;<br>    System.out.println(<span class="hljs-string">&quot;相等&quot;</span>);<span class="hljs-comment">//相等</span><br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;不相等&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span>(b1==b2) &#123;<br>    System.out.println(<span class="hljs-string">&quot;相等&quot;</span>);<span class="hljs-comment">//相等</span><br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;不相等&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span>(c1==c2) &#123;<br>    System.out.println(<span class="hljs-string">&quot;相等&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;不相等&quot;</span>);<span class="hljs-comment">//不相等</span><br>&#125;<br></code></pre></td></tr></table></figure><div class="note note-info">            <p>Integer缓存了-128~127之间的数，这是在类加载期间就完成的。以后需要的时候直接指向它就可以了，省去了构造对象的开支，提高了效率。<br>同理<code>Long</code>也是一样</p>          </div>]]></content>
    
    
    <summary type="html">包装类型</summary>
    
    
    
    
    <category term="Java" scheme="https://blog.pyjava.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java Object</title>
    <link href="https://blog.pyjava.com/2021/04/22/java/02_core_class/00_Object/"/>
    <id>https://blog.pyjava.com/2021/04/22/java/02_core_class/00_Object/</id>
    <published>2021-04-22T10:50:00.000Z</published>
    <updated>2021-04-22T10:07:50.744Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一切皆对象-Object"><a href="#一切皆对象-Object" class="headerlink" title="一切皆对象 Object"></a>一切皆对象 Object</h2><h2 id="Object方法"><a href="#Object方法" class="headerlink" title="Object方法"></a>Object方法</h2><h3 id="getClass"><a href="#getClass" class="headerlink" title="getClass"></a>getClass</h3><p>用来获取运行时的对象；当声明对象和.class 文件中真正的对象不一致时，该方法会返回.class 的对象</p><p>主要用于 Java 的反射 <code>public final native Class&lt;?&gt; getClass();</code></p><h3 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode"></a>hashCode</h3><p>用来获取一个对象 int 类型的 hash 码</p><p><code>public native int hashCode();</code></p><ol><li>native</li><li>没有 final，可重写</li><li>注意点<ol><li>在 java 程序执行过程中，在一个对象没有被改变的前提下，无论这个对象被调用多少次，hashCode 方法都会返回相同的 int 值。这个 int 值可在不同的程序中不同;</li><li>如果 2 个对象使用 equals 方法进行比较并且相同的话，那么这 2 个对象的 hashCode 方法的值也必须相等;</li><li>如果根据 equals 方法，得到两个对象不相等，那么这 2 个对象的 hashCode 值可以不相同; 但是，不相等的对象的 hashCode 值不同的话可以提高哈希表的性能;</li></ol></li></ol><h3 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h3><p>是比较两个对象是否相等</p><p>默认是实现是比较引用是否相同, 即是否为同一个内存对象;</p><ol><li>自反性 对于任意非空对象 x,x.equals(x)=true</li><li>对称性 对于任意非空对象 x,y, x.equals(y) = y.equals.(x)</li><li>传递性 对于任意非空对象 x,y,z, 若有 x.equals(y) , y.equals.(z),则 x.equals(z) =true</li><li>一致性 对于任意非空对象 x,y, x,y 都没有修改的前提下，x.equals(y)值唯一</li><li>对于任意非空对象 x,x.equals(null)，一定为 false</li><li>重写 equals 最好重写 hashcode</li></ol><h3 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h3><p><code>protected native Object clone() throws CloneNotSupportedException;</code></p><p>返回当前对象的一份拷贝</p><p>引申出深拷贝和浅拷贝</p><blockquote><p>浅拷贝：基本数据类型直接值传递，引用数据类型拷贝引用地址</p><p>深拷贝：复制对象的所有基本数据类型，为所有引用数据类型的成员变量申请存储空间</p></blockquote><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h3><h3 id="notify-和-notifyAll-和-wait"><a href="#notify-和-notifyAll-和-wait" class="headerlink" title="notify 和 notifyAll 和 wait"></a>notify 和 notifyAll 和 wait</h3><ol><li><p>wait 在同步代码块中调用该方法时，当前线程立即释放锁并等待，知道有其他线程调用</p></li><li><p>notify/notifyAll 或等待超时时，才会去再次竞争锁，成功后继续执行下面的逻辑</p></li><li><p>wait<br><code>public final native void wait(long timeout) throws InterruptedException;</code></p></li><li><p>notify</p><p>线程 A 在同步代码块中调用该方法，会随机地唤醒一个等待在该对象锁上的线程 B，主语这时候唤醒的线程 B 还没有持有锁，必须要等到线程 A 释放锁才能持有该锁。</p><blockquote><p>如果线程在 A 对象的同步代码块中执行 B 对象的 notify，会抛出 <code>illegalMonitorStateException</code></p></blockquote></li><li><p>notyfyAll</p><p>线程 A 在同步代码块中调用该方法时，会唤醒所有等待在该锁上的线程，同样的，这些唤醒的线程只有在线程 A 放锁以后，才能再次竞争该锁，竞争到该锁的线程继续执行，其他线程等待</p><blockquote><p>如果调用的线程不是该锁的持有者，那么也会抛出<code>illegalMonitorStateException</code></p></blockquote></li></ol><h3 id="finalize"><a href="#finalize" class="headerlink" title="finalize"></a>finalize</h3><p><code>protected void finalize() throws Throwable &#123; &#125;</code></p><p>JVM 在进行 GC 时，如果这个对象需要被回收，会判断该方法是否被重写，若未重写，则直接回收该对象内存空间。反之，判断该对象的 finalize 是否被执行过，若没有执行过，会放入一个队列，由低优先级的线程去执行该对象的 finalize 方法，执行完毕后再判断该对象是否需要回收；如果该对象已经执行一遍finalize 方法，直接回收对象的内存空间</p><ol><li>对象可能不被垃圾回收</li><li>垃圾回收并不等于析构</li><li>垃圾回收只与内存有关</li></ol><h3 id="registerNatives"><a href="#registerNatives" class="headerlink" title="registerNatives"></a>registerNatives</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerNatives</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">static</span> &#123;<br>    registerNatives();<br>&#125;<br><br></code></pre></td></tr></table></figure><ol><li>static</li><li>native</li></ol><p>注册原生方法：</p><p>必须通过<code>RegisterNatives</code>从自己的库中的本机代码调用JNI函数</p>]]></content>
    
    
    <summary type="html">java Object</summary>
    
    
    
    
    <category term="Java" scheme="https://blog.pyjava.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>ioui-介绍</title>
    <link href="https://blog.pyjava.com/2021/04/19/project/io-ui/00_%E4%BB%8B%E7%BB%8D/"/>
    <id>https://blog.pyjava.com/2021/04/19/project/io-ui/00_%E4%BB%8B%E7%BB%8D/</id>
    <published>2021-04-18T16:20:00.000Z</published>
    <updated>2021-04-21T05:01:49.008Z</updated>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p><strong>项目地址</strong> <a href="https://github.com/io-ui/io-ui">https://github.com/io-ui/io-ui</a><br><strong>项目文档</strong> <a href="https://io-ui.pyjava.com/">https://io-ui.pyjava.com/</a></p>          </div><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>Io-Ui<br>基于vue的ui样式组件</p><h2 id="名称来源"><a href="#名称来源" class="headerlink" title="名称来源"></a>名称来源</h2><p>io 来源于dota2中小精灵</p><h2 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h2><ol><li>Color 颜色</li><li>Font 字体</li><li>Shadow 投影</li></ol><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><ol><li><input type="checkbox" disabled checked="checked"> Button 按钮</li><li><input type="checkbox" disabled checked="checked"> Icon 图标 </li><li><input type="checkbox" disabled > Toast 消息框</li></ol>]]></content>
    
    
    <summary type="html">ioui介绍(技术栈及需求分析)</summary>
    
    
    
    <category term="ioui" scheme="https://blog.pyjava.com/categories/ioui/"/>
    
    
    <category term="project" scheme="https://blog.pyjava.com/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>电商平台-swagger</title>
    <link href="https://blog.pyjava.com/2021/04/18/project/%E7%94%B5%E5%95%86%E5%B9%B3%E5%8F%B0/03_swagger/"/>
    <id>https://blog.pyjava.com/2021/04/18/project/%E7%94%B5%E5%95%86%E5%B9%B3%E5%8F%B0/03_swagger/</id>
    <published>2021-04-18T15:24:06.000Z</published>
    <updated>2021-04-21T05:01:02.960Z</updated>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p><strong>项目地址</strong> <a href="https://github.com/sandorZHAO/shop">https://github.com/sandorZHAO/shop</a></p>          </div><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>以下摘自oschina<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="oschina-swagger介绍">[1]</span></a></sup></p><blockquote><p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。</p><p>总体目标是使客户端和文件系统作为服务器以同样的速度来更新。文件的方法、参数和模型紧密集成到服务器端的代码，允许 API 来始终保持同步。Swagger 让部署管理和使用功能强大的 API 从未如此简单。</p></blockquote><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@EnableOpenApi</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SwaggerConfiguration</span> </span>&#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">webApiDoc</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.OAS_30)<br>                .groupName(<span class="hljs-string">&quot;用户端接口文档&quot;</span>)<br>                .pathMapping(<span class="hljs-string">&quot;/&quot;</span>)<br>                <span class="hljs-comment">// 定义是否开启swagger, 可以通过变量配置它</span><br>                .enable(<span class="hljs-keyword">true</span>)<br>                <span class="hljs-comment">// 配置文档的元信息</span><br>                .apiInfo(apiInfo())<br>                .select()<br>                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.pyjava.shop&quot;</span>))<br>                <span class="hljs-comment">// 正则匹配请求路径,并分配当前分组</span><br>                .paths(PathSelectors.ant(<span class="hljs-string">&quot;api/**&quot;</span>))<br>                .build()<br>                .globalRequestParameters(globalRequestParameters())<br>                .globalResponses(HttpMethod.GET, getGlobalResponseMessage());<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">adminApiDoc</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.OAS_30)<br>                .groupName(<span class="hljs-string">&quot;管理端接口文档&quot;</span>)<br>                .pathMapping(<span class="hljs-string">&quot;/&quot;</span>)<br>                <span class="hljs-comment">// 定义是否开启swagger, 可以通过变量配置它</span><br>                .enable(<span class="hljs-keyword">true</span>)<br>                <span class="hljs-comment">// 配置文档的元信息</span><br>                .apiInfo(apiInfo())<br>                .select()<br>                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.pyjava.shop&quot;</span>))<br>                <span class="hljs-comment">// 正则匹配请求路径,并分配当前分组</span><br>                .paths(PathSelectors.ant(<span class="hljs-string">&quot;admin/**&quot;</span>))<br>                .build();<br><br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title">apiInfo</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ApiInfoBuilder()<br>                .title(<span class="hljs-string">&quot;电商平台&quot;</span>)<br>                .description(<span class="hljs-string">&quot;微服务接口文档&quot;</span>)<br>                .version(<span class="hljs-string">&quot;v1.0&quot;</span>)<br>                .contact(<span class="hljs-keyword">new</span> Contact(<span class="hljs-string">&quot;zhaojj&quot;</span>, <span class="hljs-string">&quot;http://pyjava.com&quot;</span>, <span class="hljs-string">&quot;757355084@qq.com&quot;</span>))<br>                .build();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> List&lt;RequestParameter&gt; <span class="hljs-title">globalRequestParameters</span><span class="hljs-params">()</span> </span>&#123;<br>        List&lt;RequestParameter&gt; parameters = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        parameters.add(<span class="hljs-keyword">new</span> RequestParameterBuilder()<br>                .name(<span class="hljs-string">&quot;token&quot;</span>)<br>                .description(<span class="hljs-string">&quot;登录令牌&quot;</span>)<br>                .in(ParameterType.HEADER)<br>                .query(q -&gt; q.model(m -&gt; m.scalarModel(ScalarType.STRING)))<br>                .required(<span class="hljs-keyword">false</span>)<br>                .build());<br><br>        <span class="hljs-keyword">return</span> parameters;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> List&lt;Response&gt; <span class="hljs-title">getGlobalResponseMessage</span><span class="hljs-params">()</span> </span>&#123;<br>        List&lt;Response&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>        list.add(<span class="hljs-keyword">new</span> ResponseBuilder()<br>                .code(<span class="hljs-string">&quot;4xx&quot;</span>)<br>                .description(<span class="hljs-string">&quot;请求错误,根据code和msg检查&quot;</span>)<br>                .build());<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><section class="footnotes"><h2>参考</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.oschina.net/p/swagger?hmsr=aladdin1e1">oschina-swagger介绍</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <summary type="html">电商平台-common模块</summary>
    
    
    
    <category term="基于Spring Alibaba Cloud的电商平台" scheme="https://blog.pyjava.com/categories/%E5%9F%BA%E4%BA%8ESpring-Alibaba-Cloud%E7%9A%84%E7%94%B5%E5%95%86%E5%B9%B3%E5%8F%B0/"/>
    
    
    <category term="project" scheme="https://blog.pyjava.com/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>电商平台-用户模块</title>
    <link href="https://blog.pyjava.com/2021/04/18/project/%E7%94%B5%E5%95%86%E5%B9%B3%E5%8F%B0/04_%E7%94%A8%E6%88%B7%E6%A8%A1%E5%9D%97/"/>
    <id>https://blog.pyjava.com/2021/04/18/project/%E7%94%B5%E5%95%86%E5%B9%B3%E5%8F%B0/04_%E7%94%A8%E6%88%B7%E6%A8%A1%E5%9D%97/</id>
    <published>2021-04-18T15:24:06.000Z</published>
    <updated>2021-04-21T05:01:07.240Z</updated>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p><strong>项目地址</strong> <a href="https://github.com/sandorZHAO/shop">https://github.com/sandorZHAO/shop</a></p>          </div><h2 id="注册功能"><a href="#注册功能" class="headerlink" title="注册功能"></a>注册功能</h2><h3 id="功能需求"><a href="#功能需求" class="headerlink" title="功能需求"></a>功能需求</h3><ul><li>使用邮箱注册，已经注册的邮箱不能重复注册</li><li>密码不能使用简单的MD5加密</li><li>用户上传头像需要用文件存储</li></ul><h3 id="安全需求"><a href="#安全需求" class="headerlink" title="安全需求"></a>安全需求</h3><ul><li>高并发下邮箱唯一性</li><li>注册邮箱或者手机验证码不能被恶意调用</li><li>头像文件存储访问方便扩容和管理</li></ul><h3 id="短信轰炸"><a href="#短信轰炸" class="headerlink" title="短信轰炸"></a>短信轰炸</h3><ul><li><p>什么是短信-邮箱轰炸机：</p><p>  手机短信轰炸机是批量、循环给手机无限发送各种网站的注册验证码短信的方法。</p></li></ul><h3 id="图形验证码"><a href="#图形验证码" class="headerlink" title="图形验证码"></a>图形验证码</h3><ul><li><p>依赖</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>kaptcha-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>开发配置</p><p>  在user工程下</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CaptchaConfig</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 验证码配置</span><br><span class="hljs-comment">    * Kaptcha配置类名</span><br><span class="hljs-comment">    * </span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@Qualifier(&quot;captchaProducer&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DefaultKaptcha <span class="hljs-title">kaptcha</span><span class="hljs-params">()</span> </span>&#123;<br>        DefaultKaptcha kaptcha = <span class="hljs-keyword">new</span> DefaultKaptcha();<br>        Properties properties = <span class="hljs-keyword">new</span> Properties();<br><span class="hljs-comment">//properties.setProperty(Constants.KAPTCHA_BORDER, &quot;yes&quot;);</span><br><span class="hljs-comment">//properties.setProperty(Constants.KAPTCHA_BORDER_COLOR, &quot;220,220,220&quot;);</span><br><span class="hljs-comment">////properties.setProperty(Constants.KAPTCHA_TEXTPRODUCER_FONT_COLOR, &quot;38,29,12&quot;);</span><br><span class="hljs-comment">//properties.setProperty(Constants.KAPTCHA_IMAGE_WIDTH, &quot;147&quot;);</span><br><span class="hljs-comment">//properties.setProperty(Constants.KAPTCHA_IMAGE_HEIGHT, &quot;34&quot;);</span><br><span class="hljs-comment">//properties.setProperty(Constants.KAPTCHA_TEXTPRODUCER_FONT_SIZE, &quot;25&quot;);</span><br><span class="hljs-comment">////properties.setProperty(Constants.KAPTCHA_SESSION_KEY, &quot;code&quot;);</span><br>        <span class="hljs-comment">//验证码个数</span><br>        properties.setProperty(Constants.KAPTCHA_TEXTPRODUCER_CHAR_LENGTH, <span class="hljs-string">&quot;4&quot;</span>);<br><span class="hljs-comment">//properties.setProperty(Constants.KAPTCHA_TEXTPRODUCER_FONT_NAMES, &quot;Courier&quot;);</span><br>        <span class="hljs-comment">//字体间隔</span><br>        properties.setProperty(Constants.KAPTCHA_TEXTPRODUCER_CHAR_SPACE,<span class="hljs-string">&quot;8&quot;</span>);<br>        <span class="hljs-comment">//干扰线颜色</span><br><span class="hljs-comment">//properties.setProperty(Constants.KAPTCHA_NOISE_COLOR, &quot;white&quot;);</span><br>        <span class="hljs-comment">//干扰实现类</span><br>        properties.setProperty(Constants.KAPTCHA_NOISE_IMPL, <span class="hljs-string">&quot;com.google.code.kaptcha.impl.NoNoise&quot;</span>);<br>        <span class="hljs-comment">//图片样式</span><br>        properties.setProperty(Constants.KAPTCHA_OBSCURIFICATOR_IMPL, <span class="hljs-string">&quot;com.google.code.kaptcha.impl.WaterRipple&quot;</span>);<br>        <span class="hljs-comment">//文字来源</span><br>        properties.setProperty(Constants.KAPTCHA_TEXTPRODUCER_CHAR_STRING, <span class="hljs-string">&quot;0123456789&quot;</span>);<br>        Config config = <span class="hljs-keyword">new</span> Config(properties);<br>        kaptcha.setConfig(config);<br>        <span class="hljs-keyword">return</span> kaptcha;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>对应接口实现</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Api(tags = &quot;通知模块&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/api/notify/v1/&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NotifyController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Qualifier(&quot;captchaProducer&quot;)</span><br>    <span class="hljs-keyword">private</span> Producer captchaProducer;<br><br>    <span class="hljs-meta">@GetMapping(&quot;captcha&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getCaptcha</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span></span>&#123;<br>        String captcha = captchaProducer.createText();<br>        log.info(<span class="hljs-string">&quot;图形验证码&quot;</span> + captcha);<br>        BufferedImage image = captchaProducer.createImage(captcha);<br>        ServletOutputStream outputStream;<br>        <span class="hljs-keyword">try</span> &#123;<br>            outputStream = response.getOutputStream();<br>            ImageIO.write(image, <span class="hljs-string">&quot;jpg&quot;</span>, outputStream);<br>            outputStream.flush();<br>            outputStream.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>            log.error(<span class="hljs-string">&quot;获取验证码异常:&#123;0&#125;&quot;</span>, e);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>请求结果</p><p>  <img src="/img/project/shop/shop-captcha.png" alt="获取图形验证码"></p></li></ul>]]></content>
    
    
    <summary type="html">电商平台-用户模块</summary>
    
    
    
    <category term="基于Spring Alibaba Cloud的电商平台" scheme="https://blog.pyjava.com/categories/%E5%9F%BA%E4%BA%8ESpring-Alibaba-Cloud%E7%9A%84%E7%94%B5%E5%95%86%E5%B9%B3%E5%8F%B0/"/>
    
    
    <category term="project" scheme="https://blog.pyjava.com/tags/project/"/>
    
  </entry>
  
</feed>
